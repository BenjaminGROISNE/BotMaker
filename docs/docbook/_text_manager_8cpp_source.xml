<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__text_manager_8cpp_source" xml:lang="en-US">
<title>TextManager.cpp</title>
<indexterm><primary>src/TextManager.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__text_manager_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__text_manager_8h">TextManager.h</link>&quot;</emphasis>
<anchor xml:id="__text_manager_8cpp_source_1l00002"/>00002 
<anchor xml:id="__text_manager_8cpp_source_1l00003"/>00003 
<anchor xml:id="__text_manager_8cpp_source_1l00004"/><link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">00004</link> std::string&#32;<link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__text_manager_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;std::string&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;std::ifstream&#32;file(path);
<anchor xml:id="__text_manager_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(getline(file,&#32;line))&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;text&#32;+=&#32;line&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;read&#32;File&quot;</emphasis>&#32;+&#32;path;
<anchor xml:id="__text_manager_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="__text_manager_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00016"/>00016 }
<anchor xml:id="__text_manager_8cpp_source_1l00017"/>00017 
<anchor xml:id="__text_manager_8cpp_source_1l00018"/><link linkend="__text_manager_8cpp_1a7877c01eb21ddf2a0d98bfc1f11de9df">00018</link> std::string&#32;<link linkend="__text_manager_8cpp_1a7877c01eb21ddf2a0d98bfc1f11de9df">getCorrectPath</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
<anchor xml:id="__text_manager_8cpp_source_1l00019"/>00019 {
<anchor xml:id="__text_manager_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::filesystem::path(path).string();
<anchor xml:id="__text_manager_8cpp_source_1l00021"/>00021 }
<anchor xml:id="__text_manager_8cpp_source_1l00022"/>00022 
<anchor xml:id="__text_manager_8cpp_source_1l00023"/><link linkend="__text_manager_8cpp_1a34a7fbcd3165980b6f6a9e00f79af34c">00023</link> std::string&#32;<link linkend="__text_manager_8cpp_1a34a7fbcd3165980b6f6a9e00f79af34c">appendToFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folderName,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fileName)
<anchor xml:id="__text_manager_8cpp_source_1l00024"/>00024 {
<anchor xml:id="__text_manager_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;std::filesystem::path&#32;path(folderName);
<anchor xml:id="__text_manager_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(path&#32;/&#32;fileName).string();
<anchor xml:id="__text_manager_8cpp_source_1l00027"/>00027 }
<anchor xml:id="__text_manager_8cpp_source_1l00028"/>00028 
<anchor xml:id="__text_manager_8cpp_source_1l00029"/>00029 
<anchor xml:id="__text_manager_8cpp_source_1l00030"/><link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">00030</link> std::ofstream&#32;<link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">getOfstreamFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method)
<anchor xml:id="__text_manager_8cpp_source_1l00031"/>00031 {
<anchor xml:id="__text_manager_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(method)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>:
<anchor xml:id="__text_manager_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path);
<anchor xml:id="__text_manager_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76daf38784ef4b08f294d4a78f62181729a0">APPEND</link>:
<anchor xml:id="__text_manager_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path,std::ios_base::app);
<anchor xml:id="__text_manager_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76da5d8c28daa563cffcab51f34a0bec098d">OVERWRITE</link>:
<anchor xml:id="__text_manager_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path,std::ios_base::trunc);
<anchor xml:id="__text_manager_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__text_manager_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path);
<anchor xml:id="__text_manager_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00043"/>00043 }
<anchor xml:id="__text_manager_8cpp_source_1l00044"/>00044 
<anchor xml:id="__text_manager_8cpp_source_1l00045"/><link linkend="__text_manager_8cpp_1ab55140c566370b105b9bf81756293fa5">00045</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1ab55140c566370b105b9bf81756293fa5">writeToFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method)
<anchor xml:id="__text_manager_8cpp_source_1l00046"/>00046 {
<anchor xml:id="__text_manager_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;std::ofstream&#32;file&#32;=&#32;<link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">getOfstreamFile</link>(path,method);
<anchor xml:id="__text_manager_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;file&#32;&lt;&lt;&#32;content;
<anchor xml:id="__text_manager_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;write&#32;to&#32;File&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="__text_manager_8cpp_source_1l00051"/>00051 }
<anchor xml:id="__text_manager_8cpp_source_1l00052"/>00052 
<anchor xml:id="__text_manager_8cpp_source_1l00053"/><link linkend="__text_manager_8cpp_1ae4fe8a84012650993d5d2fac420daec2">00053</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1ae4fe8a84012650993d5d2fac420daec2">clearFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
<anchor xml:id="__text_manager_8cpp_source_1l00054"/>00054 {
<anchor xml:id="__text_manager_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;std::ofstream&#32;file&#32;=&#32;<link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">getOfstreamFile</link>(path);
<anchor xml:id="__text_manager_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;file.clear();
<anchor xml:id="__text_manager_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;write&#32;to&#32;File&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="__text_manager_8cpp_source_1l00059"/>00059 }
<anchor xml:id="__text_manager_8cpp_source_1l00060"/>00060 
<anchor xml:id="__text_manager_8cpp_source_1l00061"/><link linkend="__text_manager_8cpp_1a85a282af68cca7cf7d69487d1bacdc47">00061</link> std::string&#32;<link linkend="__text_manager_8cpp_1a85a282af68cca7cf7d69487d1bacdc47">extractBetween</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)
<anchor xml:id="__text_manager_8cpp_source_1l00062"/>00062 {
<anchor xml:id="__text_manager_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(<link linkend="__text_manager_8cpp_1a6956d58559ef67f422247fdeb1c22775">getStringAfter</link>(text,&#32;begin),&#32;end);
<anchor xml:id="__text_manager_8cpp_source_1l00064"/>00064 }
<anchor xml:id="__text_manager_8cpp_source_1l00065"/>00065 
<anchor xml:id="__text_manager_8cpp_source_1l00066"/><link linkend="__text_manager_8cpp_1ad801a1079aa77d461defa5538ad4f9a9">00066</link> std::size_t&#32;<link linkend="__text_manager_8cpp_1ad801a1079aa77d461defa5538ad4f9a9">getOccurencePosBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.rfind(begin,&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;end));
<anchor xml:id="__text_manager_8cpp_source_1l00068"/>00068 }
<anchor xml:id="__text_manager_8cpp_source_1l00069"/>00069 
<anchor xml:id="__text_manager_8cpp_source_1l00070"/><link linkend="__text_manager_8cpp_1a84a9e24fc5cce3cebf746bb656909bf8">00070</link> std::string&#32;<link linkend="__text_manager_8cpp_1a84a9e24fc5cce3cebf746bb656909bf8">extractBetweenReverse</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a6956d58559ef67f422247fdeb1c22775">getStringAfter</link>(<link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(text,&#32;end),&#32;begin);
<anchor xml:id="__text_manager_8cpp_source_1l00072"/>00072 }
<anchor xml:id="__text_manager_8cpp_source_1l00073"/>00073 
<anchor xml:id="__text_manager_8cpp_source_1l00074"/><link linkend="__text_manager_8cpp_1ae390b108793fa81984968410a695c1af">00074</link> std::string&#32;<link linkend="__text_manager_8cpp_1ae390b108793fa81984968410a695c1af">extractLineContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)
<anchor xml:id="__text_manager_8cpp_source_1l00075"/>00075 {
<anchor xml:id="__text_manager_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a85a282af68cca7cf7d69487d1bacdc47">extractBetween</link>(<link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(fullContent,&#32;lineParameter),&#32;begin,&#32;end);
<anchor xml:id="__text_manager_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__text_manager_8cpp_source_1l00078"/>00078 
<anchor xml:id="__text_manager_8cpp_source_1l00079"/><link linkend="__text_manager_8cpp_1ac695ebe5513185f42689b419f58d8a83">00079</link> std::string&#32;<link linkend="__text_manager_8cpp_1ac695ebe5513185f42689b419f58d8a83">updateContent</link>(std::string&#32;fullContent,&#32;std::string&#32;newContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)
<anchor xml:id="__text_manager_8cpp_source_1l00080"/>00080 {
<anchor xml:id="__text_manager_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(fullContent,&#32;begin)&#32;+&#32;newContent&#32;+&#32;<link linkend="__text_manager_8cpp_1a6956d58559ef67f422247fdeb1c22775">getStringAfter</link>(fullContent,&#32;end);
<anchor xml:id="__text_manager_8cpp_source_1l00082"/>00082 }
<anchor xml:id="__text_manager_8cpp_source_1l00083"/>00083 
<anchor xml:id="__text_manager_8cpp_source_1l00084"/><link linkend="__text_manager_8cpp_1a06bb4181369f742553d8b86fdb3e1c97">00084</link> std::size_t&#32;<link linkend="__text_manager_8cpp_1a06bb4181369f742553d8b86fdb3e1c97">getFirstOccurencePosBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;occ,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;beforeParameter)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.rfind(occ,&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;beforeParameter));
<anchor xml:id="__text_manager_8cpp_source_1l00086"/>00086 }
<anchor xml:id="__text_manager_8cpp_source_1l00087"/>00087 
<anchor xml:id="__text_manager_8cpp_source_1l00088"/>00088 
<anchor xml:id="__text_manager_8cpp_source_1l00089"/>00089 
<anchor xml:id="__text_manager_8cpp_source_1l00090"/>00090 
<anchor xml:id="__text_manager_8cpp_source_1l00091"/><link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">00091</link> std::string&#32;<link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter)
<anchor xml:id="__text_manager_8cpp_source_1l00092"/>00092 {
<anchor xml:id="__text_manager_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a84a9e24fc5cce3cebf746bb656909bf8">extractBetweenReverse</link>(text,<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;lineParameter)&#32;+&#32;lineParameter+<link linkend="__text_manager_8cpp_1a85a282af68cca7cf7d69487d1bacdc47">extractBetween</link>(text,&#32;lineParameter,<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="__text_manager_8cpp_source_1l00094"/>00094 }
<anchor xml:id="__text_manager_8cpp_source_1l00095"/>00095 
<anchor xml:id="__text_manager_8cpp_source_1l00096"/><link linkend="__text_manager_8cpp_1a5f4889fcc6892114ae5ea80e2fec852e">00096</link> std::string&#32;<link linkend="__text_manager_8cpp_1a5f4889fcc6892114ae5ea80e2fec852e">removeContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00097"/>00097 {
<anchor xml:id="__text_manager_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;std::string&#32;first&#32;=&#32;<link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;std::string&#32;second&#32;=&#32;<link linkend="__text_manager_8cpp_1a6956d58559ef67f422247fdeb1c22775">getStringAfter</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;first&#32;+&#32;second;
<anchor xml:id="__text_manager_8cpp_source_1l00101"/>00101 }
<anchor xml:id="__text_manager_8cpp_source_1l00102"/>00102 
<anchor xml:id="__text_manager_8cpp_source_1l00103"/><link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">00103</link> std::string&#32;<link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00104"/>00104 {
<anchor xml:id="__text_manager_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00107"/>00107 }
<anchor xml:id="__text_manager_8cpp_source_1l00108"/>00108 
<anchor xml:id="__text_manager_8cpp_source_1l00109"/><link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">00109</link> std::string&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00110"/>00110 {
<anchor xml:id="__text_manager_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(text,&#32;<link linkend="__text_manager_8cpp_1a5b66873abcff2faee361721f86b65dd0">getPosAfter</link>(text,&#32;content));
<anchor xml:id="__text_manager_8cpp_source_1l00112"/>00112 }
<anchor xml:id="__text_manager_8cpp_source_1l00113"/>00113 
<anchor xml:id="__text_manager_8cpp_source_1l00114"/><link linkend="__text_manager_8cpp_1a6956d58559ef67f422247fdeb1c22775">00114</link> std::string&#32;<link linkend="__text_manager_8cpp_1a6956d58559ef67f422247fdeb1c22775">getStringAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00115"/>00115 {
<anchor xml:id="__text_manager_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a2946b90fb3df56b0a74d53eb4160f4e2">getStringStarting</link>(text,&#32;<link linkend="__text_manager_8cpp_1a5b66873abcff2faee361721f86b65dd0">getPosAfter</link>(text,&#32;content));
<anchor xml:id="__text_manager_8cpp_source_1l00117"/>00117 }
<anchor xml:id="__text_manager_8cpp_source_1l00118"/>00118 
<anchor xml:id="__text_manager_8cpp_source_1l00119"/><link linkend="__text_manager_8cpp_1a5b66873abcff2faee361721f86b65dd0">00119</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8cpp_1a5b66873abcff2faee361721f86b65dd0">getPosAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset)
<anchor xml:id="__text_manager_8cpp_source_1l00120"/>00120 {
<anchor xml:id="__text_manager_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;std::size_t&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos==std::string::npos&#32;?&#32;text.size()&#32;:&#32;pos+content.size()&#32;;
<anchor xml:id="__text_manager_8cpp_source_1l00123"/>00123 }
<anchor xml:id="__text_manager_8cpp_source_1l00124"/><link linkend="__text_manager_8cpp_1aea84354f56ede69a592634bdaeeebca6">00124</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8cpp_1aea84354f56ede69a592634bdaeeebca6">getPosEnd</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset)
<anchor xml:id="__text_manager_8cpp_source_1l00125"/>00125 {
<anchor xml:id="__text_manager_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;std::size_t&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos&#32;==&#32;std::string::npos&#32;?&#32;text.size()&#32;:&#32;pos&#32;+&#32;content.size()-1;
<anchor xml:id="__text_manager_8cpp_source_1l00128"/>00128 }
<anchor xml:id="__text_manager_8cpp_source_1l00129"/>00129 
<anchor xml:id="__text_manager_8cpp_source_1l00130"/>00130 
<anchor xml:id="__text_manager_8cpp_source_1l00131"/>00131 
<anchor xml:id="__text_manager_8cpp_source_1l00132"/><link linkend="__text_manager_8cpp_1a2946b90fb3df56b0a74d53eb4160f4e2">00132</link> std::string&#32;<link linkend="__text_manager_8cpp_1a2946b90fb3df56b0a74d53eb4160f4e2">getStringStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00133"/>00133 {
<anchor xml:id="__text_manager_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a2946b90fb3df56b0a74d53eb4160f4e2">getStringStarting</link>(text,&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;content));
<anchor xml:id="__text_manager_8cpp_source_1l00135"/>00135 }
<anchor xml:id="__text_manager_8cpp_source_1l00136"/>00136 
<anchor xml:id="__text_manager_8cpp_source_1l00137"/>00137 <emphasis role="comment">//only&#32;compares&#32;the&#32;starting&#32;point&#32;of&#32;the&#32;two&#32;strings&#32;not&#32;the&#32;whole&#32;string</emphasis>
<anchor xml:id="__text_manager_8cpp_source_1l00138"/><link linkend="__text_manager_8cpp_1a72a90b0bbf9fa83e1542341baef2d051">00138</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a72a90b0bbf9fa83e1542341baef2d051">isBeforeStrict</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;after)
<anchor xml:id="__text_manager_8cpp_source_1l00139"/>00139 {
<anchor xml:id="__text_manager_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos1&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;before);
<anchor xml:id="__text_manager_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos2&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;after);
<anchor xml:id="__text_manager_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos1&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;pos1&#32;&lt;&#32;pos2;
<anchor xml:id="__text_manager_8cpp_source_1l00143"/>00143 }
<anchor xml:id="__text_manager_8cpp_source_1l00144"/>00144 
<anchor xml:id="__text_manager_8cpp_source_1l00145"/>00145 <emphasis role="comment">//only&#32;compares&#32;the&#32;starting&#32;point&#32;of&#32;the&#32;two&#32;strings&#32;not&#32;the&#32;whole&#32;string</emphasis>
<anchor xml:id="__text_manager_8cpp_source_1l00146"/><link linkend="__text_manager_8cpp_1a91f22ed7b57fcd5b0c51ef13f0c13873">00146</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a91f22ed7b57fcd5b0c51ef13f0c13873">isBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;after)
<anchor xml:id="__text_manager_8cpp_source_1l00147"/>00147 {
<anchor xml:id="__text_manager_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos1&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;before);
<anchor xml:id="__text_manager_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos2&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(text,&#32;after);
<anchor xml:id="__text_manager_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos1&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;pos1&#32;&lt;=&#32;pos2;
<anchor xml:id="__text_manager_8cpp_source_1l00151"/>00151 }
<anchor xml:id="__text_manager_8cpp_source_1l00152"/>00152 
<anchor xml:id="__text_manager_8cpp_source_1l00153"/>00153 
<anchor xml:id="__text_manager_8cpp_source_1l00154"/>00154 
<anchor xml:id="__text_manager_8cpp_source_1l00155"/><link linkend="__text_manager_8cpp_1a5adfb1e14ce20866bfe01ed05b344a87">00155</link> std::string&#32;<link linkend="__text_manager_8cpp_1a5adfb1e14ce20866bfe01ed05b344a87">getStringInsideBorders</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;open,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;close)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbOpen&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbClose&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;std::string&#32;copy(text);
<anchor xml:id="__text_manager_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;std::string&#32;save;
<anchor xml:id="__text_manager_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lastClosePos&#32;=&#32;std::string::npos;
<anchor xml:id="__text_manager_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;firstOpenPos&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(copy,&#32;open);
<anchor xml:id="__text_manager_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(firstOpenPos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastClosePos&#32;=&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(copy,&#32;close);
<anchor xml:id="__text_manager_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastClosePos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nbOpen&#32;==&#32;0&#32;&amp;&amp;&#32;firstOpenPos&#32;&gt;&#32;lastClosePos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstOpenPos&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastClosePos&#32;=&#32;text.size();
<anchor xml:id="__text_manager_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbClose++;
<anchor xml:id="__text_manager_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;save&#32;=&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(copy,&#32;close);
<anchor xml:id="__text_manager_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbOpen&#32;+=&#32;<link linkend="__text_manager_8cpp_1a8f90c1ec899f25ae8d1087459a6bc108">countMatches</link>(save,&#32;open);
<anchor xml:id="__text_manager_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__text_manager_8cpp_1a053e0b36b2796cc4d128150353f13449">skipSequence</link>(copy,&#32;save);
<anchor xml:id="__text_manager_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nbClose&#32;==&#32;nbOpen)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstOpenPos&#32;+=&#32;open.length();
<anchor xml:id="__text_manager_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastClosePos&#32;=&#32;<link linkend="__text_manager_8cpp_1a07d720ed3b57aaff2c6b76019524b927">getSequencePosR</link>(text,&#32;copy)-&#32;close.length();
<anchor xml:id="__text_manager_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a2946b90fb3df56b0a74d53eb4160f4e2">getStringStarting</link>(<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(text,&#32;lastClosePos),firstOpenPos);
<anchor xml:id="__text_manager_8cpp_source_1l00185"/>00185 }
<anchor xml:id="__text_manager_8cpp_source_1l00186"/>00186 
<anchor xml:id="__text_manager_8cpp_source_1l00187"/><link linkend="__text_manager_8cpp_1aa98ebbb97e30e73c3fec5e26ec1305d8">00187</link> std::string&#32;<link linkend="__text_manager_8cpp_1aa98ebbb97e30e73c3fec5e26ec1305d8">getStringBeforeLastMatch</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;match)
<anchor xml:id="__text_manager_8cpp_source_1l00188"/>00188 {
<anchor xml:id="__text_manager_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(text,&#32;<link linkend="__text_manager_8cpp_1a07d720ed3b57aaff2c6b76019524b927">getSequencePosR</link>(text,&#32;match));
<anchor xml:id="__text_manager_8cpp_source_1l00190"/>00190 }
<anchor xml:id="__text_manager_8cpp_source_1l00191"/>00191 
<anchor xml:id="__text_manager_8cpp_source_1l00192"/><link linkend="__text_manager_8cpp_1a8e4fb03d21e39e65bf90e109939b0105">00192</link> std::string&#32;<link linkend="__text_manager_8cpp_1a8e4fb03d21e39e65bf90e109939b0105">reverseString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(text.rbegin(),&#32;text.rend());
<anchor xml:id="__text_manager_8cpp_source_1l00194"/>00194 }
<anchor xml:id="__text_manager_8cpp_source_1l00195"/>00195 
<anchor xml:id="__text_manager_8cpp_source_1l00196"/><link linkend="__text_manager_8cpp_1a8f90c1ec899f25ae8d1087459a6bc108">00196</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8cpp_1a8f90c1ec899f25ae8d1087459a6bc108">countMatches</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;match)
<anchor xml:id="__text_manager_8cpp_source_1l00197"/>00197 {
<anchor xml:id="__text_manager_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;std::string&#32;temp&#32;=&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!temp.empty())&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__text_manager_8cpp_1a079e0c70f384def9d00b70f9ee62ee4a">containsSequence</link>(temp,&#32;match))count++;
<anchor xml:id="__text_manager_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__text_manager_8cpp_1a053e0b36b2796cc4d128150353f13449">skipSequence</link>(temp,&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(temp,&#32;match));
<anchor xml:id="__text_manager_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
<anchor xml:id="__text_manager_8cpp_source_1l00205"/>00205 }
<anchor xml:id="__text_manager_8cpp_source_1l00206"/>00206 
<anchor xml:id="__text_manager_8cpp_source_1l00207"/><link linkend="__text_manager_8cpp_1a87f06bcc7caeab328ba32f4aec7883e2">00207</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8cpp_1a87f06bcc7caeab328ba32f4aec7883e2">countMatchesBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;match,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)
<anchor xml:id="__text_manager_8cpp_source_1l00208"/>00208 {
<anchor xml:id="__text_manager_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a8f90c1ec899f25ae8d1087459a6bc108">countMatches</link>(<link linkend="__text_manager_8cpp_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(text,&#32;end),match);
<anchor xml:id="__text_manager_8cpp_source_1l00210"/>00210 }
<anchor xml:id="__text_manager_8cpp_source_1l00211"/>00211 
<anchor xml:id="__text_manager_8cpp_source_1l00212"/>00212 
<anchor xml:id="__text_manager_8cpp_source_1l00213"/>00213 
<anchor xml:id="__text_manager_8cpp_source_1l00214"/><link linkend="__text_manager_8cpp_1aa6913b7fe272fe20684f1c5c701d54d7">00214</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1aa6913b7fe272fe20684f1c5c701d54d7">skipSpace</link>(std::string&amp;&#32;text)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<link linkend="__text_manager_8cpp_1ae58f22c7238c63a9ffd8ac0f9fb36216">skipAnySequence</link>(text,&#32;<emphasis role="stringliteral">&quot;\b\t\n\r&#32;&quot;</emphasis>);
<anchor xml:id="__text_manager_8cpp_source_1l00216"/>00216 }
<anchor xml:id="__text_manager_8cpp_source_1l00217"/>00217 
<anchor xml:id="__text_manager_8cpp_source_1l00218"/><link linkend="__text_manager_8cpp_1a46d952a72f09b33c8620f9978b962cee">00218</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a46d952a72f09b33c8620f9978b962cee">beginsBySpace</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1aa18ab3a474aba30784c5521be8a7da65">beginsBySequence</link>(text,<emphasis role="stringliteral">&quot;\b\t\n\r&#32;&quot;</emphasis>);
<anchor xml:id="__text_manager_8cpp_source_1l00220"/>00220 }
<anchor xml:id="__text_manager_8cpp_source_1l00221"/>00221 
<anchor xml:id="__text_manager_8cpp_source_1l00222"/><link linkend="__text_manager_8cpp_1aa18ab3a474aba30784c5521be8a7da65">00222</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1aa18ab3a474aba30784c5521be8a7da65">beginsBySequence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sequence)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.find_first_of(sequence)==0;
<anchor xml:id="__text_manager_8cpp_source_1l00224"/>00224 }
<anchor xml:id="__text_manager_8cpp_source_1l00225"/>00225 
<anchor xml:id="__text_manager_8cpp_source_1l00226"/><link linkend="__text_manager_8cpp_1ae58f22c7238c63a9ffd8ac0f9fb36216">00226</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1ae58f22c7238c63a9ffd8ac0f9fb36216">skipAnySequence</link>(std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sequence)
<anchor xml:id="__text_manager_8cpp_source_1l00227"/>00227 {
<anchor xml:id="__text_manager_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;text.find_first_not_of(sequence);
<anchor xml:id="__text_manager_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;text.erase(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00230"/>00230 }
<anchor xml:id="__text_manager_8cpp_source_1l00231"/>00231 
<anchor xml:id="__text_manager_8cpp_source_1l00232"/><link linkend="__text_manager_8cpp_1a053e0b36b2796cc4d128150353f13449">00232</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1a053e0b36b2796cc4d128150353f13449">skipSequence</link>(std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sequence)
<anchor xml:id="__text_manager_8cpp_source_1l00233"/>00233 {
<anchor xml:id="__text_manager_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;text.find_first_of(sequence);
<anchor xml:id="__text_manager_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos==0)&#32;text.erase(0,&#32;<link linkend="__text_manager_8cpp_1a5b66873abcff2faee361721f86b65dd0">getPosAfter</link>(text,sequence));
<anchor xml:id="__text_manager_8cpp_source_1l00236"/>00236 }
<anchor xml:id="__text_manager_8cpp_source_1l00237"/>00237 
<anchor xml:id="__text_manager_8cpp_source_1l00238"/><link linkend="__text_manager_8cpp_1a1e51a0b4d80fa91c2b174d65be392cb6">00238</link> std::string&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos)
<anchor xml:id="__text_manager_8cpp_source_1l00239"/>00239 {
<anchor xml:id="__text_manager_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;text.length();
<anchor xml:id="__text_manager_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;=&#32;pos)size&#32;=&#32;pos;
<anchor xml:id="__text_manager_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;size);
<anchor xml:id="__text_manager_8cpp_source_1l00243"/>00243 }
<anchor xml:id="__text_manager_8cpp_source_1l00244"/>00244 
<anchor xml:id="__text_manager_8cpp_source_1l00245"/><link linkend="__text_manager_8cpp_1a68949f143705185b5de387b1250a8599">00245</link> std::string&#32;<link linkend="__text_manager_8cpp_1a2946b90fb3df56b0a74d53eb4160f4e2">getStringStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos)
<anchor xml:id="__text_manager_8cpp_source_1l00246"/>00246 {
<anchor xml:id="__text_manager_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>&#32;=&#32;pos;
<anchor xml:id="__text_manager_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&gt;text.length())<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>);
<anchor xml:id="__text_manager_8cpp_source_1l00250"/>00250 }
<anchor xml:id="__text_manager_8cpp_source_1l00251"/>00251 
<anchor xml:id="__text_manager_8cpp_source_1l00252"/><link linkend="__text_manager_8cpp_1adc3f57b5732570ab943a917fda563ae0">00252</link> std::string&#32;<link linkend="__text_manager_8cpp_1adc3f57b5732570ab943a917fda563ae0">tolower</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;s)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;std::string&#32;newString;
<anchor xml:id="__text_manager_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;c&#32;:&#32;s)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newString.push_back(<link linkend="__text_manager_8cpp_1adc3f57b5732570ab943a917fda563ae0">tolower</link>(c));
<anchor xml:id="__text_manager_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newString;
<anchor xml:id="__text_manager_8cpp_source_1l00258"/>00258 }
<anchor xml:id="__text_manager_8cpp_source_1l00259"/>00259 
<anchor xml:id="__text_manager_8cpp_source_1l00260"/><link linkend="__text_manager_8cpp_1a298789aa768d11d50d04a2f246a19a74">00260</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a298789aa768d11d50d04a2f246a19a74">to_bool</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;s)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s&#32;==&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;||&#32;<link linkend="__text_manager_8cpp_1adc3f57b5732570ab943a917fda563ae0">tolower</link>(s)==<emphasis role="stringliteral">&quot;true&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00262"/>00262 }
<anchor xml:id="__text_manager_8cpp_source_1l00263"/>00263 
<anchor xml:id="__text_manager_8cpp_source_1l00264"/><link linkend="__text_manager_8cpp_1a079e0c70f384def9d00b70f9ee62ee4a">00264</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a079e0c70f384def9d00b70f9ee62ee4a">containsSequence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;seq,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset)
<anchor xml:id="__text_manager_8cpp_source_1l00265"/>00265 {
<anchor xml:id="__text_manager_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.find(seq,&#32;offset)!=std::string::npos;
<anchor xml:id="__text_manager_8cpp_source_1l00267"/>00267 }
<anchor xml:id="__text_manager_8cpp_source_1l00268"/>00268 
<anchor xml:id="__text_manager_8cpp_source_1l00269"/><link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">00269</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8cpp_1a3f4afb2b62acd297e783a22ffa9a7000">getSequencePos</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;seq,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset)
<anchor xml:id="__text_manager_8cpp_source_1l00270"/>00270 {
<anchor xml:id="__text_manager_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.find(seq,&#32;offset);
<anchor xml:id="__text_manager_8cpp_source_1l00272"/>00272 }
<anchor xml:id="__text_manager_8cpp_source_1l00273"/>00273 
<anchor xml:id="__text_manager_8cpp_source_1l00274"/><link linkend="__text_manager_8cpp_1a07d720ed3b57aaff2c6b76019524b927">00274</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8cpp_1a07d720ed3b57aaff2c6b76019524b927">getSequencePosR</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;seq,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset)
<anchor xml:id="__text_manager_8cpp_source_1l00275"/>00275 {
<anchor xml:id="__text_manager_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;text.rfind(seq,&#32;offset);
<anchor xml:id="__text_manager_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos==std::string::npos&#32;?&#32;std::string::npos&#32;:&#32;pos;
<anchor xml:id="__text_manager_8cpp_source_1l00278"/>00278 }
<anchor xml:id="__text_manager_8cpp_source_1l00279"/>00279 
<anchor xml:id="__text_manager_8cpp_source_1l00280"/><link linkend="__text_manager_8cpp_1a6d41db9b9e6416e155fc5bdeeacef16c">00280</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1a6d41db9b9e6416e155fc5bdeeacef16c">printFileContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
<anchor xml:id="__text_manager_8cpp_source_1l00281"/>00281 {
<anchor xml:id="__text_manager_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(path);
<anchor xml:id="__text_manager_8cpp_source_1l00283"/>00283 }
<anchor xml:id="__text_manager_8cpp_source_1l00284"/>00284 
<anchor xml:id="__text_manager_8cpp_source_1l00285"/><link linkend="__text_manager_8cpp_1ab7ccde875039001c7db16bf6eae6936b">00285</link> std::string&#32;<link linkend="__text_manager_8cpp_1ab7ccde875039001c7db16bf6eae6936b">eraseLastMatch</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00286"/>00286 {
<anchor xml:id="__text_manager_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a4d2b9819e5e2504ea8d55a553812146a">getStringUntil</link>(text,&#32;<link linkend="__text_manager_8cpp_1a07d720ed3b57aaff2c6b76019524b927">getSequencePosR</link>(text,&#32;content));
<anchor xml:id="__text_manager_8cpp_source_1l00288"/>00288 }
<anchor xml:id="__text_manager_8cpp_source_1l00289"/>00289 
<anchor xml:id="__text_manager_8cpp_source_1l00290"/><link linkend="__text_manager_8cpp_1a42b898aede0151587625671fa5ba1ef3">00290</link> std::vector&lt;std::string&gt;&#32;<link linkend="__text_manager_8cpp_1a42b898aede0151587625671fa5ba1ef3">getAllLines</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter)
<anchor xml:id="__text_manager_8cpp_source_1l00291"/>00291 {
<anchor xml:id="__text_manager_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;allLinesTab;
<anchor xml:id="__text_manager_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;std::string&#32;newtext&#32;=&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!newtext.empty())&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line&#32;=&#32;<link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(newtext,&#32;lineParameter);
<anchor xml:id="__text_manager_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allLinesTab.push_back(line);
<anchor xml:id="__text_manager_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__text_manager_8cpp_1a053e0b36b2796cc4d128150353f13449">skipSequence</link>(newtext,&#32;line);
<anchor xml:id="__text_manager_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allLinesTab;
<anchor xml:id="__text_manager_8cpp_source_1l00300"/>00300 }
<anchor xml:id="__text_manager_8cpp_source_1l00301"/>00301 
<anchor xml:id="__text_manager_8cpp_source_1l00302"/><link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">00302</link> std::string&#32;<link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)
<anchor xml:id="__text_manager_8cpp_source_1l00303"/>00303 {
<anchor xml:id="__text_manager_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="__text_manager_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;l&#32;:&#32;text)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l&#32;!=&#32;c)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;l;
<anchor xml:id="__text_manager_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__text_manager_8cpp_source_1l00311"/>00311 }
<anchor xml:id="__text_manager_8cpp_source_1l00312"/><link linkend="__text_manager_8cpp_1a55e73c9c3cfe26561256a7936deb02db">00312</link> std::string&#32;<link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;char&gt;&amp;&#32;cList)
<anchor xml:id="__text_manager_8cpp_source_1l00313"/>00313 {
<anchor xml:id="__text_manager_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;std::string&#32;temp&#32;=&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;c&#32;:&#32;cList)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;<link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(temp,&#32;c);
<anchor xml:id="__text_manager_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;temp;
<anchor xml:id="__text_manager_8cpp_source_1l00319"/>00319 }
</programlisting></section>
