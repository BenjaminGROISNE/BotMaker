<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__interpretor_8cpp_source" xml:lang="en-US">
<title>Interpretor.cpp</title>
<indexterm><primary>src/Interpretor.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__interpretor_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__interpretor_8h">Interpretor.h</link>&quot;</emphasis>
<anchor xml:id="__interpretor_8cpp_source_1l00002"/>00002 
<anchor xml:id="__interpretor_8cpp_source_1l00003"/><link linkend="_class_interpretor_1a213dd04d8ca9dbb188f29e2284fcbc5a">00003</link> <link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&#32;<link linkend="_class_interpretor_1a213dd04d8ca9dbb188f29e2284fcbc5a">Interpretor::getTokens</link>(std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00004"/>00004 {
<anchor xml:id="__interpretor_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<link linkend="_class_lexer">Lexer</link>&#32;lex;
<anchor xml:id="__interpretor_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lex.<link linkend="_class_lexer_1acf897fb607a542d5c7c8cd4b0dcb1d18">extractTokens</link>(text);
<anchor xml:id="__interpretor_8cpp_source_1l00007"/>00007 }
<anchor xml:id="__interpretor_8cpp_source_1l00008"/>00008 
<anchor xml:id="__interpretor_8cpp_source_1l00009"/><link linkend="_class_interpretor_1a832cf788bcaca68a99ca43db0bd448d7">00009</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_interpretor_1a832cf788bcaca68a99ca43db0bd448d7">Interpretor::executeTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)
<anchor xml:id="__interpretor_8cpp_source_1l00010"/>00010 {
<anchor xml:id="__interpretor_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;std::shared_ptr&lt;Token&gt;&#32;mainToken;
<anchor xml:id="__interpretor_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;std::shared_ptr&lt;Tag&gt;&#32;mainTag;
<anchor xml:id="__interpretor_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<link linkend="_class_token_result">TokenResult</link>&#32;tr;
<anchor xml:id="__interpretor_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1ad207131e5d995b00c00118fa4ac6a21d">empty</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mainToken&#32;=&#32;tl.<link linkend="_class_iterator_list_1abf379455656b776b4e100dba9d4d7ccc">getFirst</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tl.<link linkend="_class_iterator_list_1a47139a087ca9af560c2001e08c4d3f83">size</link>()&#32;&gt;&#32;1)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mainToken)mainToken-&gt;addTokens(tl,&#32;tr);
<anchor xml:id="__interpretor_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mainToken;
<anchor xml:id="__interpretor_8cpp_source_1l00021"/>00021 }
<anchor xml:id="__interpretor_8cpp_source_1l00022"/>00022 
<anchor xml:id="__interpretor_8cpp_source_1l00023"/><link linkend="_class_interpretor_1ace593d79758b37f81ca8cf9d0d8ed386">00023</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_interpretor_1ace593d79758b37f81ca8cf9d0d8ed386">Interpretor::executeTags</link>(std::shared_ptr&lt;Token&gt;&#32;mainToken)
<anchor xml:id="__interpretor_8cpp_source_1l00024"/>00024 {
<anchor xml:id="__interpretor_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mainToken)<emphasis role="keywordflow">return</emphasis>&#32;mainToken-&gt;execute();
<anchor xml:id="__interpretor_8cpp_source_1l00026"/>00026 }
<anchor xml:id="__interpretor_8cpp_source_1l00027"/>00027 
<anchor xml:id="__interpretor_8cpp_source_1l00028"/><link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">00028</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">Interpretor::compileTokens</link>(std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00029"/>00029 {
<anchor xml:id="__interpretor_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;listTokens&#32;=&#32;<link linkend="_class_interpretor_1a213dd04d8ca9dbb188f29e2284fcbc5a">getTokens</link>(text);
<anchor xml:id="__interpretor_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_interpretor_1a832cf788bcaca68a99ca43db0bd448d7">executeTokens</link>(listTokens);
<anchor xml:id="__interpretor_8cpp_source_1l00032"/>00032 }
<anchor xml:id="__interpretor_8cpp_source_1l00033"/>00033 
<anchor xml:id="__interpretor_8cpp_source_1l00034"/><link linkend="_class_interpretor_1ad464f7beab8778df1253377d8084325c">00034</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_interpretor_1ad464f7beab8778df1253377d8084325c">Interpretor::compileTags</link>(std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00035"/>00035 {
<anchor xml:id="__interpretor_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;listTokens&#32;=&#32;<link linkend="_class_interpretor_1a213dd04d8ca9dbb188f29e2284fcbc5a">getTokens</link>(text);
<anchor xml:id="__interpretor_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;compiledTokens=&#32;<link linkend="_class_interpretor_1a832cf788bcaca68a99ca43db0bd448d7">executeTokens</link>(listTokens);
<anchor xml:id="__interpretor_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_interpretor_1ace593d79758b37f81ca8cf9d0d8ed386">executeTags</link>(compiledTokens);
<anchor xml:id="__interpretor_8cpp_source_1l00039"/>00039 }
<anchor xml:id="__interpretor_8cpp_source_1l00040"/>00040 
<anchor xml:id="__interpretor_8cpp_source_1l00041"/>00041 
<anchor xml:id="__interpretor_8cpp_source_1l00042"/>00042 
<anchor xml:id="__interpretor_8cpp_source_1l00043"/>00043 
<anchor xml:id="__interpretor_8cpp_source_1l00044"/>00044 
<anchor xml:id="__interpretor_8cpp_source_1l00045"/>00045 
<anchor xml:id="__interpretor_8cpp_source_1l00046"/><link linkend="_class_interpretor_1ae1c703a0f32d7f063dd5f46f89018255">00046</link> <link linkend="_class_interpretor_1ae1c703a0f32d7f063dd5f46f89018255">Interpretor::Interpretor</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00047"/>00047 {
<anchor xml:id="__interpretor_8cpp_source_1l00048"/>00048 }
<anchor xml:id="__interpretor_8cpp_source_1l00049"/>00049 
<anchor xml:id="__interpretor_8cpp_source_1l00050"/><link linkend="_class_interpretor_1a9a3e5a7eee398fc9fb9d7dbd46844f74">00050</link> <link linkend="_class_interpretor_1ae1c703a0f32d7f063dd5f46f89018255">Interpretor::Interpretor</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folder)
<anchor xml:id="__interpretor_8cpp_source_1l00051"/>00051 {
<anchor xml:id="__interpretor_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<link linkend="_class_interpretor_1ab16ef500fc920b646d7a1879e61e0615">ActivityFolder</link>&#32;=&#32;folder;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00053"/>00053 }
<anchor xml:id="__interpretor_8cpp_source_1l00054"/>00054 
<anchor xml:id="__interpretor_8cpp_source_1l00055"/><link linkend="_class_interpretor_1a9592d800744d237aea6a91dbf44bdb80">00055</link> <link linkend="_class_interpretor_1a9592d800744d237aea6a91dbf44bdb80">Interpretor::~Interpretor</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00056"/>00056 {&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00057"/>00057 }
<anchor xml:id="__interpretor_8cpp_source_1l00058"/>00058 
<anchor xml:id="__interpretor_8cpp_source_1l00059"/><link linkend="_class_interpretor_1a885b425a60dd2467089fc680f4528f03">00059</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_interpretor_1a885b425a60dd2467089fc680f4528f03">Interpretor::doUnitTests</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00060"/>00060 {
<anchor xml:id="__interpretor_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;std::string&#32;intToken1&#32;=&#32;<emphasis role="stringliteral">&quot;int(3)&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rInt1=<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(intToken1);
<anchor xml:id="__interpretor_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;rInt1-&gt;showTokenTree(0);&#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;std::string&#32;intToken2=&#32;<emphasis role="stringliteral">&quot;int()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rInt2=<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(intToken2);
<anchor xml:id="__interpretor_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;rInt2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;std::string&#32;stringToken1&#32;=&#32;<emphasis role="stringliteral">&quot;string(string(\&quot;huhu\&quot;))&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rString1&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(stringToken1);
<anchor xml:id="__interpretor_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;rString1-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;std::string&#32;stringToken2&#32;=&#32;<emphasis role="stringliteral">&quot;string()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rString2&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(stringToken2);
<anchor xml:id="__interpretor_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;rString2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00077"/>00077 
<anchor xml:id="__interpretor_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;std::string&#32;ct1&#32;=&#32;<emphasis role="stringliteral">&quot;coord()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rc1&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(ct1);
<anchor xml:id="__interpretor_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;rc1-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;std::string&#32;ct2&#32;=&#32;<emphasis role="stringliteral">&quot;coord(int(5),6)&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rc2&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(ct2);
<anchor xml:id="__interpretor_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;rc2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00086"/>00086 
<anchor xml:id="__interpretor_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;std::string&#32;zt1&#32;=&#32;<emphasis role="stringliteral">&quot;zone()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;zc1&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(zt1);
<anchor xml:id="__interpretor_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;zc1-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00091"/>00091 
<anchor xml:id="__interpretor_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;std::string&#32;zt2&#32;=&#32;<emphasis role="stringliteral">&quot;zone(zone(coord(3,int(5)),coord()))&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;zc2&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(zt2);
<anchor xml:id="__interpretor_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;zc2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00096"/>00096 
<anchor xml:id="__interpretor_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;std::string&#32;bt1&#32;=&#32;<emphasis role="stringliteral">&quot;bool()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;bc1&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(bt1);
<anchor xml:id="__interpretor_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;bc1-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00101"/>00101 
<anchor xml:id="__interpretor_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;std::string&#32;bt2&#32;=&#32;<emphasis role="stringliteral">&quot;bool(bool(true))&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;bc2&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(bt2);
<anchor xml:id="__interpretor_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;bc2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00106"/>00106 
<anchor xml:id="__interpretor_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;std::string&#32;andt1&#32;=&#32;<emphasis role="stringliteral">&quot;and()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;andc1&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(andt1);
<anchor xml:id="__interpretor_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;andc1-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00111"/>00111 
<anchor xml:id="__interpretor_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;std::string&#32;andt2&#32;=&#32;<emphasis role="stringliteral">&quot;and(and(),and(true,and(false,true)))&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;andc2&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(andt2);
<anchor xml:id="__interpretor_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;andc2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00116"/>00116 
<anchor xml:id="__interpretor_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;std::string&#32;ort1&#32;=&#32;<emphasis role="stringliteral">&quot;or()&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;orc1&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(ort1);
<anchor xml:id="__interpretor_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;orc1-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00121"/>00121 
<anchor xml:id="__interpretor_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;std::string&#32;ort2&#32;=&#32;<emphasis role="stringliteral">&quot;or(or(),or(true,or(false,true)))&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;orc2&#32;=&#32;<link linkend="_class_interpretor_1a73bdd0d1c2896aa2039bdccde17c0fa1">compileTokens</link>(ort2);
<anchor xml:id="__interpretor_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;orc2-&gt;showTokenTree(0);
<anchor xml:id="__interpretor_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00126"/>00126 
<anchor xml:id="__interpretor_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stop&#32;=&#32;0;
<anchor xml:id="__interpretor_8cpp_source_1l00128"/>00128 }
<anchor xml:id="__interpretor_8cpp_source_1l00129"/>00129 
<anchor xml:id="__interpretor_8cpp_source_1l00130"/><link linkend="_class_interpretor_1a6e04dd33cb518270ae83197706689a2e">00130</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_interpretor_1a6e04dd33cb518270ae83197706689a2e">Interpretor::readActivityFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;ActivityName)
<anchor xml:id="__interpretor_8cpp_source_1l00131"/>00131 {
<anchor xml:id="__interpretor_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;path&#32;=&#32;<link linkend="__text_manager_8cpp_1a34a7fbcd3165980b6f6a9e00f79af34c">appendToFolder</link>(<link linkend="_class_interpretor_1ab16ef500fc920b646d7a1879e61e0615">ActivityFolder</link>,&#32;ActivityName);
<anchor xml:id="__interpretor_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;text&#32;=&#32;<link linkend="_class_interpretor_1a9dc6ba1dacc8671e9b9fdf0f30911c6e">copyActivity</link>(path);
<anchor xml:id="__interpretor_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_interpretor_1ad464f7beab8778df1253377d8084325c">compileTags</link>(text);
<anchor xml:id="__interpretor_8cpp_source_1l00135"/>00135 }
<anchor xml:id="__interpretor_8cpp_source_1l00136"/>00136 
<anchor xml:id="__interpretor_8cpp_source_1l00137"/><link linkend="_class_interpretor_1a9dc6ba1dacc8671e9b9fdf0f30911c6e">00137</link> std::string&#32;<link linkend="_class_interpretor_1a9dc6ba1dacc8671e9b9fdf0f30911c6e">Interpretor::copyActivity</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;ActivityPath)
<anchor xml:id="__interpretor_8cpp_source_1l00138"/>00138 {
<anchor xml:id="__interpretor_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(ActivityPath);
<anchor xml:id="__interpretor_8cpp_source_1l00140"/>00140 }
<anchor xml:id="__interpretor_8cpp_source_1l00141"/>00141 
<anchor xml:id="__interpretor_8cpp_source_1l00142"/>00142 
<anchor xml:id="__interpretor_8cpp_source_1l00143"/>00143 
<anchor xml:id="__interpretor_8cpp_source_1l00144"/>00144 
</programlisting></section>
