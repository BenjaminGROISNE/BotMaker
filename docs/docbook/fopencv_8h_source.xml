<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_fopencv_8h_source" xml:lang="en-US">
<title>fopencv.h</title>
<indexterm><primary>src/fopencv.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_fopencv_8h_source_1l00001"/>00001 
<anchor xml:id="_fopencv_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#ifndef&#32;FOPENCV_H</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00003"/>00003 <emphasis role="preprocessor">#define&#32;FOPENCV_H</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;opencv2/core.hpp&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;opencv2/imgproc.hpp&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;opencv2/photo.hpp&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;opencv2/highgui.hpp&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;opencv2/opencv.hpp&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&lt;time.h&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_sys_commands_8h">sysCommands.h</link>&quot;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__units_8h">Units.h</link>&quot;</emphasis>
<anchor xml:id="_fopencv_8h_source_1l00018"/>00018 
<anchor xml:id="_fopencv_8h_source_1l00019"/>00019 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;matchTemplatePrecision=0.8;
<anchor xml:id="_fopencv_8h_source_1l00020"/>00020 
<anchor xml:id="_fopencv_8h_source_1l00021"/>00021 cv::Mat&#32;<link linkend="_fopencv_8h_1a0181b31cadb4c79a4b9e0154426549fd">CreateMat</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61">typeMat</link>&#32;color);
<anchor xml:id="_fopencv_8h_source_1l00022"/>00022 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ2);
<anchor xml:id="_fopencv_8h_source_1l00023"/>00023 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_zone">Zone</link>&amp;&#32;rect1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_zone">Zone</link>&amp;&#32;rect2);
<anchor xml:id="_fopencv_8h_source_1l00024"/>00024 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a20a7a3d735be5b59a78d1fd505f198dd">messageFound</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found);
<anchor xml:id="_fopencv_8h_source_1l00025"/>00025 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a20a7a3d735be5b59a78d1fd505f198dd">messageFound</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found);
<anchor xml:id="_fopencv_8h_source_1l00026"/>00026 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1aec980fb4849dfd312ae3d40c35c5cad6">cvmtfTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;tempimg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;backgroundimage,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00027"/>00027 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1afb1f712add6873e9f6c1446f75c2e260">cvmtfMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;tempimg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00028"/>00028 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1afb1f712add6873e9f6c1446f75c2e260">cvmtfMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00029"/>00029 
<anchor xml:id="_fopencv_8h_source_1l00030"/>00030 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1ab81fea58f2d602b98fc733aa518f2c59">cvmtfOneTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00031"/>00031 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a6708389c5e45be6e92ea760cef3ec9ea">cvmtfCompareOneTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;similartemplates,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00032"/>00032 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a70466e523d4d4082d2fa9906974775d7">cvmtfOneMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::vector&lt;Template&gt;&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00033"/>00033 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a821d691b8432ab883e71fed407fb8025">cvmtfAllTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00034"/>00034 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a9e1355e7efa02ab22d9e1ded39b0c122">cvmtfCompareTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;similartemplate,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00035"/>00035 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a944308241e979ded74a0e1a9c262157a">cvmtfCompareMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;similartemplates,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00036"/>00036 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1acc292d8056e0864414412fe49006d3af">cvmtfMultipleTemplateCompareMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;similartemplates,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00037"/>00037 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1acc292d8056e0864414412fe49006d3af">cvmtfMultipleTemplateCompareMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;similartemplates,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z&#32;=&#32;<link linkend="_struct_zone">Zone</link>());
<anchor xml:id="_fopencv_8h_source_1l00038"/>00038 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1a7521a083566181475d36ee14aad60f1d">multipleMatchTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templateImg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult);
<anchor xml:id="_fopencv_8h_source_1l00039"/>00039 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8h_1ae51fd1f3ed39bd8c9b8da4a313d5aeb3">oneMatchTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templateImg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult);
<anchor xml:id="_fopencv_8h_source_1l00040"/>00040 <link linkend="_struct_template">Template</link>&#32;<link linkend="_fopencv_8h_1aed6092f864c145fab7cba35414cdd47b">extractZone</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;image,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z);
<anchor xml:id="_fopencv_8h_source_1l00041"/>00041 
<anchor xml:id="_fopencv_8h_source_1l00042"/>00042 
<anchor xml:id="_fopencv_8h_source_1l00043"/>00043 cv::Vec3b&#32;<link linkend="_fopencv_8h_1a0fbdf9bdacefdd4664983d08813d73d3">getPixel</link>(cv::Mat&#32;img,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y);
<anchor xml:id="_fopencv_8h_source_1l00044"/>00044 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a7c904b3404eaf5f63b27530c5460b87c">showImg</link>(std::string&#32;path);
<anchor xml:id="_fopencv_8h_source_1l00045"/>00045 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a26eb586061a340e892509bc69dd61dfa">showMat</link>(<emphasis role="keyword">const</emphasis>&#32;cv::Mat&amp;&#32;img);
<anchor xml:id="_fopencv_8h_source_1l00046"/>00046 cv::Mat&#32;<link linkend="_fopencv_8h_1aa4a2e719d8c3ffa0251a144f3c7bb7f6">DetectContours</link>(cv::Mat&#32;img);
<anchor xml:id="_fopencv_8h_source_1l00047"/>00047 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a88f1073464ea1eda29fdd6585b1225e0">getContours</link>(std::string&#32;pathImg);
<anchor xml:id="_fopencv_8h_source_1l00048"/>00048 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1af5834294efa4c99773e98a8945ac5e90">showImgtest</link>(std::string&#32;path);
<anchor xml:id="_fopencv_8h_source_1l00049"/>00049 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a6b4612eb9922d9f6a63f553b45046790">performCannyEdgeDetectionFromLiveCamera</link>();
<anchor xml:id="_fopencv_8h_source_1l00050"/>00050 cv::Mat&#32;<link linkend="_fopencv_8h_1add9eb7c3df17f77c22f0a31113b2cca5">performCannyEdgeDetectionFromPicture</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;imagePath);
<anchor xml:id="_fopencv_8h_source_1l00051"/>00051 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1a5d4b6abd23a228c7da1096ac9929a9d2">CannyEdgeVideo</link>(std::string&#32;videoPath);
<anchor xml:id="_fopencv_8h_source_1l00052"/>00052 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8h_1ab473a21d9103080cb23e448906582fea">SaveCannyEdgeVideo</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;videoPath,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outputPath);
<anchor xml:id="_fopencv_8h_source_1l00053"/>00053 
<anchor xml:id="_fopencv_8h_source_1l00054"/>00054 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
