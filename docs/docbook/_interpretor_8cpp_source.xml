<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__interpretor_8cpp_source" xml:lang="en-US">
<title>Interpretor.cpp</title>
<indexterm><primary>src/Interpretor.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__interpretor_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__interpretor_8h">Interpretor.h</link>&quot;</emphasis>
<anchor xml:id="__interpretor_8cpp_source_1l00002"/>00002 
<anchor xml:id="__interpretor_8cpp_source_1l00003"/><link linkend="__interpretor_8cpp_1ad42767aaf8252eb57581d009530bd527">00003</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1ad42767aaf8252eb57581d009530bd527">isTokenString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00004"/>00004 {
<anchor xml:id="__interpretor_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8cpp_1a3276e6efe4a3f409262ffe0b345e9636">isKeywordString</link>(text)||&#32;<link linkend="__interpretor_8cpp_1ae8bab56314c8b787497a84c189b9114d">isLiteralString</link>(text)||&#32;<link linkend="__interpretor_8cpp_1ad93eecc58b3fdba57ba605dcb296f03e">isPunctuationString</link>(text)&#32;||&#32;<link linkend="__interpretor_8cpp_1ae80d3823673e42ed3ce7e84597bbd552">isOperatorString</link>(text);
<anchor xml:id="__interpretor_8cpp_source_1l00006"/>00006 }
<anchor xml:id="__interpretor_8cpp_source_1l00007"/>00007 
<anchor xml:id="__interpretor_8cpp_source_1l00008"/><link linkend="__interpretor_8cpp_1a3276e6efe4a3f409262ffe0b345e9636">00008</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a3276e6efe4a3f409262ffe0b345e9636">isKeywordString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00009"/>00009 {
<anchor xml:id="__interpretor_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tokenString&#32;:&#32;allKeywordsTokensString)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokenString.compare(text)&#32;==&#32;0)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00014"/>00014 }
<anchor xml:id="__interpretor_8cpp_source_1l00015"/><link linkend="__interpretor_8cpp_1add26727275e38a1c0054c4baa0c2662a">00015</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1add26727275e38a1c0054c4baa0c2662a">isBooleanToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00020"/>00020 }
<anchor xml:id="__interpretor_8cpp_source_1l00021"/>00021 <emphasis role="comment">//ADD&#32;TABLE&#32;OF&#32;ID&#32;+&#32;TYPES&#32;and&#32;then&#32;implement&#32;search&#32;in&#32;it</emphasis>
<anchor xml:id="__interpretor_8cpp_source_1l00022"/><link linkend="__interpretor_8cpp_1aec0df2353787cc680461682d1d76e4ff">00022</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1aec0df2353787cc680461682d1d76e4ff">isNumericToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;d&#32;=&#32;token-&gt;getDataType();
<anchor xml:id="__interpretor_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a53f93baa3057821107c750323892fa92">DataType::INT</link>&#32;||&#32;d&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ae738c26bf4ce1037fa81b039a915cbf6">DataType::FLOAT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00028"/>00028 }
<anchor xml:id="__interpretor_8cpp_source_1l00029"/>00029 
<anchor xml:id="__interpretor_8cpp_source_1l00030"/><link linkend="__interpretor_8cpp_1a46ef193bb5ca69f1c3333042917a93bf">00030</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a46ef193bb5ca69f1c3333042917a93bf">isTimeTypeToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()==<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6af03689713d1683f6872267046e6de33c">DataType::TIMETYPE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00035"/>00035 }
<anchor xml:id="__interpretor_8cpp_source_1l00036"/>00036 
<anchor xml:id="__interpretor_8cpp_source_1l00037"/><link linkend="__interpretor_8cpp_1ab2efcdda00b3a9b0a300553dc78d1fbd">00037</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1ab2efcdda00b3a9b0a300553dc78d1fbd">isStringToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a63b588d5559f64f89a416e656880b949">DataType::STRING</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00042"/>00042 }
<anchor xml:id="__interpretor_8cpp_source_1l00043"/>00043 
<anchor xml:id="__interpretor_8cpp_source_1l00044"/><link linkend="__interpretor_8cpp_1a40f9b1829e7de9bd4d9522c575baca2c">00044</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a40f9b1829e7de9bd4d9522c575baca2c">isIntegerToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a53f93baa3057821107c750323892fa92">DataType::INT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00049"/>00049 }
<anchor xml:id="__interpretor_8cpp_source_1l00050"/><link linkend="__interpretor_8cpp_1abfaf0794a6bff6410b3ec7aa59251549">00050</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1abfaf0794a6bff6410b3ec7aa59251549">isBoolToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00055"/>00055 }
<anchor xml:id="__interpretor_8cpp_source_1l00056"/><link linkend="__interpretor_8cpp_1a6ff2c6b83000da7ed17cba0b3f8e326f">00056</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a6ff2c6b83000da7ed17cba0b3f8e326f">isCoordToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a6a977bf6454341ccb0b79c3d0900db91">DataType::COORD</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00061"/>00061 }
<anchor xml:id="__interpretor_8cpp_source_1l00062"/><link linkend="__interpretor_8cpp_1a0916bdca9f86432f19dba325a765a138">00062</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a0916bdca9f86432f19dba325a765a138">isDirectionToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a823d5f6b867f6d6adec93ad4999bae9f">DataType::DIRECTION</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00067"/>00067 }
<anchor xml:id="__interpretor_8cpp_source_1l00068"/><link linkend="__interpretor_8cpp_1a0dd9b1dce01c40a60d47ba1d5533a850">00068</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a0dd9b1dce01c40a60d47ba1d5533a850">isFloatToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ae738c26bf4ce1037fa81b039a915cbf6">DataType::FLOAT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00073"/>00073 }
<anchor xml:id="__interpretor_8cpp_source_1l00074"/><link linkend="__interpretor_8cpp_1ac85f7e2fe47e049ac6a0f86ba22c9923">00074</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1ac85f7e2fe47e049ac6a0f86ba22c9923">isZoneToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;==&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a1d23cac77df97a722cd2ec7767a06e06">DataType::ZONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00079"/>00079 }
<anchor xml:id="__interpretor_8cpp_source_1l00080"/>00080 
<anchor xml:id="__interpretor_8cpp_source_1l00081"/><link linkend="__interpretor_8cpp_1ae8bab56314c8b787497a84c189b9114d">00081</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1ae8bab56314c8b787497a84c189b9114d">isLiteralString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00082"/>00082 {
<anchor xml:id="__interpretor_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tokenString&#32;:&#32;allLiteralsTokensStrings)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokenString.compare(text)&#32;==&#32;0)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00087"/>00087 }
<anchor xml:id="__interpretor_8cpp_source_1l00088"/>00088 
<anchor xml:id="__interpretor_8cpp_source_1l00089"/><link linkend="__interpretor_8cpp_1ad93eecc58b3fdba57ba605dcb296f03e">00089</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1ad93eecc58b3fdba57ba605dcb296f03e">isPunctuationString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00090"/>00090 {
<anchor xml:id="__interpretor_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tokenString&#32;:&#32;allPunctuationsTokensStrings)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokenString.compare(text)&#32;==&#32;0)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00095"/>00095 }
<anchor xml:id="__interpretor_8cpp_source_1l00096"/>00096 
<anchor xml:id="__interpretor_8cpp_source_1l00097"/><link linkend="__interpretor_8cpp_1ae80d3823673e42ed3ce7e84597bbd552">00097</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1ae80d3823673e42ed3ce7e84597bbd552">isOperatorString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00098"/>00098 {
<anchor xml:id="__interpretor_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tokenString&#32;:&#32;allOperatorsTokensStrings)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokenString.compare(text)&#32;==&#32;0)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00103"/>00103 }
<anchor xml:id="__interpretor_8cpp_source_1l00104"/>00104 
<anchor xml:id="__interpretor_8cpp_source_1l00105"/><link linkend="__interpretor_8cpp_1a38a3bc682b32b85fc40cda646569d271">00105</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a38a3bc682b32b85fc40cda646569d271">isTokenStringContained</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;word&#32;:&#32;allTokensStrings)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text.find(word)&#32;!=&#32;std::string::npos)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00110"/>00110 }
<anchor xml:id="__interpretor_8cpp_source_1l00111"/>00111 
<anchor xml:id="__interpretor_8cpp_source_1l00112"/><link linkend="__interpretor_8cpp_1a3de0a259acea81f7a880327324e53e4b">00112</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a3de0a259acea81f7a880327324e53e4b">isWhitespace</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;c)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00114"/>00114 }
<anchor xml:id="__interpretor_8cpp_source_1l00115"/>00115 
<anchor xml:id="__interpretor_8cpp_source_1l00116"/><link linkend="__interpretor_8cpp_1a226930df4269e20dd367d4b70f0ad457">00116</link> std::string&#32;<link linkend="__interpretor_8cpp_1a226930df4269e20dd367d4b70f0ad457">getNextNumeric</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;str)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;std::string&#32;digits&#32;=&#32;<emphasis role="stringliteral">&quot;0123456789&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;firstDigitPos&#32;=&#32;str.find_first_of(digits);
<anchor xml:id="__interpretor_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(firstDigitPos&#32;!=&#32;std::string::npos)
<anchor xml:id="__interpretor_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<emphasis role="keyword">const</emphasis>&#32;firstNonDigitPos&#32;=&#32;str.find_first_not_of(digits,&#32;firstDigitPos);
<anchor xml:id="__interpretor_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.substr(firstDigitPos,&#32;firstNonDigitPos&#32;==&#32;std::string::npos&#32;?&#32;firstNonDigitPos&#32;-&#32;firstDigitPos&#32;:&#32;firstNonDigitPos);
<anchor xml:id="__interpretor_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00124"/>00124 }
<anchor xml:id="__interpretor_8cpp_source_1l00125"/>00125 
<anchor xml:id="__interpretor_8cpp_source_1l00126"/><link linkend="__interpretor_8cpp_1aaa3b01d6b7b6b5bf4b868b37fcf3ac6f">00126</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1aaa3b01d6b7b6b5bf4b868b37fcf3ac6f">isNumber</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;s)
<anchor xml:id="__interpretor_8cpp_source_1l00127"/>00127 {
<anchor xml:id="__interpretor_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;std::string::const_iterator&#32;it&#32;=&#32;s.begin();
<anchor xml:id="__interpretor_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(it&#32;!=&#32;s.end()&#32;&amp;&amp;&#32;std::isdigit(*it))&#32;++it;
<anchor xml:id="__interpretor_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!s.empty()&#32;&amp;&amp;&#32;it&#32;==&#32;s.end();
<anchor xml:id="__interpretor_8cpp_source_1l00131"/>00131 }
<anchor xml:id="__interpretor_8cpp_source_1l00132"/>00132 
<anchor xml:id="__interpretor_8cpp_source_1l00133"/><link linkend="__interpretor_8cpp_1a32fa5cbc79c968c5b53e8303ad77091d">00133</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a32fa5cbc79c968c5b53e8303ad77091d">isIdentifier</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;s)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;notEmpty&#32;=&#32;!s.empty();
<anchor xml:id="__interpretor_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;notTokenString&#32;=&#32;!<link linkend="__interpretor_8cpp_1ad42767aaf8252eb57581d009530bd527">isTokenString</link>(s);
<anchor xml:id="__interpretor_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isAlnum&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;i&#32;:&#32;s)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::isalnum(i))isAlnum&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;notEmpty&#32;&amp;&amp;&#32;notTokenString&#32;&amp;&amp;&#32;isAlnum;
<anchor xml:id="__interpretor_8cpp_source_1l00141"/>00141 }
<anchor xml:id="__interpretor_8cpp_source_1l00142"/>00142 
<anchor xml:id="__interpretor_8cpp_source_1l00143"/><link linkend="__interpretor_8cpp_1a910f9c92b4e541a09214dedd7338b6b5">00143</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1a32fa5cbc79c968c5b53e8303ad77091d">isIdentifier</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;Token&gt;&amp;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token)<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6fcc416051346daca31c571646af127a">TokenVALUE::IDENTIFIER</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00146"/>00146 }
<anchor xml:id="__interpretor_8cpp_source_1l00147"/>00147 
<anchor xml:id="__interpretor_8cpp_source_1l00148"/><link linkend="__interpretor_8cpp_1aa6913b7fe272fe20684f1c5c701d54d7">00148</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__interpretor_8cpp_1aa6913b7fe272fe20684f1c5c701d54d7">skipSpace</link>(std::string&amp;&#32;text)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;k&#32;=&#32;text.find_first_not_of(<emphasis role="stringliteral">&quot;\b\t\n\r&#32;&quot;</emphasis>);
<anchor xml:id="__interpretor_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;&#32;text.size())text&#32;=&#32;text.substr(k);
<anchor xml:id="__interpretor_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;text.clear();
<anchor xml:id="__interpretor_8cpp_source_1l00152"/>00152 }
<anchor xml:id="__interpretor_8cpp_source_1l00153"/>00153 
<anchor xml:id="__interpretor_8cpp_source_1l00154"/><link linkend="__interpretor_8cpp_1a44cd9137229f6cc0f965ce359f482379">00154</link> std::string&#32;<link linkend="__interpretor_8cpp_1a44cd9137229f6cc0f965ce359f482379">getNextPunctuationToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;str)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lowest&#32;=&#32;std::string::npos;
<anchor xml:id="__interpretor_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;std::string&#32;punc&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!str.empty())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;l&#32;:&#32;allPunctuationsTokensStrings)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;k&#32;=&#32;str.find(l);
<anchor xml:id="__interpretor_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;&#32;lowest)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lowest&#32;=&#32;k;
<anchor xml:id="__interpretor_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;punc&#32;=&#32;l;
<anchor xml:id="__interpretor_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lowest&#32;!=&#32;std::string::npos)<emphasis role="keywordflow">return</emphasis>&#32;str.substr(lowest,punc.size());
<anchor xml:id="__interpretor_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
<anchor xml:id="__interpretor_8cpp_source_1l00168"/>00168 }
<anchor xml:id="__interpretor_8cpp_source_1l00169"/>00169 
<anchor xml:id="__interpretor_8cpp_source_1l00170"/>00170 
<anchor xml:id="__interpretor_8cpp_source_1l00171"/><link linkend="__interpretor_8cpp_1aeadcc798628a739f30945ade9bf7c9a1">00171</link> std::string&#32;<link linkend="__interpretor_8cpp_1aeadcc798628a739f30945ade9bf7c9a1">getNextTokenString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00172"/>00172 {
<anchor xml:id="__interpretor_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;std::string&#32;nextPunc&#32;=&#32;<link linkend="__interpretor_8cpp_1a44cd9137229f6cc0f965ce359f482379">getNextPunctuationToken</link>(text);
<anchor xml:id="__interpretor_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;std::string&#32;contentBefore&#32;=&#32;<link linkend="__text_manager_8cpp_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(text,nextPunc);
<anchor xml:id="__interpretor_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!nextPunc.empty())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!contentBefore.empty())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;contentBefore;
<anchor xml:id="__interpretor_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;nextPunc;
<anchor xml:id="__interpretor_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
<anchor xml:id="__interpretor_8cpp_source_1l00182"/>00182 }
<anchor xml:id="__interpretor_8cpp_source_1l00183"/>00183 
<anchor xml:id="__interpretor_8cpp_source_1l00184"/><link linkend="__interpretor_8cpp_1ac4b7c24de418895778c317466f485ce5">00184</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__interpretor_8cpp_1ac4b7c24de418895778c317466f485ce5">getPastTokenString</link>(std::string&amp;&#32;text,<emphasis role="keyword">const</emphasis>&#32;std::string&#32;tokenText)
<anchor xml:id="__interpretor_8cpp_source_1l00185"/>00185 {
<anchor xml:id="__interpretor_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;text=<link linkend="__text_manager_8cpp_1a6a1f72a80ddaec746c95996b16e3a1dc">getContentAfter</link>(text,&#32;tokenText);
<anchor xml:id="__interpretor_8cpp_source_1l00187"/>00187 }
<anchor xml:id="__interpretor_8cpp_source_1l00188"/>00188 
<anchor xml:id="__interpretor_8cpp_source_1l00189"/><link linkend="__interpretor_8cpp_1a1efffcc83c5a23c247b70fca364ece06">00189</link> <link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;<link linkend="__interpretor_8cpp_1a1efffcc83c5a23c247b70fca364ece06">getNextTokenValue</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00190"/>00190 {
<anchor xml:id="__interpretor_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8cpp_1a0060c66efc18253619637b287095821c">getTokenValue</link>(<link linkend="__interpretor_8cpp_1aeadcc798628a739f30945ade9bf7c9a1">getNextTokenString</link>(text));
<anchor xml:id="__interpretor_8cpp_source_1l00192"/>00192 }
<anchor xml:id="__interpretor_8cpp_source_1l00193"/>00193 
<anchor xml:id="__interpretor_8cpp_source_1l00194"/><link linkend="__interpretor_8cpp_1a426cbd25cc7742ac6cface09364031ba">00194</link> std::string&#32;<link linkend="__interpretor_8cpp_1a426cbd25cc7742ac6cface09364031ba">getStringLiteral</link>(std::string&amp;&#32;text)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;std::string&#32;temp&#32;=&#32;<link linkend="__text_manager_8cpp_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(text,&#32;quotation);
<anchor xml:id="__interpretor_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(temp.empty())<emphasis role="keywordflow">return</emphasis>&#32;text;
<anchor xml:id="__interpretor_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;temp;
<anchor xml:id="__interpretor_8cpp_source_1l00198"/>00198 }
<anchor xml:id="__interpretor_8cpp_source_1l00199"/>00199 
<anchor xml:id="__interpretor_8cpp_source_1l00200"/><link linkend="__interpretor_8cpp_1aa3e235e0cfc2dd090f76c893bbb5078c">00200</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="__interpretor_8cpp_1aa3e235e0cfc2dd090f76c893bbb5078c">getStringLiteralToken</link>(std::string&amp;&#32;stringLiteral)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;StringLiteralToken&gt;(stringLiteral);
<anchor xml:id="__interpretor_8cpp_source_1l00202"/>00202 }
<anchor xml:id="__interpretor_8cpp_source_1l00203"/><link linkend="_class_lexer_1ab0ca8b5adc1af3cdec4855fba11491c1">00203</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_lexer_1ab0ca8b5adc1af3cdec4855fba11491c1">Lexer::extractTokens</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00204"/>00204 {
<anchor xml:id="__interpretor_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!text.empty())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;newText&#32;=&#32;text;
<anchor xml:id="__interpretor_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;nextTokenString&#32;=&#32;<link linkend="__interpretor_8cpp_1aeadcc798628a739f30945ade9bf7c9a1">getNextTokenString</link>(newText);
<anchor xml:id="__interpretor_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextTokenString&#32;==&#32;quotation)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8cpp_1ac4b7c24de418895778c317466f485ce5">getPastTokenString</link>(newText,&#32;nextTokenString);
<anchor xml:id="__interpretor_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextTokenString&#32;=&#32;<link linkend="__interpretor_8cpp_1a426cbd25cc7742ac6cface09364031ba">getStringLiteral</link>(newText);
<anchor xml:id="__interpretor_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_lexer_1a5147254cee0022d532a50e683a3fa688">listTokens</link>.push_back(<link linkend="__interpretor_8h_1a7e41e92472c2a2c1aafa174217d4734f">getToken</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cace7e8413589722ee650cbce0ea040f86">TokenVALUE::STRINGLITERAL</link>,nextTokenString));
<anchor xml:id="__interpretor_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8cpp_1ac4b7c24de418895778c317466f485ce5">getPastTokenString</link>(newText,&#32;nextTokenString);
<anchor xml:id="__interpretor_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSpaceToken(nextTokenString))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8cpp_1aa6913b7fe272fe20684f1c5c701d54d7">skipSpace</link>(newText);
<anchor xml:id="__interpretor_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_lexer_1a5147254cee0022d532a50e683a3fa688">listTokens</link>.push_back(<link linkend="__interpretor_8h_1a7e41e92472c2a2c1aafa174217d4734f">getToken</link>(nextTokenString));
<anchor xml:id="__interpretor_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8cpp_1ac4b7c24de418895778c317466f485ce5">getPastTokenString</link>(newText,&#32;nextTokenString);
<anchor xml:id="__interpretor_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_lexer_1ab0ca8b5adc1af3cdec4855fba11491c1">extractTokens</link>(newText);
<anchor xml:id="__interpretor_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00223"/>00223 }
<anchor xml:id="__interpretor_8cpp_source_1l00224"/>00224 
<anchor xml:id="__interpretor_8cpp_source_1l00225"/><link linkend="__interpretor_8cpp_1a0060c66efc18253619637b287095821c">00225</link> <link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;<link linkend="__interpretor_8cpp_1a0060c66efc18253619637b287095821c">getTokenValue</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;mainK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca186495f7da296bf880df3a22a492b378">TokenVALUE::MAIN</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;loopK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca9159b3578e4e1eb31ffdf90acd6f6e40">TokenVALUE::LOOP</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;boolK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;storeK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3cfba54f6873dfd55b0b09d32910b20e">TokenVALUE::STORE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;stringK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca63b588d5559f64f89a416e656880b949">TokenVALUE::STRING</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;coordK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;listK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca298cb25408234de02baf2085803a464a">TokenVALUE::LIST</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;intK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;floatK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cae738c26bf4ce1037fa81b039a915cbf6">TokenVALUE::FLOAT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;compareK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cafee1f202df8193b3ba65f00ad61efcef">TokenVALUE::COMPARE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;zoneK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d23cac77df97a722cd2ec7767a06e06">TokenVALUE::ZONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;ifK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cade6ee2b5d856295add4d5e3631fbfb93">TokenVALUE::IF</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;elseK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca778537b0acce06229cb78d5f72c907ab">TokenVALUE::ELSE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;elifK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca722462c878f454d0872804374ef77c95">TokenVALUE::ELIF</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;doloopK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca94682254f1edc02f9576916290a5fddd">TokenVALUE::DOLOOP</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;andK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca558ffc8f5770d8e4f95f51d822685532">TokenVALUE::AND</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;notK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca10df3d67626099df882920ba6552f16d">TokenVALUE::NOT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;orK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d00e7dce692e8dc3f6877f035e3a616">TokenVALUE::OR</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;directionK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca823d5f6b867f6d6adec93ad4999bae9f">TokenVALUE::DIRECTION</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;switchK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4239f063a3d4fb9d38a0182be6e39e76">TokenVALUE::SWITCH</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;defaultK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5b39c8b553c821e7cddc6da64b5bd2ee">TokenVALUE::DEFAULT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;breakK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca14d6a3e0201f58bfe7c01e775973e80e">TokenVALUE::BREAK</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;continueK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2f453cfe638e57e27bb0c9512436111e">TokenVALUE::CONTINUE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;caseK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cabea5438a9521adc1b23a9117024bbb43">TokenVALUE::CASE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;printK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf96eee4e48ee90430f17fb3a8388507b">TokenVALUE::PRINT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;waitK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad5cc6a0064b5c25ba37826aa3fda910c">TokenVALUE::WAIT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;waitK)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad5cc6a0064b5c25ba37826aa3fda910c">TokenVALUE::WAIT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;commaP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;openBracketsP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;closeBracketsP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;openAngleBracketsP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca09d62a98aa0b2c29e66b3f81c3641657">TokenVALUE::OPENANGLEBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;closeAngleBracketsP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad473a02cda3fb53f1def18c632bf4e9d">TokenVALUE::CLOSEANGLEBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;openParenthesisP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caab5f2c1029696d0fa27db2acf531e951">TokenVALUE::OPENPARENTHESIS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;closeParenthesisP)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;falseL)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3667ab316297387f31aa717670424e7b">TokenVALUE::FALSELITERAL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;trueL)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad36335449b5720a1384868719f487119">TokenVALUE::TRUELITERAL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;millisecondL)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca241d7907de05ad50c011812e927cd671">TokenVALUE::MILLISECOND</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;secondL)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2200becb80f0019c4a2ccecec350d0db">TokenVALUE::SECOND</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;minuteL)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca46bda4cde2f10bdb9e51e3bbefa4a2bf">TokenVALUE::MINUTE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text&#32;==&#32;quotation)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf7193622145fd3c92db6f1b14f175dc0">TokenVALUE::QUOTATION</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1aaa3b01d6b7b6b5bf4b868b37fcf3ac6f">isNumber</link>(text))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab22f521f17b09d0fd389e231f8f6d66d">TokenVALUE::NUMERIC</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a32fa5cbc79c968c5b53e8303ad77091d">isIdentifier</link>(text))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6fcc416051346daca31c571646af127a">TokenVALUE::IDENTIFIER</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca696b031073e74bf2cb98e5ef201d4aa3">TokenVALUE::UNKNOWN</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00353"/>00353 }
<anchor xml:id="__interpretor_8cpp_source_1l00354"/>00354 
<anchor xml:id="__interpretor_8cpp_source_1l00355"/>00355 
<anchor xml:id="__interpretor_8cpp_source_1l00356"/><link linkend="__interpretor_8cpp_1a2368ff9f88ff6f6529bd474e94d3ef7c">00356</link> std::string&#32;<link linkend="__interpretor_8cpp_1a2368ff9f88ff6f6529bd474e94d3ef7c">getTokenString</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;value)
<anchor xml:id="__interpretor_8cpp_source_1l00357"/>00357 {
<anchor xml:id="__interpretor_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(value)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca186495f7da296bf880df3a22a492b378">TokenVALUE::MAIN</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mainK;
<anchor xml:id="__interpretor_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca9159b3578e4e1eb31ffdf90acd6f6e40">TokenVALUE::LOOP</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;loopK;
<anchor xml:id="__interpretor_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;boolK;
<anchor xml:id="__interpretor_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3cfba54f6873dfd55b0b09d32910b20e">TokenVALUE::STORE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;storeK;
<anchor xml:id="__interpretor_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca63b588d5559f64f89a416e656880b949">TokenVALUE::STRING</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringK;
<anchor xml:id="__interpretor_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;coordK;
<anchor xml:id="__interpretor_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca298cb25408234de02baf2085803a464a">TokenVALUE::LIST</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;listK;
<anchor xml:id="__interpretor_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;intK;
<anchor xml:id="__interpretor_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cae738c26bf4ce1037fa81b039a915cbf6">TokenVALUE::FLOAT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;floatK;
<anchor xml:id="__interpretor_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cafee1f202df8193b3ba65f00ad61efcef">TokenVALUE::COMPARE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compareK;
<anchor xml:id="__interpretor_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d23cac77df97a722cd2ec7767a06e06">TokenVALUE::ZONE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zoneK;
<anchor xml:id="__interpretor_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cade6ee2b5d856295add4d5e3631fbfb93">TokenVALUE::IF</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ifK;
<anchor xml:id="__interpretor_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca778537b0acce06229cb78d5f72c907ab">TokenVALUE::ELSE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elseK;
<anchor xml:id="__interpretor_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca722462c878f454d0872804374ef77c95">TokenVALUE::ELIF</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elifK;
<anchor xml:id="__interpretor_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca94682254f1edc02f9576916290a5fddd">TokenVALUE::DOLOOP</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;doloopK;
<anchor xml:id="__interpretor_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca558ffc8f5770d8e4f95f51d822685532">TokenVALUE::AND</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;andK;
<anchor xml:id="__interpretor_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca10df3d67626099df882920ba6552f16d">TokenVALUE::NOT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;notK;
<anchor xml:id="__interpretor_8cpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d00e7dce692e8dc3f6877f035e3a616">TokenVALUE::OR</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;orK;
<anchor xml:id="__interpretor_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca823d5f6b867f6d6adec93ad4999bae9f">TokenVALUE::DIRECTION</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;directionK;
<anchor xml:id="__interpretor_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca14d6a3e0201f58bfe7c01e775973e80e">TokenVALUE::BREAK</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;breakK;
<anchor xml:id="__interpretor_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2f453cfe638e57e27bb0c9512436111e">TokenVALUE::CONTINUE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;continueK;
<anchor xml:id="__interpretor_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf96eee4e48ee90430f17fb3a8388507b">TokenVALUE::PRINT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;printK;
<anchor xml:id="__interpretor_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad5cc6a0064b5c25ba37826aa3fda910c">TokenVALUE::WAIT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;waitK;
<anchor xml:id="__interpretor_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;closeBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;openBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad473a02cda3fb53f1def18c632bf4e9d">TokenVALUE::CLOSEANGLEBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;closeAngleBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca09d62a98aa0b2c29e66b3f81c3641657">TokenVALUE::OPENANGLEBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;openAngleBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;closeParenthesisP;
<anchor xml:id="__interpretor_8cpp_source_1l00415"/>00415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caab5f2c1029696d0fa27db2acf531e951">TokenVALUE::OPENPARENTHESIS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;openParenthesisP;
<anchor xml:id="__interpretor_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;commaP;
<anchor xml:id="__interpretor_8cpp_source_1l00419"/>00419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3667ab316297387f31aa717670424e7b">TokenVALUE::FALSELITERAL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falseL;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad36335449b5720a1384868719f487119">TokenVALUE::TRUELITERAL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;trueL;
<anchor xml:id="__interpretor_8cpp_source_1l00423"/>00423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf7193622145fd3c92db6f1b14f175dc0">TokenVALUE::QUOTATION</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;quotation;
<anchor xml:id="__interpretor_8cpp_source_1l00425"/>00425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca241d7907de05ad50c011812e927cd671">TokenVALUE::MILLISECOND</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;millisecondL;
<anchor xml:id="__interpretor_8cpp_source_1l00427"/>00427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2200becb80f0019c4a2ccecec350d0db">TokenVALUE::SECOND</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;secondL;
<anchor xml:id="__interpretor_8cpp_source_1l00429"/>00429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca46bda4cde2f10bdb9e51e3bbefa4a2bf">TokenVALUE::MINUTE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;minuteL;
<anchor xml:id="__interpretor_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab22f521f17b09d0fd389e231f8f6d66d">TokenVALUE::NUMERIC</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NUMERIC&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6fcc416051346daca31c571646af127a">TokenVALUE::IDENTIFIER</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ID&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00435"/>00435 
<anchor xml:id="__interpretor_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__interpretor_8cpp_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;UNKNOWN&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00439"/>00439 }
<anchor xml:id="__interpretor_8cpp_source_1l00440"/>00440 
<anchor xml:id="__interpretor_8cpp_source_1l00441"/><link linkend="__interpretor_8cpp_1a7e41e92472c2a2c1aafa174217d4734f">00441</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="__interpretor_8cpp_1a7e41e92472c2a2c1aafa174217d4734f">getToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8cpp_1a7e41e92472c2a2c1aafa174217d4734f">getToken</link>(<link linkend="__interpretor_8cpp_1a0060c66efc18253619637b287095821c">getTokenValue</link>(text),&#32;text);
<anchor xml:id="__interpretor_8cpp_source_1l00443"/>00443 }
<anchor xml:id="__interpretor_8cpp_source_1l00444"/><link linkend="__interpretor_8cpp_1a7e77c38c7369e6bffb038003c5083888">00444</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="__interpretor_8cpp_1a7e41e92472c2a2c1aafa174217d4734f">getToken</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&amp;&#32;tValue,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(tValue)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca186495f7da296bf880df3a22a492b378">TokenVALUE::MAIN</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;MainToken&gt;();&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca9159b3578e4e1eb31ffdf90acd6f6e40">TokenVALUE::LOOP</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;LoopToken&gt;();&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00450"/>00450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;BoolToken&gt;();&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00452"/>00452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3cfba54f6873dfd55b0b09d32910b20e">TokenVALUE::STORE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;StoreToken&gt;();&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca63b588d5559f64f89a416e656880b949">TokenVALUE::STRING</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;StringToken&gt;();&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CoordToken&gt;();&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca298cb25408234de02baf2085803a464a">TokenVALUE::LIST</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;ListToken&gt;();&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00460"/>00460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;IntegerToken&gt;();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00462"/>00462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cae738c26bf4ce1037fa81b039a915cbf6">TokenVALUE::FLOAT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;FloatToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cafee1f202df8193b3ba65f00ad61efcef">TokenVALUE::COMPARE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CompareToken&gt;();&#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d23cac77df97a722cd2ec7767a06e06">TokenVALUE::ZONE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;ZoneToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00468"/>00468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cade6ee2b5d856295add4d5e3631fbfb93">TokenVALUE::IF</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;IfToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00470"/>00470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca778537b0acce06229cb78d5f72c907ab">TokenVALUE::ELSE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;ElseToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00472"/>00472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca722462c878f454d0872804374ef77c95">TokenVALUE::ELIF</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;ElifToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca94682254f1edc02f9576916290a5fddd">TokenVALUE::DOLOOP</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;DoLoopToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00476"/>00476 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca558ffc8f5770d8e4f95f51d822685532">TokenVALUE::AND</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;AndToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00478"/>00478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca10df3d67626099df882920ba6552f16d">TokenVALUE::NOT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;NotToken&gt;();&#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00480"/>00480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d00e7dce692e8dc3f6877f035e3a616">TokenVALUE::OR</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;OrToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca823d5f6b867f6d6adec93ad4999bae9f">TokenVALUE::DIRECTION</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;DirectionToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca14d6a3e0201f58bfe7c01e775973e80e">TokenVALUE::BREAK</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;BreakToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2f453cfe638e57e27bb0c9512436111e">TokenVALUE::CONTINUE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;ContinueToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00488"/>00488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf96eee4e48ee90430f17fb3a8388507b">TokenVALUE::PRINT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;PrintToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad5cc6a0064b5c25ba37826aa3fda910c">TokenVALUE::WAIT</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;WaitToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CloseBracketsToken&gt;();&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;OpenBracketsToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad473a02cda3fb53f1def18c632bf4e9d">TokenVALUE::CLOSEANGLEBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CloseAngleBracketsToken&gt;();&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca09d62a98aa0b2c29e66b3f81c3641657">TokenVALUE::OPENANGLEBRACKETS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;OpenAngleBracketsToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CloseParenthesisToken&gt;();&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caab5f2c1029696d0fa27db2acf531e951">TokenVALUE::OPENPARENTHESIS</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;OpenParenthesisToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CommaToken&gt;();&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3667ab316297387f31aa717670424e7b">TokenVALUE::FALSELITERAL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;FalseToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad36335449b5720a1384868719f487119">TokenVALUE::TRUELITERAL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;TrueToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca241d7907de05ad50c011812e927cd671">TokenVALUE::MILLISECOND</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;MilliSecondToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2200becb80f0019c4a2ccecec350d0db">TokenVALUE::SECOND</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;SecondToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca46bda4cde2f10bdb9e51e3bbefa4a2bf">TokenVALUE::MINUTE</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;MinuteToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab22f521f17b09d0fd389e231f8f6d66d">TokenVALUE::NUMERIC</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;NumericToken&gt;(text);
<anchor xml:id="__interpretor_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6fcc416051346daca31c571646af127a">TokenVALUE::IDENTIFIER</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;IdentifierToken&gt;(text);
<anchor xml:id="__interpretor_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cace7e8413589722ee650cbce0ea040f86">TokenVALUE::STRINGLITERAL</link>:
<anchor xml:id="__interpretor_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;StringLiteralToken&gt;(text);
<anchor xml:id="__interpretor_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;UnknownToken&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00525"/>00525 }
<anchor xml:id="__interpretor_8cpp_source_1l00526"/>00526 
<anchor xml:id="__interpretor_8cpp_source_1l00527"/>00527 
<anchor xml:id="__interpretor_8cpp_source_1l00528"/><link linkend="_class_lexer_1a2752a2b16cc1ffbcb8fc3e82e95bf331">00528</link> <link linkend="_class_lexer_1a2752a2b16cc1ffbcb8fc3e82e95bf331">Lexer::Lexer</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00529"/>00529 {
<anchor xml:id="__interpretor_8cpp_source_1l00530"/>00530 }
<anchor xml:id="__interpretor_8cpp_source_1l00531"/>00531 
<anchor xml:id="__interpretor_8cpp_source_1l00532"/><link linkend="_class_lexer_1a41f107194b3a9ed49a43abdb9fbcad24">00532</link> <link linkend="_class_lexer_1a2752a2b16cc1ffbcb8fc3e82e95bf331">Lexer::Lexer</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l00533"/>00533 {
<anchor xml:id="__interpretor_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;<link linkend="_class_lexer_1a8a81c9e13952e5afda794af56ba46455">totalContent</link>&#32;=&#32;text;
<anchor xml:id="__interpretor_8cpp_source_1l00535"/>00535 &#32;&#32;&#32;&#32;<emphasis role="comment">//extractTokens(totalContent);</emphasis>
<anchor xml:id="__interpretor_8cpp_source_1l00536"/>00536 }
<anchor xml:id="__interpretor_8cpp_source_1l00537"/>00537 
<anchor xml:id="__interpretor_8cpp_source_1l00538"/>00538 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSpaceToken(std::string&amp;&#32;c)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00539"/>00539 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;j=&#32;c.find_first_of(<emphasis role="stringliteral">&quot;&#32;\t\b\n\r&quot;</emphasis>)&#32;!=&#32;std::string::npos;
<anchor xml:id="__interpretor_8cpp_source_1l00540"/>00540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j;
<anchor xml:id="__interpretor_8cpp_source_1l00541"/>00541 }
<anchor xml:id="__interpretor_8cpp_source_1l00542"/>00542 
<anchor xml:id="__interpretor_8cpp_source_1l00543"/><link linkend="_class_lexer_1a142db843cfdc2ef25cf8e59c7b209861">00543</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_lexer_1a142db843cfdc2ef25cf8e59c7b209861">Lexer::empty</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00544"/>00544 {
<anchor xml:id="__interpretor_8cpp_source_1l00545"/>00545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_lexer_1a5147254cee0022d532a50e683a3fa688">listTokens</link>.empty();
<anchor xml:id="__interpretor_8cpp_source_1l00546"/>00546 }
<anchor xml:id="__interpretor_8cpp_source_1l00547"/>00547 
<anchor xml:id="__interpretor_8cpp_source_1l00548"/>00548 
<anchor xml:id="__interpretor_8cpp_source_1l00549"/>00549 
<anchor xml:id="__interpretor_8cpp_source_1l00550"/>00550 
<anchor xml:id="__interpretor_8cpp_source_1l00551"/>00551 
<anchor xml:id="__interpretor_8cpp_source_1l00552"/>00552 
<anchor xml:id="__interpretor_8cpp_source_1l00553"/><link linkend="_class_lexer_1a5a008a99eb5bc34590b62a99ea9065c3">00553</link> std::string&#32;<link linkend="_class_lexer_1a5a008a99eb5bc34590b62a99ea9065c3">Lexer::showAllTokens</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00554"/>00554 {
<anchor xml:id="__interpretor_8cpp_source_1l00555"/>00555 
<anchor xml:id="__interpretor_8cpp_source_1l00556"/>00556 
<anchor xml:id="__interpretor_8cpp_source_1l00557"/>00557 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Console&#32;is&#32;now&#32;available&#32;for&#32;debugging&#32;output!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__interpretor_8cpp_source_1l00558"/>00558 &#32;&#32;&#32;&#32;std::string&#32;str;
<anchor xml:id="__interpretor_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;s&#32;:&#32;this-&gt;<link linkend="_class_lexer_1a5147254cee0022d532a50e683a3fa688">listTokens</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;s-&gt;tokenText;
<anchor xml:id="__interpretor_8cpp_source_1l00561"/>00561 
<anchor xml:id="__interpretor_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(s)str.append(h+<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
<anchor xml:id="__interpretor_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h&#32;==&#32;<emphasis role="stringliteral">&quot;{&quot;</emphasis>&#32;||&#32;h&#32;==&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>)str.append(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="__interpretor_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__interpretor_8cpp_source_1l00566"/>00566 }
<anchor xml:id="__interpretor_8cpp_source_1l00567"/>00567 
<anchor xml:id="__interpretor_8cpp_source_1l00568"/><link linkend="_class_identifier_token_1a7be51f313dff6ce44902faddf3e0c8a1">00568</link> <link linkend="_class_identifier_token_1a7be51f313dff6ce44902faddf3e0c8a1">IdentifierToken::IdentifierToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;varName)
<anchor xml:id="__interpretor_8cpp_source_1l00569"/>00569 {
<anchor xml:id="__interpretor_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6fcc416051346daca31c571646af127a">TokenVALUE::IDENTIFIER</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;varName;
<anchor xml:id="__interpretor_8cpp_source_1l00572"/>00572 }
<anchor xml:id="__interpretor_8cpp_source_1l00573"/>00573 
<anchor xml:id="__interpretor_8cpp_source_1l00574"/>00574 
<anchor xml:id="__interpretor_8cpp_source_1l00575"/><link linkend="_class_identifier_token_1aedcfa4072f22665a7e9fc872ef9dbcbb">00575</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_identifier_token_1aedcfa4072f22665a7e9fc872ef9dbcbb">IdentifierToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00576"/>00576 {
<anchor xml:id="__interpretor_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00579"/>00579 }
<anchor xml:id="__interpretor_8cpp_source_1l00580"/>00580 
<anchor xml:id="__interpretor_8cpp_source_1l00581"/><link linkend="_class_main_token_1a1c3f66d8b2aed831a6c1f7098aad4bc3">00581</link> <link linkend="_class_main_token_1a1c3f66d8b2aed831a6c1f7098aad4bc3">MainToken::MainToken</link>():<link linkend="_class_flow_k_p_token">FlowKPToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00582"/>00582 {
<anchor xml:id="__interpretor_8cpp_source_1l00583"/>00583 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>&#32;=&#32;std::make_shared&lt;TokenResult&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00584"/>00584 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca186495f7da296bf880df3a22a492b378">TokenVALUE::MAIN</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00585"/>00585 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;mainK;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00586"/>00586 }
<anchor xml:id="__interpretor_8cpp_source_1l00587"/>00587 
<anchor xml:id="__interpretor_8cpp_source_1l00588"/><link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">00588</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">KPToken::addOp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)
<anchor xml:id="__interpretor_8cpp_source_1l00589"/>00589 {
<anchor xml:id="__interpretor_8cpp_source_1l00590"/>00590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caab5f2c1029696d0fa27db2acf531e951">TokenVALUE::OPENPARENTHESIS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00596"/>00596 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00597"/>00597 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caab5f2c1029696d0fa27db2acf531e951">TokenVALUE::OPENPARENTHESIS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00598"/>00598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00599"/>00599 }
<anchor xml:id="__interpretor_8cpp_source_1l00600"/>00600 
<anchor xml:id="__interpretor_8cpp_source_1l00601"/><link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">00601</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">KPToken::addCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00602"/>00602 {
<anchor xml:id="__interpretor_8cpp_source_1l00603"/>00603 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00609"/>00609 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00610"/>00610 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00611"/>00611 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00612"/>00612 }
<anchor xml:id="__interpretor_8cpp_source_1l00613"/>00613 
<anchor xml:id="__interpretor_8cpp_source_1l00614"/><link linkend="_class_k_p_token_1a87c8af27b17d6ecbc8f7338d1f7737a7">00614</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a87c8af27b17d6ecbc8f7338d1f7737a7">KPToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00615"/>00615 {
<anchor xml:id="__interpretor_8cpp_source_1l00616"/>00616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00617"/>00617 }
<anchor xml:id="__interpretor_8cpp_source_1l00618"/>00618 
<anchor xml:id="__interpretor_8cpp_source_1l00619"/><link linkend="_class_k_p_token_1a7d6892f81389e89ec9f255ab1032758d">00619</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_k_p_token_1a7d6892f81389e89ec9f255ab1032758d">KPToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00620"/>00620 {
<anchor xml:id="__interpretor_8cpp_source_1l00621"/>00621 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00622"/>00622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a87c8af27b17d6ecbc8f7338d1f7737a7">handleCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00624"/>00624 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00625"/>00625 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00626"/>00626 }
<anchor xml:id="__interpretor_8cpp_source_1l00627"/>00627 
<anchor xml:id="__interpretor_8cpp_source_1l00628"/><link linkend="_class_k_p_token_1a35b0aee206a6f3296d01adb8597ea331">00628</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a35b0aee206a6f3296d01adb8597ea331">KPToken::addNumber</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00629"/>00629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1aec0df2353787cc680461682d1d76e4ff">isNumericToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00634"/>00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00637"/>00637 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00638"/>00638 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab22f521f17b09d0fd389e231f8f6d66d">TokenVALUE::NUMERIC</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00639"/>00639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00640"/>00640 }
<anchor xml:id="__interpretor_8cpp_source_1l00641"/>00641 
<anchor xml:id="__interpretor_8cpp_source_1l00642"/><link linkend="_class_k_p_token_1aa9f011132395d98cbf2563233b16a510">00642</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1aa9f011132395d98cbf2563233b16a510">KPToken::addInteger</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00643"/>00643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a40f9b1829e7de9bd4d9522c575baca2c">isIntegerToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00651"/>00651 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00652"/>00652 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00653"/>00653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00654"/>00654 }
<anchor xml:id="__interpretor_8cpp_source_1l00655"/>00655 
<anchor xml:id="__interpretor_8cpp_source_1l00656"/><link linkend="_class_k_p_token_1af0e2ae4f677dc0ac40543384c090afca">00656</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1af0e2ae4f677dc0ac40543384c090afca">KPToken::addFloat</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00657"/>00657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a0dd9b1dce01c40a60d47ba1d5533a850">isFloatToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00664"/>00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00665"/>00665 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00666"/>00666 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cae738c26bf4ce1037fa81b039a915cbf6">TokenVALUE::FLOAT</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00667"/>00667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00668"/>00668 }
<anchor xml:id="__interpretor_8cpp_source_1l00669"/>00669 
<anchor xml:id="__interpretor_8cpp_source_1l00670"/><link linkend="_class_k_p_token_1a9cd65bfbd30b7157eff902f162a45553">00670</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a9cd65bfbd30b7157eff902f162a45553">KPToken::addCoord</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00671"/>00671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00672"/>00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a6ff2c6b83000da7ed17cba0b3f8e326f">isCoordToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00679"/>00679 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00680"/>00680 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00681"/>00681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00682"/>00682 }
<anchor xml:id="__interpretor_8cpp_source_1l00683"/>00683 
<anchor xml:id="__interpretor_8cpp_source_1l00684"/><link linkend="_class_k_p_token_1a79d7487ddc6918bf30349557f379fc04">00684</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a79d7487ddc6918bf30349557f379fc04">KPToken::addString</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00685"/>00685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;res&#32;=&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00688"/>00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(res-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1ab2efcdda00b3a9b0a300553dc78d1fbd">isStringToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00690"/>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(res);
<anchor xml:id="__interpretor_8cpp_source_1l00694"/>00694 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00695"/>00695 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca63b588d5559f64f89a416e656880b949">TokenVALUE::STRING</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00696"/>00696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00697"/>00697 }
<anchor xml:id="__interpretor_8cpp_source_1l00698"/>00698 
<anchor xml:id="__interpretor_8cpp_source_1l00699"/><link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">00699</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">KPToken::addComma</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00700"/>00700 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue==<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00706"/>00706 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00707"/>00707 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00708"/>00708 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00709"/>00709 }
<anchor xml:id="__interpretor_8cpp_source_1l00710"/>00710 
<anchor xml:id="__interpretor_8cpp_source_1l00711"/><link linkend="_class_k_p_token_1acbaa6483144d6800ad8ffa2df21392d2">00711</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_k_p_token_1acbaa6483144d6800ad8ffa2df21392d2">KPToken::addTimeType</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00712"/>00712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a46ef193bb5ca69f1c3333042917a93bf">isTimeTypeToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00718"/>00718 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00719"/>00719 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2200becb80f0019c4a2ccecec350d0db">TokenVALUE::SECOND</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00720"/>00720 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00721"/>00721 }
<anchor xml:id="__interpretor_8cpp_source_1l00722"/>00722 
<anchor xml:id="__interpretor_8cpp_source_1l00723"/><link linkend="_class_wait_token_1a025496a739c85ce044f303b38fee7608">00723</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_wait_token_1a025496a739c85ce044f303b38fee7608">WaitToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00724"/>00724 {
<anchor xml:id="__interpretor_8cpp_source_1l00725"/>00725 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00726"/>00726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a35b0aee206a6f3296d01adb8597ea331">addNumber</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">addComma</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1acbaa6483144d6800ad8ffa2df21392d2">addTimeType</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00733"/>00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00734"/>00734 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00735"/>00735 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00736"/>00736 }
<anchor xml:id="__interpretor_8cpp_source_1l00737"/>00737 
<anchor xml:id="__interpretor_8cpp_source_1l00738"/>00738 
<anchor xml:id="__interpretor_8cpp_source_1l00739"/>00739 
<anchor xml:id="__interpretor_8cpp_source_1l00740"/><link linkend="_class_identifier_token_1ad9da654f9973551c59750220e2016120">00740</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_identifier_token_1ad9da654f9973551c59750220e2016120">IdentifierToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00741"/>00741 {
<anchor xml:id="__interpretor_8cpp_source_1l00742"/>00742 &#32;&#32;&#32;&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;res=<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ab50339a10e1de285ac99d4c3990b8693">DataType::NONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00743"/>00743 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;varTable&#32;=&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;varTable;
<anchor xml:id="__interpretor_8cpp_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;iter&#32;=&#32;varTable-&gt;find(<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(iter!=&#32;varTable-&gt;end())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;iter-&gt;second;
<anchor xml:id="__interpretor_8cpp_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00749"/>00749 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00750"/>00750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
<anchor xml:id="__interpretor_8cpp_source_1l00751"/>00751 }
<anchor xml:id="__interpretor_8cpp_source_1l00752"/><link linkend="_class_store_token_1abbb9193503dd3dc6f03f96be9f71b45a">00752</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_store_token_1abbb9193503dd3dc6f03f96be9f71b45a">StoreToken::addIdentifier</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00753"/>00753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a32fa5cbc79c968c5b53e8303ad77091d">isIdentifier</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_store_token_1ac688bd71a918146db1def1a415b80863">identifierToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00760"/>00760 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00761"/>00761 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2200becb80f0019c4a2ccecec350d0db">TokenVALUE::SECOND</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00762"/>00762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00763"/>00763 }
<anchor xml:id="__interpretor_8cpp_source_1l00764"/>00764 
<anchor xml:id="__interpretor_8cpp_source_1l00765"/><link linkend="__interpretor_8cpp_1abcc4565ee1966ac13a3f10b4f9a878ba">00765</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1abcc4565ee1966ac13a3f10b4f9a878ba">isValue</link>(std::shared_ptr&lt;Token&gt;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00766"/>00766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token-&gt;getDataType()&#32;!=&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ab50339a10e1de285ac99d4c3990b8693">DataType::NONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l00767"/>00767 }
<anchor xml:id="__interpretor_8cpp_source_1l00768"/>00768 
<anchor xml:id="__interpretor_8cpp_source_1l00769"/><link linkend="__interpretor_8cpp_1aeae120e34ddae125123ab27fd7a2eeb3">00769</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__interpretor_8cpp_1aeae120e34ddae125123ab27fd7a2eeb3">isType</link>(std::shared_ptr&lt;Token&gt;&#32;token)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00770"/>00770 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::unordered_set&lt;TokenVALUE&gt;&#32;validTypes&#32;=&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>,&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cae738c26bf4ce1037fa81b039a915cbf6">TokenVALUE::FLOAT</link>,&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>,
<anchor xml:id="__interpretor_8cpp_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>,&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d23cac77df97a722cd2ec7767a06e06">TokenVALUE::ZONE</link>,&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca823d5f6b867f6d6adec93ad4999bae9f">TokenVALUE::DIRECTION</link>,
<anchor xml:id="__interpretor_8cpp_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca63b588d5559f64f89a416e656880b949">TokenVALUE::STRING</link>
<anchor xml:id="__interpretor_8cpp_source_1l00774"/>00774 &#32;&#32;&#32;&#32;};
<anchor xml:id="__interpretor_8cpp_source_1l00775"/>00775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;validTypes.count(token-&gt;tValue)&#32;&gt;&#32;0;
<anchor xml:id="__interpretor_8cpp_source_1l00776"/>00776 }
<anchor xml:id="__interpretor_8cpp_source_1l00777"/>00777 
<anchor xml:id="__interpretor_8cpp_source_1l00778"/><link linkend="_class_store_token_1a477dcacce7acf5a3c4ff14ff5e4f95fd">00778</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_store_token_1a477dcacce7acf5a3c4ff14ff5e4f95fd">StoreToken::addValue</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00780"/>00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00781"/>00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;res=elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00782"/>00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(res-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00783"/>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1abcc4565ee1966ac13a3f10b4f9a878ba">isValue</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_store_token_1afd9ad7493758a02837af451ddb4fec2d">valueToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00785"/>00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;addVar(<link linkend="_class_store_token_1ac688bd71a918146db1def1a415b80863">identifierToken</link>-&gt;tokenText,&#32;<link linkend="_class_store_token_1afd9ad7493758a02837af451ddb4fec2d">valueToken</link>-&gt;getDataType());
<anchor xml:id="__interpretor_8cpp_source_1l00786"/>00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(res);
<anchor xml:id="__interpretor_8cpp_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00791"/>00791 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00792"/>00792 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00793"/>00793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00794"/>00794 }
<anchor xml:id="__interpretor_8cpp_source_1l00795"/>00795 
<anchor xml:id="__interpretor_8cpp_source_1l00796"/><link linkend="_class_store_token_1ada7a74bb6d2f11f78f026be0554183e9">00796</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_store_token_1ada7a74bb6d2f11f78f026be0554183e9">StoreToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00797"/>00797 {
<anchor xml:id="__interpretor_8cpp_source_1l00798"/>00798 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00799"/>00799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_store_token_1abbb9193503dd3dc6f03f96be9f71b45a">addIdentifier</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">addComma</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_store_token_1a477dcacce7acf5a3c4ff14ff5e4f95fd">addValue</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00807"/>00807 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00808"/>00808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00809"/>00809 }
<anchor xml:id="__interpretor_8cpp_source_1l00810"/>00810 
<anchor xml:id="__interpretor_8cpp_source_1l00811"/>00811 
<anchor xml:id="__interpretor_8cpp_source_1l00812"/>00812 
<anchor xml:id="__interpretor_8cpp_source_1l00813"/><link linkend="_class_flow_k_token_1aa97c47a59e43f8984764231f9101bddb">00813</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_flow_k_token_1aa97c47a59e43f8984764231f9101bddb">FlowKToken::addOb</link>(&#32;<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)
<anchor xml:id="__interpretor_8cpp_source_1l00814"/>00814 {
<anchor xml:id="__interpretor_8cpp_source_1l00815"/>00815 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00819"/>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00820"/>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00821"/>00821 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00822"/>00822 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00823"/>00823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00824"/>00824 }
<anchor xml:id="__interpretor_8cpp_source_1l00825"/>00825 
<anchor xml:id="__interpretor_8cpp_source_1l00826"/><link linkend="_class_flow_k_token_1ab92c7a3ef4e07f22d45998b1217a037e">00826</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_flow_k_token_1ab92c7a3ef4e07f22d45998b1217a037e">FlowKToken::addCb</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00827"/>00827 {
<anchor xml:id="__interpretor_8cpp_source_1l00828"/>00828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00829"/>00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00831"/>00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00833"/>00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00834"/>00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00835"/>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elemRes&#32;=&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elemRes-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_flow_k_token_1aa99ba504a4a6c16a90ec747fc5a70f40">nestedTokens</link>.push_back(elem);
<anchor xml:id="__interpretor_8cpp_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(elemRes);
<anchor xml:id="__interpretor_8cpp_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00844"/>00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00845"/>00845 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00846"/>00846 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00847"/>00847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00848"/>00848 }
<anchor xml:id="__interpretor_8cpp_source_1l00849"/>00849 
<anchor xml:id="__interpretor_8cpp_source_1l00850"/><link linkend="_class_flow_k_p_token_1a2a3c69d4e82ac4a76c1f39ea505a64e7">00850</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_flow_k_p_token_1a2a3c69d4e82ac4a76c1f39ea505a64e7">FlowKPToken::addOb</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)
<anchor xml:id="__interpretor_8cpp_source_1l00851"/>00851 {
<anchor xml:id="__interpretor_8cpp_source_1l00852"/>00852 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00853"/>00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00854"/>00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00858"/>00858 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00859"/>00859 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00860"/>00860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00861"/>00861 }
<anchor xml:id="__interpretor_8cpp_source_1l00862"/>00862 
<anchor xml:id="__interpretor_8cpp_source_1l00863"/><link linkend="_class_flow_k_p_token_1ab25c9519d5389e5abbda0b6b378ef9ad">00863</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_flow_k_p_token_1ab25c9519d5389e5abbda0b6b378ef9ad">FlowKPToken::addCb</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00864"/>00864 {
<anchor xml:id="__interpretor_8cpp_source_1l00865"/>00865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00866"/>00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00867"/>00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00868"/>00868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00870"/>00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00872"/>00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elemRes&#32;=&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elemRes-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_flow_k_p_token_1aa45da600dc21ac842a04f7f7c51ece11">nestedTokens</link>.push_back(elem);
<anchor xml:id="__interpretor_8cpp_source_1l00875"/>00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(elemRes);
<anchor xml:id="__interpretor_8cpp_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00879"/>00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00882"/>00882 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00883"/>00883 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00884"/>00884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00885"/>00885 }
<anchor xml:id="__interpretor_8cpp_source_1l00886"/>00886 
<anchor xml:id="__interpretor_8cpp_source_1l00887"/>00887 
<anchor xml:id="__interpretor_8cpp_source_1l00888"/><link linkend="_class_flow_k_token_1a23ed367b143107ff3085178a6c30dbd4">00888</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_flow_k_token_1a23ed367b143107ff3085178a6c30dbd4">FlowKToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00889"/>00889 {
<anchor xml:id="__interpretor_8cpp_source_1l00890"/>00890 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00891"/>00891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_flow_k_token_1aa97c47a59e43f8984764231f9101bddb">addOb</link>(tl))<link linkend="_class_flow_k_token_1ab92c7a3ef4e07f22d45998b1217a037e">addCb</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00892"/>00892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00893"/>00893 }
<anchor xml:id="__interpretor_8cpp_source_1l00894"/>00894 
<anchor xml:id="__interpretor_8cpp_source_1l00895"/><link linkend="_class_flow_k_p_token_1afb97e689d4a475e1c20b5ae2a6732c62">00895</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_flow_k_p_token_1afb97e689d4a475e1c20b5ae2a6732c62">FlowKPToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00896"/>00896 {
<anchor xml:id="__interpretor_8cpp_source_1l00897"/>00897 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00898"/>00898 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00900"/>00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_flow_k_p_token_1a2a3c69d4e82ac4a76c1f39ea505a64e7">addOb</link>(tl))<link linkend="_class_flow_k_p_token_1ab25c9519d5389e5abbda0b6b378ef9ad">addCb</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00901"/>00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00902"/>00902 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00903"/>00903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00904"/>00904 }
<anchor xml:id="__interpretor_8cpp_source_1l00905"/>00905 
<anchor xml:id="__interpretor_8cpp_source_1l00906"/>00906 
<anchor xml:id="__interpretor_8cpp_source_1l00907"/>00907 
<anchor xml:id="__interpretor_8cpp_source_1l00908"/><link linkend="_class_flow_k_c_token_1aa8e871c7b557b02746ffad16e531a567">00908</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_flow_k_c_token_1aa8e871c7b557b02746ffad16e531a567">FlowKCToken::addCondition</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00909"/>00909 {
<anchor xml:id="__interpretor_8cpp_source_1l00910"/>00910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00912"/>00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8h_1add26727275e38a1c0054c4baa0c2662a">isBooleanToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_flow_k_c_token_1a4f78286ec5e4f3116d6cb152fa75ec92">condition</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00917"/>00917 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00918"/>00918 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00919"/>00919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l00920"/>00920 }
<anchor xml:id="__interpretor_8cpp_source_1l00921"/>00921 
<anchor xml:id="__interpretor_8cpp_source_1l00922"/><link linkend="_class_flow_k_c_token_1aabbf4019cb69b07eb25b11bd070824fc">00922</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_flow_k_c_token_1aabbf4019cb69b07eb25b11bd070824fc">FlowKCToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00923"/>00923 {
<anchor xml:id="__interpretor_8cpp_source_1l00924"/>00924 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00925"/>00925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00926"/>00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_flow_k_c_token_1aa8e871c7b557b02746ffad16e531a567">addCondition</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00927"/>00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_flow_k_p_token_1a2a3c69d4e82ac4a76c1f39ea505a64e7">addOb</link>(tl))<link linkend="_class_flow_k_p_token_1ab25c9519d5389e5abbda0b6b378ef9ad">addCb</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00931"/>00931 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00932"/>00932 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00933"/>00933 }
<anchor xml:id="__interpretor_8cpp_source_1l00934"/>00934 
<anchor xml:id="__interpretor_8cpp_source_1l00935"/>00935 
<anchor xml:id="__interpretor_8cpp_source_1l00936"/>00936 
<anchor xml:id="__interpretor_8cpp_source_1l00937"/>00937 
<anchor xml:id="__interpretor_8cpp_source_1l00938"/><link linkend="_class_main_token_1afe612ccf1e5346401b2fff76d029bbbe">00938</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_main_token_1afe612ccf1e5346401b2fff76d029bbbe">MainToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l00939"/>00939 {
<anchor xml:id="__interpretor_8cpp_source_1l00940"/>00940 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l00941"/>00941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00942"/>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00943"/>00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_flow_k_p_token_1a2a3c69d4e82ac4a76c1f39ea505a64e7">addOb</link>(tl))<link linkend="_class_flow_k_p_token_1ab25c9519d5389e5abbda0b6b378ef9ad">addCb</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00945"/>00945 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00946"/>00946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l00947"/>00947 }
<anchor xml:id="__interpretor_8cpp_source_1l00948"/>00948 
<anchor xml:id="__interpretor_8cpp_source_1l00949"/>00949 
<anchor xml:id="__interpretor_8cpp_source_1l00950"/>00950 
<anchor xml:id="__interpretor_8cpp_source_1l00951"/>00951 
<anchor xml:id="__interpretor_8cpp_source_1l00952"/><link linkend="_class_main_token_1a7903f95481d0b435c6f1f01b17695b40">00952</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_main_token_1a7903f95481d0b435c6f1f01b17695b40">MainToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00953"/>00953 {
<anchor xml:id="__interpretor_8cpp_source_1l00954"/>00954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00955"/>00955 }
<anchor xml:id="__interpretor_8cpp_source_1l00956"/>00956 
<anchor xml:id="__interpretor_8cpp_source_1l00957"/><link linkend="_class_flow_k_p_token_1a81a6a11e3248c8b9387670d0f7915659">00957</link> <link linkend="_class_flow_k_p_token_1a81a6a11e3248c8b9387670d0f7915659">FlowKPToken::FlowKPToken</link>()&#32;:<link linkend="_class_k_p_token">KPToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00958"/>00958 {
<anchor xml:id="__interpretor_8cpp_source_1l00959"/>00959 }
<anchor xml:id="__interpretor_8cpp_source_1l00960"/>00960 &#32;&#32;&#32;&#32;
<anchor xml:id="__interpretor_8cpp_source_1l00961"/>00961 
<anchor xml:id="__interpretor_8cpp_source_1l00962"/>00962 
<anchor xml:id="__interpretor_8cpp_source_1l00963"/><link linkend="_class_flow_k_token_1a1520ab9f311f4f2a5dc06189f7349d07">00963</link> <link linkend="_class_flow_k_token_1a1520ab9f311f4f2a5dc06189f7349d07">FlowKToken::FlowKToken</link>():<link linkend="_class_k_token">KToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00964"/>00964 {
<anchor xml:id="__interpretor_8cpp_source_1l00965"/>00965 }
<anchor xml:id="__interpretor_8cpp_source_1l00966"/>00966 
<anchor xml:id="__interpretor_8cpp_source_1l00967"/>00967 
<anchor xml:id="__interpretor_8cpp_source_1l00968"/>00968 
<anchor xml:id="__interpretor_8cpp_source_1l00969"/>00969 
<anchor xml:id="__interpretor_8cpp_source_1l00970"/><link linkend="_class_token_result_1ac49cd5f7a236cd78ac5633df0144e54b">00970</link> <link linkend="_class_token_result_1ac49cd5f7a236cd78ac5633df0144e54b">TokenResult::TokenResult</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00971"/>00971 {
<anchor xml:id="__interpretor_8cpp_source_1l00972"/>00972 &#32;&#32;&#32;&#32;<link linkend="_class_token_result_1a9de92354db253e5cc26c490d3768eb6c">varTable</link>&#32;=&#32;std::make_shared&lt;std::map&lt;std::string,&#32;DataType&gt;&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l00973"/>00973 }
<anchor xml:id="__interpretor_8cpp_source_1l00974"/>00974 
<anchor xml:id="__interpretor_8cpp_source_1l00975"/><link linkend="_class_token_result_1a6219f0d8d1e1aeca36b204c41c739f28">00975</link> <link linkend="_class_token_result_1ac49cd5f7a236cd78ac5633df0144e54b">TokenResult::TokenResult</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;l):<link linkend="_class_token_result">TokenResult</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00976"/>00976 {
<anchor xml:id="__interpretor_8cpp_source_1l00977"/>00977 }
<anchor xml:id="__interpretor_8cpp_source_1l00978"/>00978 
<anchor xml:id="__interpretor_8cpp_source_1l00979"/><link linkend="_class_token_result_1a1b90cbf9042a502868ffbb657399f5bf">00979</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_token_result_1a1b90cbf9042a502868ffbb657399f5bf">TokenResult::showErrors</link>()
<anchor xml:id="__interpretor_8cpp_source_1l00980"/>00980 {
<anchor xml:id="__interpretor_8cpp_source_1l00981"/>00981 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;error&#32;:&#32;<link linkend="_class_token_result_1afa05387cebf6ba69bfbd086155a63d8d">listErrors</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(error)error-&gt;showError();
<anchor xml:id="__interpretor_8cpp_source_1l00983"/>00983 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l00984"/>00984 }
<anchor xml:id="__interpretor_8cpp_source_1l00985"/>00985 
<anchor xml:id="__interpretor_8cpp_source_1l00986"/><link linkend="_class_token_result_1acce057f14c7bd3ccab85dc021b709b50">00986</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_token_result_1acce057f14c7bd3ccab85dc021b709b50">TokenResult::addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;value,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45a">ErrorType</link>&#32;et,&#32;<emphasis role="keywordtype">int</emphasis>&#32;l)
<anchor xml:id="__interpretor_8cpp_source_1l00987"/>00987 {
<anchor xml:id="__interpretor_8cpp_source_1l00988"/>00988 &#32;&#32;&#32;&#32;<link linkend="_class_token_result_1afa05387cebf6ba69bfbd086155a63d8d">listErrors</link>.push_back(std::make_shared&lt;Error&gt;(value,&#32;et,&#32;l));
<anchor xml:id="__interpretor_8cpp_source_1l00989"/>00989 }
<anchor xml:id="__interpretor_8cpp_source_1l00990"/>00990 
<anchor xml:id="__interpretor_8cpp_source_1l00991"/><link linkend="_class_token_result_1a32d99327e29ff65c4af36d143a12c4c5">00991</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_token_result_1acce057f14c7bd3ccab85dc021b709b50">TokenResult::addError</link>(<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;type,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45a">ErrorType</link>&#32;et,<emphasis role="keywordtype">int</emphasis>&#32;l)
<anchor xml:id="__interpretor_8cpp_source_1l00992"/>00992 {
<anchor xml:id="__interpretor_8cpp_source_1l00993"/>00993 &#32;&#32;&#32;&#32;<link linkend="_class_token_result_1afa05387cebf6ba69bfbd086155a63d8d">listErrors</link>.push_back(std::make_shared&lt;Error&gt;(type,et,l));
<anchor xml:id="__interpretor_8cpp_source_1l00994"/>00994 }
<anchor xml:id="__interpretor_8cpp_source_1l00995"/>00995 
<anchor xml:id="__interpretor_8cpp_source_1l00996"/><link linkend="_class_token_result_1a539fcf21f614de453f07985bbd3dec30">00996</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_token_result_1acce057f14c7bd3ccab85dc021b709b50">TokenResult::addError</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&#32;&lt;&#32;TokenResult&gt;&amp;&#32;nestedToken)
<anchor xml:id="__interpretor_8cpp_source_1l00997"/>00997 {
<anchor xml:id="__interpretor_8cpp_source_1l00998"/>00998 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nestedToken)&#32;<link linkend="_class_token_result_1afa05387cebf6ba69bfbd086155a63d8d">listErrors</link>.insert(<link linkend="_class_token_result_1afa05387cebf6ba69bfbd086155a63d8d">listErrors</link>.end(),&#32;nestedToken-&gt;listErrors.begin(),&#32;nestedToken-&gt;listErrors.end());
<anchor xml:id="__interpretor_8cpp_source_1l00999"/>00999 }
<anchor xml:id="__interpretor_8cpp_source_1l01000"/>01000 
<anchor xml:id="__interpretor_8cpp_source_1l01001"/><link linkend="_class_token_result_1acfc405b7a0e288b9463f24fd105931cf">01001</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_token_result_1acfc405b7a0e288b9463f24fd105931cf">TokenResult::addVar</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&amp;&#32;type)
<anchor xml:id="__interpretor_8cpp_source_1l01002"/>01002 {
<anchor xml:id="__interpretor_8cpp_source_1l01003"/>01003 &#32;&#32;&#32;&#32;<link linkend="_class_token_result_1a9de92354db253e5cc26c490d3768eb6c">varTable</link>-&gt;insert(std::pair&lt;std::string,&#32;DataType&gt;(name,&#32;type));
<anchor xml:id="__interpretor_8cpp_source_1l01004"/>01004 }
<anchor xml:id="__interpretor_8cpp_source_1l01005"/>01005 
<anchor xml:id="__interpretor_8cpp_source_1l01006"/><link linkend="_class_token_result_1a40eab1e11abedf2ad760a9095579573c">01006</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_token_result_1a40eab1e11abedf2ad760a9095579573c">TokenResult::isSuccess</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01007"/>01007 {
<anchor xml:id="__interpretor_8cpp_source_1l01008"/>01008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_result_1afa05387cebf6ba69bfbd086155a63d8d">listErrors</link>.empty();
<anchor xml:id="__interpretor_8cpp_source_1l01009"/>01009 }
<anchor xml:id="__interpretor_8cpp_source_1l01010"/>01010 
<anchor xml:id="__interpretor_8cpp_source_1l01011"/>01011 
<anchor xml:id="__interpretor_8cpp_source_1l01012"/>01012 
<anchor xml:id="__interpretor_8cpp_source_1l01013"/><link linkend="_class_k_p_token_1abb5c3e0fd2d70e45246277e7b4e6229f">01013</link> <link linkend="_class_k_p_token_1abb5c3e0fd2d70e45246277e7b4e6229f">KPToken::KPToken</link>():<link linkend="_class_k_token">KToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01014"/>01014 {
<anchor xml:id="__interpretor_8cpp_source_1l01015"/>01015 }
<anchor xml:id="__interpretor_8cpp_source_1l01016"/>01016 
<anchor xml:id="__interpretor_8cpp_source_1l01017"/>01017 
<anchor xml:id="__interpretor_8cpp_source_1l01018"/>01018 
<anchor xml:id="__interpretor_8cpp_source_1l01019"/>01019 
<anchor xml:id="__interpretor_8cpp_source_1l01020"/>01020 
<anchor xml:id="__interpretor_8cpp_source_1l01021"/><link linkend="_class_flow_k_c_token_1a49224042869042f190daaea38ac73ad1">01021</link> <link linkend="_class_flow_k_c_token_1a49224042869042f190daaea38ac73ad1">FlowKCToken::FlowKCToken</link>():<link linkend="_class_flow_k_p_token">FlowKPToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01022"/>01022 {
<anchor xml:id="__interpretor_8cpp_source_1l01023"/>01023 
<anchor xml:id="__interpretor_8cpp_source_1l01024"/>01024 }
<anchor xml:id="__interpretor_8cpp_source_1l01025"/>01025 
<anchor xml:id="__interpretor_8cpp_source_1l01026"/><link linkend="_class_token_1aa3c5868ba4115f3189df6b2ac5b36f39">01026</link> <link linkend="_class_token_1aa3c5868ba4115f3189df6b2ac5b36f39">Token::Token</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01027"/>01027 {
<anchor xml:id="__interpretor_8cpp_source_1l01028"/>01028 
<anchor xml:id="__interpretor_8cpp_source_1l01029"/>01029 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca94c8aa2452bccd82ee129b46f7c4be79">TokenVALUE::TOKEN</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01030"/>01030 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;<emphasis role="stringliteral">&quot;Token&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01031"/>01031 }
<anchor xml:id="__interpretor_8cpp_source_1l01032"/>01032 
<anchor xml:id="__interpretor_8cpp_source_1l01033"/><link linkend="_class_error_1aca339d00ad8481fb4c184f0ece42698b">01033</link> <link linkend="_class_error_1aca339d00ad8481fb4c184f0ece42698b">Error::Error</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01034"/>01034 {
<anchor xml:id="__interpretor_8cpp_source_1l01035"/>01035 }
<anchor xml:id="__interpretor_8cpp_source_1l01036"/>01036 
<anchor xml:id="__interpretor_8cpp_source_1l01037"/><link linkend="_class_error_1a41fa314b97f7f78626b09b7163bb453e">01037</link> <link linkend="_class_error_1aca339d00ad8481fb4c184f0ece42698b">Error::Error</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;ev,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45a">ErrorType</link>&#32;et,&#32;<emphasis role="keywordtype">int</emphasis>&#32;el):<link linkend="_class_error">Error</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01038"/>01038 {
<anchor xml:id="__interpretor_8cpp_source_1l01039"/>01039 &#32;&#32;&#32;&#32;<link linkend="_class_error_1a435fcafbddc8eb133017119c555a2ed0">errorType</link>&#32;=&#32;et;
<anchor xml:id="__interpretor_8cpp_source_1l01040"/>01040 &#32;&#32;&#32;&#32;<link linkend="_class_error_1ad04a7a6376aba5b6337b3865648ef8ba">errorValue</link>&#32;=&#32;ev;
<anchor xml:id="__interpretor_8cpp_source_1l01041"/>01041 &#32;&#32;&#32;&#32;<link linkend="_class_error_1acbea8a404e63977dc75c9f5e615fabe5">errorLine</link>&#32;=&#32;el;
<anchor xml:id="__interpretor_8cpp_source_1l01042"/>01042 &#32;&#32;&#32;&#32;<link linkend="_class_error_1a69186124b4acc75df505345de7b934a1">dType</link>&#32;=&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ab50339a10e1de285ac99d4c3990b8693">DataType::NONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01043"/>01043 }
<anchor xml:id="__interpretor_8cpp_source_1l01044"/>01044 
<anchor xml:id="__interpretor_8cpp_source_1l01045"/><link linkend="_class_error_1adaabf01080d2a47e52644a9c007cf341">01045</link> <link linkend="_class_error_1aca339d00ad8481fb4c184f0ece42698b">Error::Error</link>(<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;dType,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45a">ErrorType</link>&#32;et,&#32;<emphasis role="keywordtype">int</emphasis>&#32;el)
<anchor xml:id="__interpretor_8cpp_source_1l01046"/>01046 {
<anchor xml:id="__interpretor_8cpp_source_1l01047"/>01047 &#32;&#32;&#32;&#32;<link linkend="_class_error_1a435fcafbddc8eb133017119c555a2ed0">errorType</link>&#32;=&#32;et;
<anchor xml:id="__interpretor_8cpp_source_1l01048"/>01048 &#32;&#32;&#32;&#32;<link linkend="_class_error_1acbea8a404e63977dc75c9f5e615fabe5">errorLine</link>&#32;=&#32;el;
<anchor xml:id="__interpretor_8cpp_source_1l01049"/>01049 &#32;&#32;&#32;&#32;this-&gt;dType&#32;=&#32;<link linkend="_class_error_1a69186124b4acc75df505345de7b934a1">dType</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01050"/>01050 }
<anchor xml:id="__interpretor_8cpp_source_1l01051"/>01051 
<anchor xml:id="__interpretor_8cpp_source_1l01052"/><link linkend="_class_error_1a690b81205a544b44f91746f086b752d2">01052</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_error_1a690b81205a544b44f91746f086b752d2">Error::showError</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01053"/>01053 {
<anchor xml:id="__interpretor_8cpp_source_1l01054"/>01054 }
<anchor xml:id="__interpretor_8cpp_source_1l01055"/>01055 
<anchor xml:id="__interpretor_8cpp_source_1l01056"/><link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">01056</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">Token::updateRes</link>(std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01057"/>01057 {
<anchor xml:id="__interpretor_8cpp_source_1l01058"/>01058 &#32;&#32;&#32;&#32;this-&gt;tRes&#32;=&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01059"/>01059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01060"/>01060 }
<anchor xml:id="__interpretor_8cpp_source_1l01061"/>01061 
<anchor xml:id="__interpretor_8cpp_source_1l01062"/><link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">01062</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">Token::addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46c">TokenVALUE</link>&#32;value,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45a">ErrorType</link>&#32;et)
<anchor xml:id="__interpretor_8cpp_source_1l01063"/>01063 {
<anchor xml:id="__interpretor_8cpp_source_1l01064"/>01064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>)<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;addError(value,&#32;et,&#32;<link linkend="_class_token_1a4b96c2a31d7c374fd2bd1986794f80dd">line</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01065"/>01065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01066"/>01066 }
<anchor xml:id="__interpretor_8cpp_source_1l01067"/>01067 
<anchor xml:id="__interpretor_8cpp_source_1l01068"/><link linkend="_class_token_1a97d36ac6f4a4d06cdf931f4240c6472c">01068</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">Token::addError</link>(<emphasis role="keyword">const</emphasis>&#32;std::shared_ptr&lt;TokenResult&gt;&amp;&#32;tr)
<anchor xml:id="__interpretor_8cpp_source_1l01069"/>01069 {
<anchor xml:id="__interpretor_8cpp_source_1l01070"/>01070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>)<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;addError(tr);
<anchor xml:id="__interpretor_8cpp_source_1l01071"/>01071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01072"/>01072 }
<anchor xml:id="__interpretor_8cpp_source_1l01073"/>01073 
<anchor xml:id="__interpretor_8cpp_source_1l01074"/><link linkend="_class_token_1a342eebc35a823997d3fe2a6c66f9cbe1">01074</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">Token::addError</link>(<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;type,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45a">ErrorType</link>&#32;et)
<anchor xml:id="__interpretor_8cpp_source_1l01075"/>01075 {
<anchor xml:id="__interpretor_8cpp_source_1l01076"/>01076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>)<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;addError(type,et,<link linkend="_class_token_1a4b96c2a31d7c374fd2bd1986794f80dd">line</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01077"/>01077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01078"/>01078 }
<anchor xml:id="__interpretor_8cpp_source_1l01079"/>01079 
<anchor xml:id="__interpretor_8cpp_source_1l01080"/><link linkend="_class_token_1a41ebddd1a5ac42b80e3bd916e1f8e472">01080</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_token_1a41ebddd1a5ac42b80e3bd916e1f8e472">Token::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01081"/>01081 {
<anchor xml:id="__interpretor_8cpp_source_1l01082"/>01082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ab50339a10e1de285ac99d4c3990b8693">DataType::NONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01083"/>01083 }
<anchor xml:id="__interpretor_8cpp_source_1l01084"/>01084 
<anchor xml:id="__interpretor_8cpp_source_1l01085"/><link linkend="_class_token_1ad692018745d72ed2bc87f1f6a8dbf156">01085</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_token_1ad692018745d72ed2bc87f1f6a8dbf156">Token::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01086"/>01086 {
<anchor xml:id="__interpretor_8cpp_source_1l01087"/>01087 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01088"/>01088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01089"/>01089 }
<anchor xml:id="__interpretor_8cpp_source_1l01090"/>01090 
<anchor xml:id="__interpretor_8cpp_source_1l01091"/><link linkend="_class_token_1aea759b8376bff558791fdc1f2f70f4fb">01091</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_token_1aea759b8376bff558791fdc1f2f70f4fb">Token::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01092"/>01092 {
<anchor xml:id="__interpretor_8cpp_source_1l01093"/>01093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01094"/>01094 }
<anchor xml:id="__interpretor_8cpp_source_1l01095"/>01095 
<anchor xml:id="__interpretor_8cpp_source_1l01096"/><link linkend="_class_interpretor_1ae1c703a0f32d7f063dd5f46f89018255">01096</link> <link linkend="_class_interpretor_1ae1c703a0f32d7f063dd5f46f89018255">Interpretor::Interpretor</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01097"/>01097 {
<anchor xml:id="__interpretor_8cpp_source_1l01098"/>01098 }
<anchor xml:id="__interpretor_8cpp_source_1l01099"/>01099 
<anchor xml:id="__interpretor_8cpp_source_1l01100"/><link linkend="_class_interpretor_1affe2b72c181142948c20980f1449a263">01100</link> <link linkend="_class_interpretor_1ae1c703a0f32d7f063dd5f46f89018255">Interpretor::Interpretor</link>(std::string&#32;folder)
<anchor xml:id="__interpretor_8cpp_source_1l01101"/>01101 {
<anchor xml:id="__interpretor_8cpp_source_1l01102"/>01102 &#32;&#32;&#32;&#32;<link linkend="_class_interpretor_1a84426d5bbc8f8cabc1a21458a9eb04ad">ActivityFolder</link>&#32;=&#32;folder;
<anchor xml:id="__interpretor_8cpp_source_1l01103"/>01103 }
<anchor xml:id="__interpretor_8cpp_source_1l01104"/>01104 
<anchor xml:id="__interpretor_8cpp_source_1l01105"/><link linkend="_class_interpretor_1a9592d800744d237aea6a91dbf44bdb80">01105</link> <link linkend="_class_interpretor_1a9592d800744d237aea6a91dbf44bdb80">Interpretor::~Interpretor</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01106"/>01106 {
<anchor xml:id="__interpretor_8cpp_source_1l01107"/>01107 }
<anchor xml:id="__interpretor_8cpp_source_1l01108"/>01108 
<anchor xml:id="__interpretor_8cpp_source_1l01109"/><link linkend="_class_interpretor_1a860d7cc665a3202f6f462dc1293fe5e6">01109</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_interpretor_1a860d7cc665a3202f6f462dc1293fe5e6">Interpretor::readActivityFile</link>(std::string&#32;ActivityName)
<anchor xml:id="__interpretor_8cpp_source_1l01110"/>01110 {
<anchor xml:id="__interpretor_8cpp_source_1l01111"/>01111 &#32;&#32;&#32;&#32;<link linkend="_class_interpretor_1aa49f073000719629567f5563fc487836">createMainTag</link>(<link linkend="_class_interpretor_1a61ecb8df4ca776f58573955153f1b842">copyActivity</link>(<link linkend="_class_interpretor_1a84426d5bbc8f8cabc1a21458a9eb04ad">ActivityFolder</link>&#32;/&#32;ActivityName));
<anchor xml:id="__interpretor_8cpp_source_1l01112"/>01112 }
<anchor xml:id="__interpretor_8cpp_source_1l01113"/>01113 
<anchor xml:id="__interpretor_8cpp_source_1l01114"/><link linkend="_class_interpretor_1a61ecb8df4ca776f58573955153f1b842">01114</link> std::string&#32;<link linkend="_class_interpretor_1a61ecb8df4ca776f58573955153f1b842">Interpretor::copyActivity</link>(std::filesystem::path&#32;ActivityName)
<anchor xml:id="__interpretor_8cpp_source_1l01115"/>01115 {
<anchor xml:id="__interpretor_8cpp_source_1l01116"/>01116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(ActivityName.string());
<anchor xml:id="__interpretor_8cpp_source_1l01117"/>01117 }
<anchor xml:id="__interpretor_8cpp_source_1l01118"/>01118 
<anchor xml:id="__interpretor_8cpp_source_1l01119"/><link linkend="_class_interpretor_1a51befa58f2bca099b38ee074be359f3d">01119</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_interpretor_1a51befa58f2bca099b38ee074be359f3d">Interpretor::getActivityTag</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01120"/>01120 {
<anchor xml:id="__interpretor_8cpp_source_1l01121"/>01121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_interpretor_1a9f3b79e228492d9b54ab4f96dc068bac">mainTag</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01122"/>01122 }
<anchor xml:id="__interpretor_8cpp_source_1l01123"/>01123 
<anchor xml:id="__interpretor_8cpp_source_1l01124"/><link linkend="_class_interpretor_1aa49f073000719629567f5563fc487836">01124</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_interpretor_1aa49f073000719629567f5563fc487836">Interpretor::createMainTag</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__interpretor_8cpp_source_1l01125"/>01125 {
<anchor xml:id="__interpretor_8cpp_source_1l01126"/>01126 &#32;&#32;&#32;&#32;<link linkend="_class_interpretor_1ab6858c07200eaab9b1060663149aefee">lex</link>.<link linkend="_class_lexer_1ab0ca8b5adc1af3cdec4855fba11491c1">extractTokens</link>(text);&#32;
<anchor xml:id="__interpretor_8cpp_source_1l01127"/>01127 &#32;&#32;&#32;&#32;std::string&#32;allTokens&#32;=&#32;<link linkend="_class_interpretor_1ab6858c07200eaab9b1060663149aefee">lex</link>.<link linkend="_class_lexer_1a5a008a99eb5bc34590b62a99ea9065c3">showAllTokens</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01128"/>01128 &#32;&#32;&#32;&#32;<link linkend="_class_interpretor_1a4cd759828967910afe67c7f4ddd1bbda">tl</link>&#32;=&#32;<link linkend="_class_iterator_list">IteratorList</link>(<link linkend="_class_interpretor_1ab6858c07200eaab9b1060663149aefee">lex</link>.<link linkend="_class_lexer_1a5147254cee0022d532a50e683a3fa688">listTokens</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01129"/>01129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_interpretor_1a4cd759828967910afe67c7f4ddd1bbda">tl</link>.<link linkend="_class_iterator_list_1abeee71ef05dfd58e3031ed33b521f2bc">nextTokens</link>.empty())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01130"/>01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_interpretor_1a6047e27b007f05c73a917a1acbb9e4e6">mainToken</link>&#32;=&#32;std::dynamic_pointer_cast&lt;MainToken&gt;(<link linkend="_class_interpretor_1a4cd759828967910afe67c7f4ddd1bbda">tl</link>.<link linkend="_class_iterator_list_1abeee71ef05dfd58e3031ed33b521f2bc">nextTokens</link>.front());
<anchor xml:id="__interpretor_8cpp_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_interpretor_1a4cd759828967910afe67c7f4ddd1bbda">tl</link>.<link linkend="_class_iterator_list_1abeee71ef05dfd58e3031ed33b521f2bc">nextTokens</link>.size()&#32;&gt;&#32;1)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_interpretor_1a6047e27b007f05c73a917a1acbb9e4e6">mainToken</link>)<link linkend="_class_interpretor_1a822ce37652e007c938ad45edc3e7a1bb">tr</link>=<link linkend="_class_interpretor_1a6047e27b007f05c73a917a1acbb9e4e6">mainToken</link>-&gt;addTokens(<link linkend="_class_interpretor_1a4cd759828967910afe67c7f4ddd1bbda">tl</link>,&#32;<link linkend="_class_interpretor_1a6047e27b007f05c73a917a1acbb9e4e6">mainToken</link>-&gt;tRes);
<anchor xml:id="__interpretor_8cpp_source_1l01133"/>01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01134"/>01134 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01135"/>01135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_interpretor_1a822ce37652e007c938ad45edc3e7a1bb">tr</link>-&gt;isSuccess())<link linkend="_class_interpretor_1a9f3b79e228492d9b54ab4f96dc068bac">mainTag</link>&#32;=&#32;std::dynamic_pointer_cast&lt;MainTag&gt;(<link linkend="_class_interpretor_1a6047e27b007f05c73a917a1acbb9e4e6">mainToken</link>-&gt;execute());
<anchor xml:id="__interpretor_8cpp_source_1l01136"/>01136 
<anchor xml:id="__interpretor_8cpp_source_1l01137"/>01137 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;1;
<anchor xml:id="__interpretor_8cpp_source_1l01138"/>01138 }
<anchor xml:id="__interpretor_8cpp_source_1l01139"/>01139 
<anchor xml:id="__interpretor_8cpp_source_1l01140"/><link linkend="_class_do_loop_token_1adb97a09bf62c4d496cd2d693c9ed3cf9">01140</link> <link linkend="_class_do_loop_token_1adb97a09bf62c4d496cd2d693c9ed3cf9">DoLoopToken::DoLoopToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01141"/>01141 {
<anchor xml:id="__interpretor_8cpp_source_1l01142"/>01142 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca94682254f1edc02f9576916290a5fddd">TokenVALUE::DOLOOP</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01143"/>01143 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;doloopK;
<anchor xml:id="__interpretor_8cpp_source_1l01144"/>01144 }
<anchor xml:id="__interpretor_8cpp_source_1l01145"/>01145 
<anchor xml:id="__interpretor_8cpp_source_1l01146"/><link linkend="_class_do_loop_token_1a7990e235e81ba0ffe31c5fa9af52ac92">01146</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_do_loop_token_1a7990e235e81ba0ffe31c5fa9af52ac92">DoLoopToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01147"/>01147 {
<anchor xml:id="__interpretor_8cpp_source_1l01148"/>01148 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01149"/>01149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01150"/>01150 }
<anchor xml:id="__interpretor_8cpp_source_1l01151"/>01151 
<anchor xml:id="__interpretor_8cpp_source_1l01152"/><link linkend="_class_do_loop_token_1a98c55d62059c3f6d6956e6c52a249ee8">01152</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_do_loop_token_1a98c55d62059c3f6d6956e6c52a249ee8">DoLoopToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01153"/>01153 {
<anchor xml:id="__interpretor_8cpp_source_1l01154"/>01154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01155"/>01155 }
<anchor xml:id="__interpretor_8cpp_source_1l01156"/>01156 
<anchor xml:id="__interpretor_8cpp_source_1l01157"/><link linkend="_class_if_token_1acba71a2f073560d50a15417ce40b739c">01157</link> <link linkend="_class_if_token_1acba71a2f073560d50a15417ce40b739c">IfToken::IfToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01158"/>01158 {
<anchor xml:id="__interpretor_8cpp_source_1l01159"/>01159 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cade6ee2b5d856295add4d5e3631fbfb93">TokenVALUE::IF</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01160"/>01160 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;ifK;
<anchor xml:id="__interpretor_8cpp_source_1l01161"/>01161 }
<anchor xml:id="__interpretor_8cpp_source_1l01162"/>01162 
<anchor xml:id="__interpretor_8cpp_source_1l01163"/><link linkend="_class_if_token_1a01465e20c31d5d3bdbc0248209f4c3f4">01163</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_if_token_1a01465e20c31d5d3bdbc0248209f4c3f4">IfToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01164"/>01164 {
<anchor xml:id="__interpretor_8cpp_source_1l01165"/>01165 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01166"/>01166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01167"/>01167 }
<anchor xml:id="__interpretor_8cpp_source_1l01168"/>01168 
<anchor xml:id="__interpretor_8cpp_source_1l01169"/><link linkend="_class_if_token_1ac6a6d93dfcadc5348593bcc2350834f5">01169</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_if_token_1ac6a6d93dfcadc5348593bcc2350834f5">IfToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01170"/>01170 {
<anchor xml:id="__interpretor_8cpp_source_1l01171"/>01171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01172"/>01172 }
<anchor xml:id="__interpretor_8cpp_source_1l01173"/>01173 
<anchor xml:id="__interpretor_8cpp_source_1l01174"/><link linkend="_class_else_token_1a41f4dc1b51e7bab3d583b0684b387879">01174</link> <link linkend="_class_else_token_1a41f4dc1b51e7bab3d583b0684b387879">ElseToken::ElseToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01175"/>01175 {
<anchor xml:id="__interpretor_8cpp_source_1l01176"/>01176 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca778537b0acce06229cb78d5f72c907ab">TokenVALUE::ELSE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01177"/>01177 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;elseK;
<anchor xml:id="__interpretor_8cpp_source_1l01178"/>01178 }
<anchor xml:id="__interpretor_8cpp_source_1l01179"/>01179 
<anchor xml:id="__interpretor_8cpp_source_1l01180"/><link linkend="_class_else_token_1a04c498b5b90ae54baec24cff3c93fa84">01180</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_else_token_1a04c498b5b90ae54baec24cff3c93fa84">ElseToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01181"/>01181 {
<anchor xml:id="__interpretor_8cpp_source_1l01182"/>01182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01183"/>01183 }
<anchor xml:id="__interpretor_8cpp_source_1l01184"/>01184 
<anchor xml:id="__interpretor_8cpp_source_1l01185"/><link linkend="_class_elif_token_1a877b2c5a0fc06e8d50b0a84adf0a848b">01185</link> <link linkend="_class_elif_token_1a877b2c5a0fc06e8d50b0a84adf0a848b">ElifToken::ElifToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01186"/>01186 {
<anchor xml:id="__interpretor_8cpp_source_1l01187"/>01187 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca722462c878f454d0872804374ef77c95">TokenVALUE::ELIF</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01188"/>01188 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;elifK;
<anchor xml:id="__interpretor_8cpp_source_1l01189"/>01189 }
<anchor xml:id="__interpretor_8cpp_source_1l01190"/>01190 
<anchor xml:id="__interpretor_8cpp_source_1l01191"/><link linkend="_class_elif_token_1a9b61f58f6728377b662938a34c9edcf9">01191</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_elif_token_1a9b61f58f6728377b662938a34c9edcf9">ElifToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01192"/>01192 {
<anchor xml:id="__interpretor_8cpp_source_1l01193"/>01193 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01194"/>01194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01195"/>01195 }
<anchor xml:id="__interpretor_8cpp_source_1l01196"/>01196 
<anchor xml:id="__interpretor_8cpp_source_1l01197"/><link linkend="_class_elif_token_1a7d4b264b0c023e44f7edc2b5781482f7">01197</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_elif_token_1a7d4b264b0c023e44f7edc2b5781482f7">ElifToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01198"/>01198 {
<anchor xml:id="__interpretor_8cpp_source_1l01199"/>01199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01200"/>01200 }
<anchor xml:id="__interpretor_8cpp_source_1l01201"/>01201 
<anchor xml:id="__interpretor_8cpp_source_1l01202"/><link linkend="_class_loop_token_1a461d7fb8e702cd1af27236ef796c1491">01202</link> <link linkend="_class_loop_token_1a461d7fb8e702cd1af27236ef796c1491">LoopToken::LoopToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01203"/>01203 {
<anchor xml:id="__interpretor_8cpp_source_1l01204"/>01204 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca9159b3578e4e1eb31ffdf90acd6f6e40">TokenVALUE::LOOP</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01205"/>01205 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;loopK;
<anchor xml:id="__interpretor_8cpp_source_1l01206"/>01206 }
<anchor xml:id="__interpretor_8cpp_source_1l01207"/>01207 
<anchor xml:id="__interpretor_8cpp_source_1l01208"/><link linkend="_class_loop_token_1aaf2ed4676012f15ef2b551241f2957aa">01208</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_loop_token_1aaf2ed4676012f15ef2b551241f2957aa">LoopToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01209"/>01209 {
<anchor xml:id="__interpretor_8cpp_source_1l01210"/>01210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01211"/>01211 }
<anchor xml:id="__interpretor_8cpp_source_1l01212"/>01212 
<anchor xml:id="__interpretor_8cpp_source_1l01213"/><link linkend="_class_bool_token_1a230b4c663f336dfe394307a4f5eaf4c9">01213</link> <link linkend="_class_bool_token_1a230b4c663f336dfe394307a4f5eaf4c9">BoolToken::BoolToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01214"/>01214 {
<anchor xml:id="__interpretor_8cpp_source_1l01215"/>01215 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01216"/>01216 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;boolK;
<anchor xml:id="__interpretor_8cpp_source_1l01217"/>01217 }
<anchor xml:id="__interpretor_8cpp_source_1l01218"/>01218 
<anchor xml:id="__interpretor_8cpp_source_1l01219"/><link linkend="_class_bool_token_1ac36af9eaf07bd532297437ee0290da30">01219</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_bool_token_1ac36af9eaf07bd532297437ee0290da30">BoolToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01220"/>01220 {
<anchor xml:id="__interpretor_8cpp_source_1l01221"/>01221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01222"/>01222 }
<anchor xml:id="__interpretor_8cpp_source_1l01223"/>01223 
<anchor xml:id="__interpretor_8cpp_source_1l01224"/><link linkend="_class_bool_token_1ae9094e6512fb1f196d3ee7b456556e69">01224</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_bool_token_1ae9094e6512fb1f196d3ee7b456556e69">BoolToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01225"/>01225 {
<anchor xml:id="__interpretor_8cpp_source_1l01226"/>01226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01227"/>01227 }
<anchor xml:id="__interpretor_8cpp_source_1l01228"/>01228 
<anchor xml:id="__interpretor_8cpp_source_1l01229"/><link linkend="_class_wait_token_1aba6c9c4c6466b72c1ff3a545feb10050">01229</link> <link linkend="_class_wait_token_1aba6c9c4c6466b72c1ff3a545feb10050">WaitToken::WaitToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01230"/>01230 {
<anchor xml:id="__interpretor_8cpp_source_1l01231"/>01231 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad5cc6a0064b5c25ba37826aa3fda910c">TokenVALUE::WAIT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01232"/>01232 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;waitK;
<anchor xml:id="__interpretor_8cpp_source_1l01233"/>01233 }
<anchor xml:id="__interpretor_8cpp_source_1l01234"/>01234 
<anchor xml:id="__interpretor_8cpp_source_1l01235"/>01235 
<anchor xml:id="__interpretor_8cpp_source_1l01236"/>01236 
<anchor xml:id="__interpretor_8cpp_source_1l01237"/><link linkend="_class_wait_token_1afdc303d17be95afa35bbee3b36936303">01237</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_wait_token_1afdc303d17be95afa35bbee3b36936303">WaitToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01238"/>01238 {
<anchor xml:id="__interpretor_8cpp_source_1l01239"/>01239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01240"/>01240 }
<anchor xml:id="__interpretor_8cpp_source_1l01241"/>01241 
<anchor xml:id="__interpretor_8cpp_source_1l01242"/><link linkend="_class_and_token_1ad19dda0405dae7acad6ff7d1276b55d0">01242</link> <link linkend="_class_and_token_1ad19dda0405dae7acad6ff7d1276b55d0">AndToken::AndToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01243"/>01243 {
<anchor xml:id="__interpretor_8cpp_source_1l01244"/>01244 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca558ffc8f5770d8e4f95f51d822685532">TokenVALUE::AND</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01245"/>01245 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;andK;
<anchor xml:id="__interpretor_8cpp_source_1l01246"/>01246 }
<anchor xml:id="__interpretor_8cpp_source_1l01247"/>01247 
<anchor xml:id="__interpretor_8cpp_source_1l01248"/><link linkend="_class_and_token_1a42000f1686aca243ba7f5092fec77887">01248</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_and_token_1a42000f1686aca243ba7f5092fec77887">AndToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01249"/>01249 {
<anchor xml:id="__interpretor_8cpp_source_1l01250"/>01250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01251"/>01251 }
<anchor xml:id="__interpretor_8cpp_source_1l01252"/>01252 
<anchor xml:id="__interpretor_8cpp_source_1l01253"/><link linkend="_class_and_token_1a70df2a2057b7d0c554fe086df11467cc">01253</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_and_token_1a70df2a2057b7d0c554fe086df11467cc">AndToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01254"/>01254 {
<anchor xml:id="__interpretor_8cpp_source_1l01255"/>01255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustComma&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01256"/>01256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01257"/>01257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01258"/>01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mustComma)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01259"/>01259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">addComma</link>(tl))<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01260"/>01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01261"/>01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01262"/>01262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01263"/>01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1abfaf0794a6bff6410b3ec7aa59251549">isBoolToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01264"/>01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01265"/>01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01266"/>01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_and_token_1a2383bb4ae73bc0de91169bcb3a7c8413">listBoolToken</link>.push_back(elem);
<anchor xml:id="__interpretor_8cpp_source_1l01267"/>01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01268"/>01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01269"/>01269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01270"/>01270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01271"/>01271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01272"/>01272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01273"/>01273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01274"/>01274 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01275"/>01275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01276"/>01276 }
<anchor xml:id="__interpretor_8cpp_source_1l01277"/>01277 
<anchor xml:id="__interpretor_8cpp_source_1l01278"/><link linkend="_class_or_token_1a9be27028cfb5166cbd2f2fabea9b9800">01278</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_or_token_1a9be27028cfb5166cbd2f2fabea9b9800">OrToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01279"/>01279 {
<anchor xml:id="__interpretor_8cpp_source_1l01280"/>01280 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustComma&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01281"/>01281 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01282"/>01282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01283"/>01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01284"/>01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mustComma)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01285"/>01285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">addComma</link>(tl))<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01286"/>01286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01287"/>01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01288"/>01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1abfaf0794a6bff6410b3ec7aa59251549">isBoolToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01289"/>01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01290"/>01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01291"/>01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_or_token_1abda4c3f969be77557e76a56776ac3b4f">listBoolToken</link>.push_back(elem);
<anchor xml:id="__interpretor_8cpp_source_1l01292"/>01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01293"/>01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01294"/>01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01295"/>01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01296"/>01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01297"/>01297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01298"/>01298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01299"/>01299 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01300"/>01300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01301"/>01301 }
<anchor xml:id="__interpretor_8cpp_source_1l01302"/><link linkend="_class_not_token_1a339f5cf0de259706aa841d25abe8ac9e">01302</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_not_token_1a339f5cf0de259706aa841d25abe8ac9e">NotToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01303"/>01303 {
<anchor xml:id="__interpretor_8cpp_source_1l01304"/>01304 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;addedCond&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01305"/>01305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01306"/>01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01307"/>01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addedCond)<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01308"/>01308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1abfaf0794a6bff6410b3ec7aa59251549">isBoolToken</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01309"/>01309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01310"/>01310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01311"/>01311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_class_not_token_1acbba7af9fd3eb65ef2c34c32138ba2d2">boolToken</link>=elem;
<anchor xml:id="__interpretor_8cpp_source_1l01312"/>01312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addedCond&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01313"/>01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01314"/>01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01315"/>01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01316"/>01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01317"/>01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01318"/>01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caa97b2c144243b2b9d2c593ec268b62f5">TokenVALUE::BOOL</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01319"/>01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01320"/>01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01321"/>01321 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01322"/>01322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01323"/>01323 }
<anchor xml:id="__interpretor_8cpp_source_1l01324"/>01324 
<anchor xml:id="__interpretor_8cpp_source_1l01325"/><link linkend="_class_and_token_1a8412cc2be91843dbcec6bde30b06d146">01325</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_and_token_1a8412cc2be91843dbcec6bde30b06d146">AndToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01326"/>01326 {
<anchor xml:id="__interpretor_8cpp_source_1l01327"/>01327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01328"/>01328 }
<anchor xml:id="__interpretor_8cpp_source_1l01329"/>01329 
<anchor xml:id="__interpretor_8cpp_source_1l01330"/><link linkend="_class_or_token_1a7c85002ad97533e99a9512267eede569">01330</link> <link linkend="_class_or_token_1a7c85002ad97533e99a9512267eede569">OrToken::OrToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01331"/>01331 {
<anchor xml:id="__interpretor_8cpp_source_1l01332"/>01332 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d00e7dce692e8dc3f6877f035e3a616">TokenVALUE::OR</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01333"/>01333 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;orK;
<anchor xml:id="__interpretor_8cpp_source_1l01334"/>01334 }
<anchor xml:id="__interpretor_8cpp_source_1l01335"/>01335 
<anchor xml:id="__interpretor_8cpp_source_1l01336"/><link linkend="_class_or_token_1af570d875bf11afa30430cf12dc37623b">01336</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_or_token_1af570d875bf11afa30430cf12dc37623b">OrToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01337"/>01337 {
<anchor xml:id="__interpretor_8cpp_source_1l01338"/>01338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01339"/>01339 }
<anchor xml:id="__interpretor_8cpp_source_1l01340"/>01340 
<anchor xml:id="__interpretor_8cpp_source_1l01341"/>01341 
<anchor xml:id="__interpretor_8cpp_source_1l01342"/>01342 
<anchor xml:id="__interpretor_8cpp_source_1l01343"/>01343 
<anchor xml:id="__interpretor_8cpp_source_1l01344"/><link linkend="_class_or_token_1ad079040ecd6dc5384d817249f80eed65">01344</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_or_token_1ad079040ecd6dc5384d817249f80eed65">OrToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01345"/>01345 {
<anchor xml:id="__interpretor_8cpp_source_1l01346"/>01346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01347"/>01347 }
<anchor xml:id="__interpretor_8cpp_source_1l01348"/>01348 
<anchor xml:id="__interpretor_8cpp_source_1l01349"/><link linkend="_class_not_token_1a9a532a1f09a418d06d923114deebb5e9">01349</link> <link linkend="_class_not_token_1a9a532a1f09a418d06d923114deebb5e9">NotToken::NotToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01350"/>01350 {
<anchor xml:id="__interpretor_8cpp_source_1l01351"/>01351 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca10df3d67626099df882920ba6552f16d">TokenVALUE::NOT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01352"/>01352 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;notK;
<anchor xml:id="__interpretor_8cpp_source_1l01353"/>01353 }
<anchor xml:id="__interpretor_8cpp_source_1l01354"/>01354 
<anchor xml:id="__interpretor_8cpp_source_1l01355"/><link linkend="_class_not_token_1a7e2dd6fce2e6f2b3791a2dfd02231959">01355</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_not_token_1a7e2dd6fce2e6f2b3791a2dfd02231959">NotToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01356"/>01356 {
<anchor xml:id="__interpretor_8cpp_source_1l01357"/>01357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01358"/>01358 }
<anchor xml:id="__interpretor_8cpp_source_1l01359"/>01359 
<anchor xml:id="__interpretor_8cpp_source_1l01360"/><link linkend="_class_not_token_1acdcf74ae5a8e5aa08e5226b7943cc192">01360</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_not_token_1acdcf74ae5a8e5aa08e5226b7943cc192">NotToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01361"/>01361 {
<anchor xml:id="__interpretor_8cpp_source_1l01362"/>01362 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01363"/>01363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01364"/>01364 }
<anchor xml:id="__interpretor_8cpp_source_1l01365"/>01365 
<anchor xml:id="__interpretor_8cpp_source_1l01366"/><link linkend="_class_not_token_1a6c122b3073499f07b79eed8e8576ab2a">01366</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_not_token_1a6c122b3073499f07b79eed8e8576ab2a">NotToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01367"/>01367 {
<anchor xml:id="__interpretor_8cpp_source_1l01368"/>01368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01369"/>01369 }
<anchor xml:id="__interpretor_8cpp_source_1l01370"/>01370 
<anchor xml:id="__interpretor_8cpp_source_1l01371"/><link linkend="_class_false_token_1a4cc46b13ce0b957d44cdcfd648ce00bc">01371</link> <link linkend="_class_false_token_1a4cc46b13ce0b957d44cdcfd648ce00bc">FalseToken::FalseToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01372"/>01372 {
<anchor xml:id="__interpretor_8cpp_source_1l01373"/>01373 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3667ab316297387f31aa717670424e7b">TokenVALUE::FALSELITERAL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01374"/>01374 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;falseL;
<anchor xml:id="__interpretor_8cpp_source_1l01375"/>01375 }
<anchor xml:id="__interpretor_8cpp_source_1l01376"/>01376 
<anchor xml:id="__interpretor_8cpp_source_1l01377"/><link linkend="_class_false_token_1a1f5193ea1cf36b142e8e822a578632e5">01377</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_false_token_1a1f5193ea1cf36b142e8e822a578632e5">FalseToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01378"/>01378 {
<anchor xml:id="__interpretor_8cpp_source_1l01379"/>01379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01380"/>01380 }
<anchor xml:id="__interpretor_8cpp_source_1l01381"/>01381 
<anchor xml:id="__interpretor_8cpp_source_1l01382"/><link linkend="_class_true_token_1a08aca6511e1fbde286a4776207b2d9c1">01382</link> <link linkend="_class_true_token_1a08aca6511e1fbde286a4776207b2d9c1">TrueToken::TrueToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01383"/>01383 {
<anchor xml:id="__interpretor_8cpp_source_1l01384"/>01384 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad36335449b5720a1384868719f487119">TokenVALUE::TRUELITERAL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01385"/>01385 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;trueL;
<anchor xml:id="__interpretor_8cpp_source_1l01386"/>01386 }
<anchor xml:id="__interpretor_8cpp_source_1l01387"/>01387 
<anchor xml:id="__interpretor_8cpp_source_1l01388"/><link linkend="_class_true_token_1a1bbbceed5cfcad7e022df9925ca8b4cf">01388</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_true_token_1a1bbbceed5cfcad7e022df9925ca8b4cf">TrueToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01389"/>01389 {
<anchor xml:id="__interpretor_8cpp_source_1l01390"/>01390 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01391"/>01391 }
<anchor xml:id="__interpretor_8cpp_source_1l01392"/>01392 
<anchor xml:id="__interpretor_8cpp_source_1l01393"/><link linkend="_class_open_parenthesis_token_1a47a89050befd5ba73d4742338688584f">01393</link> <link linkend="_class_open_parenthesis_token_1a47a89050befd5ba73d4742338688584f">OpenParenthesisToken::OpenParenthesisToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01394"/>01394 {
<anchor xml:id="__interpretor_8cpp_source_1l01395"/>01395 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caab5f2c1029696d0fa27db2acf531e951">TokenVALUE::OPENPARENTHESIS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01396"/>01396 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;openParenthesisP;
<anchor xml:id="__interpretor_8cpp_source_1l01397"/>01397 }
<anchor xml:id="__interpretor_8cpp_source_1l01398"/>01398 
<anchor xml:id="__interpretor_8cpp_source_1l01399"/><link linkend="_class_close_parenthesis_token_1a19722cdf09d45d79725d6e8227ccd2ce">01399</link> <link linkend="_class_close_parenthesis_token_1a19722cdf09d45d79725d6e8227ccd2ce">CloseParenthesisToken::CloseParenthesisToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01400"/>01400 {
<anchor xml:id="__interpretor_8cpp_source_1l01401"/>01401 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01402"/>01402 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;closeParenthesisP;
<anchor xml:id="__interpretor_8cpp_source_1l01403"/>01403 }
<anchor xml:id="__interpretor_8cpp_source_1l01404"/>01404 
<anchor xml:id="__interpretor_8cpp_source_1l01405"/><link linkend="_class_close_brackets_token_1a804df0a59ddcffeff2c90a25e036f672">01405</link> <link linkend="_class_close_brackets_token_1a804df0a59ddcffeff2c90a25e036f672">CloseBracketsToken::CloseBracketsToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01406"/>01406 {
<anchor xml:id="__interpretor_8cpp_source_1l01407"/>01407 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf62b7b10a36ac4ff1386de6dc9c3ec13">TokenVALUE::CLOSEBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01408"/>01408 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;closeBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l01409"/>01409 }
<anchor xml:id="__interpretor_8cpp_source_1l01410"/>01410 
<anchor xml:id="__interpretor_8cpp_source_1l01411"/><link linkend="_class_open_brackets_token_1abe41351997882bec5477c775f5bc1673">01411</link> <link linkend="_class_open_brackets_token_1abe41351997882bec5477c775f5bc1673">OpenBracketsToken::OpenBracketsToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01412"/>01412 {
<anchor xml:id="__interpretor_8cpp_source_1l01413"/>01413 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca56d9d72077d098fe411d4f715c339e92">TokenVALUE::OPENBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01414"/>01414 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;openBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l01415"/>01415 }
<anchor xml:id="__interpretor_8cpp_source_1l01416"/>01416 
<anchor xml:id="__interpretor_8cpp_source_1l01417"/><link linkend="_class_comma_token_1abc5636c6b36a649ebed92d14ab3e6419">01417</link> <link linkend="_class_comma_token_1abc5636c6b36a649ebed92d14ab3e6419">CommaToken::CommaToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01418"/>01418 {
<anchor xml:id="__interpretor_8cpp_source_1l01419"/>01419 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01420"/>01420 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;commaP;
<anchor xml:id="__interpretor_8cpp_source_1l01421"/>01421 }
<anchor xml:id="__interpretor_8cpp_source_1l01422"/>01422 
<anchor xml:id="__interpretor_8cpp_source_1l01423"/><link linkend="_class_continue_token_1a13d28523acec8f04193ce06919127a0a">01423</link> <link linkend="_class_continue_token_1a13d28523acec8f04193ce06919127a0a">ContinueToken::ContinueToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01424"/>01424 {
<anchor xml:id="__interpretor_8cpp_source_1l01425"/>01425 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2f453cfe638e57e27bb0c9512436111e">TokenVALUE::CONTINUE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01426"/>01426 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;continueK;
<anchor xml:id="__interpretor_8cpp_source_1l01427"/>01427 }
<anchor xml:id="__interpretor_8cpp_source_1l01428"/>01428 
<anchor xml:id="__interpretor_8cpp_source_1l01429"/><link linkend="_class_continue_token_1a139b728b49c813acb14f990a31054f5e">01429</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_continue_token_1a139b728b49c813acb14f990a31054f5e">ContinueToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01430"/>01430 {
<anchor xml:id="__interpretor_8cpp_source_1l01431"/>01431 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01432"/>01432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01433"/>01433 }
<anchor xml:id="__interpretor_8cpp_source_1l01434"/>01434 
<anchor xml:id="__interpretor_8cpp_source_1l01435"/><link linkend="_class_continue_token_1aa9fad99e91e2fb23af6fed27c815b01f">01435</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_continue_token_1aa9fad99e91e2fb23af6fed27c815b01f">ContinueToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01436"/>01436 {
<anchor xml:id="__interpretor_8cpp_source_1l01437"/>01437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;ContinueTag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01438"/>01438 }
<anchor xml:id="__interpretor_8cpp_source_1l01439"/>01439 
<anchor xml:id="__interpretor_8cpp_source_1l01440"/><link linkend="_class_break_token_1a87c201c9b7d271136bd63d7256a62b19">01440</link> <link linkend="_class_break_token_1a87c201c9b7d271136bd63d7256a62b19">BreakToken::BreakToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01441"/>01441 {
<anchor xml:id="__interpretor_8cpp_source_1l01442"/>01442 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca14d6a3e0201f58bfe7c01e775973e80e">TokenVALUE::BREAK</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01443"/>01443 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;breakK;
<anchor xml:id="__interpretor_8cpp_source_1l01444"/>01444 }
<anchor xml:id="__interpretor_8cpp_source_1l01445"/>01445 
<anchor xml:id="__interpretor_8cpp_source_1l01446"/><link linkend="_class_break_token_1af33466835286c8736861de37184073e9">01446</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_break_token_1af33466835286c8736861de37184073e9">BreakToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01447"/>01447 {
<anchor xml:id="__interpretor_8cpp_source_1l01448"/>01448 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01449"/>01449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01450"/>01450 }
<anchor xml:id="__interpretor_8cpp_source_1l01451"/>01451 
<anchor xml:id="__interpretor_8cpp_source_1l01452"/><link linkend="_class_break_token_1a623e413d2ea0c720de427739602b2002">01452</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_break_token_1a623e413d2ea0c720de427739602b2002">BreakToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01453"/>01453 {
<anchor xml:id="__interpretor_8cpp_source_1l01454"/>01454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;BreakTag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01455"/>01455 }
<anchor xml:id="__interpretor_8cpp_source_1l01456"/>01456 
<anchor xml:id="__interpretor_8cpp_source_1l01457"/><link linkend="_class_print_token_1a3a58305f4f8a92f90fcca62aa4544db8">01457</link> <link linkend="_class_print_token_1a3a58305f4f8a92f90fcca62aa4544db8">PrintToken::PrintToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01458"/>01458 {
<anchor xml:id="__interpretor_8cpp_source_1l01459"/>01459 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46caf96eee4e48ee90430f17fb3a8388507b">TokenVALUE::PRINT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01460"/>01460 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;printK;
<anchor xml:id="__interpretor_8cpp_source_1l01461"/>01461 }
<anchor xml:id="__interpretor_8cpp_source_1l01462"/>01462 
<anchor xml:id="__interpretor_8cpp_source_1l01463"/><link linkend="_class_print_token_1a9e4931aa23c45ae8947c9a2258981fa3">01463</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_print_token_1a9e4931aa23c45ae8947c9a2258981fa3">PrintToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01464"/>01464 {
<anchor xml:id="__interpretor_8cpp_source_1l01465"/>01465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01466"/>01466 }
<anchor xml:id="__interpretor_8cpp_source_1l01467"/>01467 
<anchor xml:id="__interpretor_8cpp_source_1l01468"/><link linkend="_class_direction_token_1aa4defb606ee71a120de033877d441b7f">01468</link> <link linkend="_class_direction_token_1aa4defb606ee71a120de033877d441b7f">DirectionToken::DirectionToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01469"/>01469 {
<anchor xml:id="__interpretor_8cpp_source_1l01470"/>01470 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca823d5f6b867f6d6adec93ad4999bae9f">TokenVALUE::DIRECTION</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01471"/>01471 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;directionK;
<anchor xml:id="__interpretor_8cpp_source_1l01472"/>01472 }
<anchor xml:id="__interpretor_8cpp_source_1l01473"/>01473 
<anchor xml:id="__interpretor_8cpp_source_1l01474"/>01474 
<anchor xml:id="__interpretor_8cpp_source_1l01475"/>01475 
<anchor xml:id="__interpretor_8cpp_source_1l01476"/><link linkend="_class_direction_token_1a6666932ae4f403b4ce21ea406e633f97">01476</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_direction_token_1a6666932ae4f403b4ce21ea406e633f97">DirectionToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01477"/>01477 {
<anchor xml:id="__interpretor_8cpp_source_1l01478"/>01478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a823d5f6b867f6d6adec93ad4999bae9f">DataType::DIRECTION</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01479"/>01479 }
<anchor xml:id="__interpretor_8cpp_source_1l01480"/>01480 
<anchor xml:id="__interpretor_8cpp_source_1l01481"/><link linkend="_class_direction_token_1a124c7609d3a4d859d6ef466cf03034b6">01481</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_direction_token_1a124c7609d3a4d859d6ef466cf03034b6">DirectionToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01482"/>01482 {
<anchor xml:id="__interpretor_8cpp_source_1l01483"/>01483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01484"/>01484 }
<anchor xml:id="__interpretor_8cpp_source_1l01485"/>01485 
<anchor xml:id="__interpretor_8cpp_source_1l01486"/><link linkend="_class_zone_token_1aa3c56031d3943698209e5e5b16fca705">01486</link> <link linkend="_class_zone_token_1aa3c56031d3943698209e5e5b16fca705">ZoneToken::ZoneToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01487"/>01487 {
<anchor xml:id="__interpretor_8cpp_source_1l01488"/>01488 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;zoneK;
<anchor xml:id="__interpretor_8cpp_source_1l01489"/>01489 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca1d23cac77df97a722cd2ec7767a06e06">TokenVALUE::ZONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01490"/>01490 }
<anchor xml:id="__interpretor_8cpp_source_1l01491"/>01491 
<anchor xml:id="__interpretor_8cpp_source_1l01492"/><link linkend="_class_zone_token_1adbf3a11a1bcecda9ede8f5b43fdfdb56">01492</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_zone_token_1adbf3a11a1bcecda9ede8f5b43fdfdb56">ZoneToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01493"/>01493 {
<anchor xml:id="__interpretor_8cpp_source_1l01494"/>01494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a1d23cac77df97a722cd2ec7767a06e06">DataType::ZONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01495"/>01495 }
<anchor xml:id="__interpretor_8cpp_source_1l01496"/>01496 
<anchor xml:id="__interpretor_8cpp_source_1l01497"/>01497 
<anchor xml:id="__interpretor_8cpp_source_1l01498"/>01498 
<anchor xml:id="__interpretor_8cpp_source_1l01499"/><link linkend="_class_zone_token_1a9c4b24525c5f7b3b6a502662d3a4f31c">01499</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_zone_token_1a9c4b24525c5f7b3b6a502662d3a4f31c">ZoneToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01500"/>01500 {
<anchor xml:id="__interpretor_8cpp_source_1l01501"/>01501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01502"/>01502 }
<anchor xml:id="__interpretor_8cpp_source_1l01503"/>01503 
<anchor xml:id="__interpretor_8cpp_source_1l01504"/><link linkend="_class_coord_token_1a3540101def18b72bc447578fa6efc39f">01504</link> <link linkend="_class_coord_token_1a3540101def18b72bc447578fa6efc39f">CoordToken::CoordToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01505"/>01505 {
<anchor xml:id="__interpretor_8cpp_source_1l01506"/>01506 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;coordK;
<anchor xml:id="__interpretor_8cpp_source_1l01507"/>01507 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01508"/>01508 }
<anchor xml:id="__interpretor_8cpp_source_1l01509"/>01509 
<anchor xml:id="__interpretor_8cpp_source_1l01510"/><link linkend="_class_coord_token_1ab48d66922a8f08a8cf2f84b8d626e085">01510</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_coord_token_1ab48d66922a8f08a8cf2f84b8d626e085">CoordToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01511"/>01511 {
<anchor xml:id="__interpretor_8cpp_source_1l01512"/>01512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a6a977bf6454341ccb0b79c3d0900db91">DataType::COORD</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01513"/>01513 }
<anchor xml:id="__interpretor_8cpp_source_1l01514"/>01514 
<anchor xml:id="__interpretor_8cpp_source_1l01515"/><link linkend="_class_e_k_p_token_1a710d49b38ba2eff3d0f4221e30d687b2">01515</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_e_k_p_token_1a710d49b38ba2eff3d0f4221e30d687b2">EKPToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01516"/>01516 {
<anchor xml:id="__interpretor_8cpp_source_1l01517"/>01517 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01518"/>01518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01519"/>01519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a87c8af27b17d6ecbc8f7338d1f7737a7">handleCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01520"/>01520 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01521"/>01521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01522"/>01522 }
<anchor xml:id="__interpretor_8cpp_source_1l01523"/>01523 
<anchor xml:id="__interpretor_8cpp_source_1l01524"/>01524 
<anchor xml:id="__interpretor_8cpp_source_1l01525"/>01525 
<anchor xml:id="__interpretor_8cpp_source_1l01526"/>01526 
<anchor xml:id="__interpretor_8cpp_source_1l01527"/><link linkend="_class_coord_token_1a73b59fd963fc06d9691307e4f8db3a70">01527</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_coord_token_1a73b59fd963fc06d9691307e4f8db3a70">CoordToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01528"/>01528 {
<anchor xml:id="__interpretor_8cpp_source_1l01529"/>01529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01530"/>01530 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustComma&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01531"/>01531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbElements&#32;=&#32;0;
<anchor xml:id="__interpretor_8cpp_source_1l01532"/>01532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01533"/>01533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01534"/>01534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mustComma)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01535"/>01535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">addComma</link>(tl))<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01536"/>01536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01537"/>01537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01538"/>01538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a6ff2c6b83000da7ed17cba0b3f8e326f">isCoordToken</link>(elem)&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01539"/>01539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nbElements&#32;==&#32;0)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01540"/>01540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01541"/>01541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01542"/>01542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_coord_token_1a1da90086131fc87de755754d41ecbf41">coordToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01543"/>01543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01544"/>01544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01545"/>01545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01546"/>01546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01547"/>01547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01548"/>01548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45aa79c6a788549c6275055c935df474f0e7">ErrorType::UNEXPECTED</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01549"/>01549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01550"/>01550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01551"/>01551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01552"/>01552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a40f9b1829e7de9bd4d9522c575baca2c">isIntegerToken</link>(elem)&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01553"/>01553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++nbElements;
<anchor xml:id="__interpretor_8cpp_source_1l01554"/>01554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01555"/>01555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01556"/>01556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(nbElements)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01557"/>01557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
<anchor xml:id="__interpretor_8cpp_source_1l01558"/>01558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_coord_token_1a21470f2dfdc0677999da55c3731c1b4a">xPoint</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01559"/>01559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustComma&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01560"/>01560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01561"/>01561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
<anchor xml:id="__interpretor_8cpp_source_1l01562"/>01562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_coord_token_1ac1290944990250ad960c7004a7eef459">yPoint</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01563"/>01563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01564"/>01564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01565"/>01565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__interpretor_8cpp_source_1l01566"/>01566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01567"/>01567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01568"/>01568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01569"/>01569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01570"/>01570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01571"/>01571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01572"/>01572 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01573"/>01573 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01574"/>01574 }
<anchor xml:id="__interpretor_8cpp_source_1l01575"/>01575 
<anchor xml:id="__interpretor_8cpp_source_1l01576"/><link linkend="_class_zone_token_1a896e13f73755782e2ac32543beadc429">01576</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_zone_token_1a896e13f73755782e2ac32543beadc429">ZoneToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01577"/>01577 {
<anchor xml:id="__interpretor_8cpp_source_1l01578"/>01578 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01579"/>01579 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustComma&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01580"/>01580 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbElements&#32;=&#32;0;
<anchor xml:id="__interpretor_8cpp_source_1l01581"/>01581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01582"/>01582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01583"/>01583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mustComma)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01584"/>01584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a53794cd4c78b5873550ca3f5a457f346">addComma</link>(tl))<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01585"/>01585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01586"/>01586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01587"/>01587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1ac85f7e2fe47e049ac6a0f86ba22c9923">isZoneToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01588"/>01588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nbElements&#32;==&#32;0)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01589"/>01589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01590"/>01590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01591"/>01591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_zone_token_1a6393e6a8f503370941ecde68361e1f4f">zoneToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01592"/>01592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01593"/>01593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01594"/>01594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01595"/>01595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01596"/>01596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01597"/>01597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca6a977bf6454341ccb0b79c3d0900db91">TokenVALUE::COORD</link>,&#32;<link linkend="__interpretor_8h_1ab0df38968e4f03a3f1f6d6df0f31f45aa79c6a788549c6275055c935df474f0e7">ErrorType::UNEXPECTED</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01598"/>01598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01599"/>01599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01600"/>01600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01601"/>01601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a6ff2c6b83000da7ed17cba0b3f8e326f">isCoordToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01602"/>01602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++nbElements;
<anchor xml:id="__interpretor_8cpp_source_1l01603"/>01603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01604"/>01604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01605"/>01605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(nbElements)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01606"/>01606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
<anchor xml:id="__interpretor_8cpp_source_1l01607"/>01607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_zone_token_1ab04473b2a544a8c989cc36636a0ca1fe">topLeft</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01608"/>01608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustComma&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01609"/>01609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01610"/>01610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
<anchor xml:id="__interpretor_8cpp_source_1l01611"/>01611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_zone_token_1a470e67610ee539fb9ef8116c7b11674f">bottomRight</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01612"/>01612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01613"/>01613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01614"/>01614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__interpretor_8cpp_source_1l01615"/>01615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01616"/>01616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01617"/>01617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01618"/>01618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01619"/>01619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01620"/>01620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01621"/>01621 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01622"/>01622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01623"/>01623 }
<anchor xml:id="__interpretor_8cpp_source_1l01624"/>01624 
<anchor xml:id="__interpretor_8cpp_source_1l01625"/><link linkend="_class_integer_token_1ac31b66dbfeaf1298537cbe6c21df1b4f">01625</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_integer_token_1ac31b66dbfeaf1298537cbe6c21df1b4f">IntegerToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01626"/>01626 {
<anchor xml:id="__interpretor_8cpp_source_1l01627"/>01627 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01628"/>01628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01629"/>01629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01630"/>01630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a40f9b1829e7de9bd4d9522c575baca2c">isIntegerToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01631"/>01631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01632"/>01632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01633"/>01633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_integer_token_1ae2125154d69dda08817a461786e8b9c6">intToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01634"/>01634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01635"/>01635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01636"/>01636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01637"/>01637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01638"/>01638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01639"/>01639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01640"/>01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01641"/>01641 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01642"/>01642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01643"/>01643 }
<anchor xml:id="__interpretor_8cpp_source_1l01644"/>01644 
<anchor xml:id="__interpretor_8cpp_source_1l01645"/><link linkend="_class_float_token_1acd02252e5f8e5d0eba5f3d23f647d2c2">01645</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_float_token_1acd02252e5f8e5d0eba5f3d23f647d2c2">FloatToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01646"/>01646 {
<anchor xml:id="__interpretor_8cpp_source_1l01647"/>01647 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01648"/>01648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01649"/>01649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01650"/>01650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a0dd9b1dce01c40a60d47ba1d5533a850">isFloatToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01651"/>01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01652"/>01652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01653"/>01653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_float_token_1ad9c85537da9f13181c11a6b715fd9e3c">floatToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01654"/>01654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01655"/>01655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01656"/>01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01657"/>01657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01658"/>01658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01659"/>01659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01660"/>01660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01661"/>01661 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01662"/>01662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01663"/>01663 }
<anchor xml:id="__interpretor_8cpp_source_1l01664"/>01664 
<anchor xml:id="__interpretor_8cpp_source_1l01665"/><link linkend="_class_string_token_1a75a4182fa9fd3c6e287fd8dddc366762">01665</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_string_token_1a75a4182fa9fd3c6e287fd8dddc366762">StringToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01666"/>01666 {
<anchor xml:id="__interpretor_8cpp_source_1l01667"/>01667 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01668"/>01668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01669"/>01669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01670"/>01670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1ab2efcdda00b3a9b0a300553dc78d1fbd">isStringToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01671"/>01671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01672"/>01672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01673"/>01673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_string_token_1ab768b8533ae582f827befc327bb4387e">stringToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01674"/>01674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01675"/>01675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01676"/>01676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01677"/>01677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01678"/>01678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01679"/>01679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01680"/>01680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01681"/>01681 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01682"/>01682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01683"/>01683 }
<anchor xml:id="__interpretor_8cpp_source_1l01684"/>01684 
<anchor xml:id="__interpretor_8cpp_source_1l01685"/><link linkend="_class_bool_token_1a63b853332ad1212e93334291e995d2ca">01685</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_bool_token_1a63b853332ad1212e93334291e995d2ca">BoolToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01686"/>01686 {
<anchor xml:id="__interpretor_8cpp_source_1l01687"/>01687 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01688"/>01688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01689"/>01689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01690"/>01690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1abfaf0794a6bff6410b3ec7aa59251549">isBoolToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01691"/>01691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01692"/>01692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01693"/>01693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_bool_token_1ac12b05810b85e3b523e62c1021f27931">boolToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01694"/>01694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01695"/>01695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01696"/>01696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01697"/>01697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01698"/>01698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01699"/>01699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01700"/>01700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01701"/>01701 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01702"/>01702 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01703"/>01703 }
<anchor xml:id="__interpretor_8cpp_source_1l01704"/><link linkend="_class_direction_token_1a7871329df529c15890f973f5cb37cc41">01704</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_direction_token_1a7871329df529c15890f973f5cb37cc41">DirectionToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01705"/>01705 {
<anchor xml:id="__interpretor_8cpp_source_1l01706"/>01706 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;mustEnd&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01707"/>01707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01708"/>01708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01709"/>01709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1a0916bdca9f86432f19dba325a765a138">isDirectionToken</link>(elem)&#32;&amp;&amp;&#32;!mustEnd)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01710"/>01710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;addTokens(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01711"/>01711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01712"/>01712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_direction_token_1ab0ec7aa97a8f96ef83875e9174931aa4">dirToken</link>&#32;=&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01713"/>01713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mustEnd&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01714"/>01714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01715"/>01715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01716"/>01716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01717"/>01717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01718"/>01718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_k_p_token_1a0a95e55ef2440fbaa21cd74442eb3c65">addCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01719"/>01719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01720"/>01720 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01721"/>01721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01722"/>01722 }
<anchor xml:id="__interpretor_8cpp_source_1l01723"/>01723 
<anchor xml:id="__interpretor_8cpp_source_1l01724"/><link linkend="_class_coord_token_1a3399a3cb18d077bb51dbfc13b12bf642">01724</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_coord_token_1a3399a3cb18d077bb51dbfc13b12bf642">CoordToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01725"/>01725 {
<anchor xml:id="__interpretor_8cpp_source_1l01726"/>01726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_coord_token_1a1da90086131fc87de755754d41ecbf41">coordToken</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01727"/>01727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CoordTag&gt;(<link linkend="_class_coord_token_1a1da90086131fc87de755754d41ecbf41">coordToken</link>-&gt;execute());
<anchor xml:id="__interpretor_8cpp_source_1l01728"/>01728 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01729"/>01729 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_coord_token_1a21470f2dfdc0677999da55c3731c1b4a">xPoint</link>&#32;&amp;&amp;&#32;<link linkend="_class_coord_token_1ac1290944990250ad960c7004a7eef459">yPoint</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01730"/>01730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CoordTag&gt;(<link linkend="_class_coord_token_1a21470f2dfdc0677999da55c3731c1b4a">xPoint</link>-&gt;execute(),&#32;<link linkend="_class_coord_token_1ac1290944990250ad960c7004a7eef459">yPoint</link>-&gt;execute());
<anchor xml:id="__interpretor_8cpp_source_1l01731"/>01731 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01732"/>01732 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;CoordTag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01733"/>01733 }
<anchor xml:id="__interpretor_8cpp_source_1l01734"/>01734 
<anchor xml:id="__interpretor_8cpp_source_1l01735"/><link linkend="_class_compare_token_1a20829f6e8ec72cd4c9c239f20ac795b3">01735</link> <link linkend="_class_compare_token_1a20829f6e8ec72cd4c9c239f20ac795b3">CompareToken::CompareToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01736"/>01736 {
<anchor xml:id="__interpretor_8cpp_source_1l01737"/>01737 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;compareK;
<anchor xml:id="__interpretor_8cpp_source_1l01738"/>01738 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cafee1f202df8193b3ba65f00ad61efcef">TokenVALUE::COMPARE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01739"/>01739 }
<anchor xml:id="__interpretor_8cpp_source_1l01740"/>01740 
<anchor xml:id="__interpretor_8cpp_source_1l01741"/><link linkend="_class_compare_token_1aa97ce5363e522dab34e83c34c45d8be1">01741</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_compare_token_1aa97ce5363e522dab34e83c34c45d8be1">CompareToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01742"/>01742 {
<anchor xml:id="__interpretor_8cpp_source_1l01743"/>01743 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6aa97b2c144243b2b9d2c593ec268b62f5">DataType::BOOL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01744"/>01744 }
<anchor xml:id="__interpretor_8cpp_source_1l01745"/>01745 
<anchor xml:id="__interpretor_8cpp_source_1l01746"/><link linkend="_class_compare_token_1ac71c9bacc5349631b6e4972746934d48">01746</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_compare_token_1ac71c9bacc5349631b6e4972746934d48">CompareToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01747"/>01747 {
<anchor xml:id="__interpretor_8cpp_source_1l01748"/>01748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01749"/>01749 }
<anchor xml:id="__interpretor_8cpp_source_1l01750"/>01750 
<anchor xml:id="__interpretor_8cpp_source_1l01751"/><link linkend="_class_float_token_1ac8c34bb808d391d316bcd3a7094bc98a">01751</link> <link linkend="_class_float_token_1ac8c34bb808d391d316bcd3a7094bc98a">FloatToken::FloatToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01752"/>01752 {
<anchor xml:id="__interpretor_8cpp_source_1l01753"/>01753 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;floatK;
<anchor xml:id="__interpretor_8cpp_source_1l01754"/>01754 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cae738c26bf4ce1037fa81b039a915cbf6">TokenVALUE::FLOAT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01755"/>01755 }
<anchor xml:id="__interpretor_8cpp_source_1l01756"/>01756 
<anchor xml:id="__interpretor_8cpp_source_1l01757"/><link linkend="_class_float_token_1a298ff5025132041ec4356af92e79a1bc">01757</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_float_token_1a298ff5025132041ec4356af92e79a1bc">FloatToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01758"/>01758 {
<anchor xml:id="__interpretor_8cpp_source_1l01759"/>01759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ae738c26bf4ce1037fa81b039a915cbf6">DataType::FLOAT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01760"/>01760 }
<anchor xml:id="__interpretor_8cpp_source_1l01761"/>01761 
<anchor xml:id="__interpretor_8cpp_source_1l01762"/><link linkend="_class_float_token_1af10a6ccf3e8f957f3926d837160bc429">01762</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_float_token_1af10a6ccf3e8f957f3926d837160bc429">FloatToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01763"/>01763 {
<anchor xml:id="__interpretor_8cpp_source_1l01764"/>01764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;FloatTag&gt;(<link linkend="_class_float_token_1ad9c85537da9f13181c11a6b715fd9e3c">floatToken</link>-&gt;execute());
<anchor xml:id="__interpretor_8cpp_source_1l01765"/>01765 }
<anchor xml:id="__interpretor_8cpp_source_1l01766"/>01766 
<anchor xml:id="__interpretor_8cpp_source_1l01767"/><link linkend="_class_integer_token_1ab1ee2a5de4630d98a7d9cd6351947927">01767</link> <link linkend="_class_integer_token_1ab1ee2a5de4630d98a7d9cd6351947927">IntegerToken::IntegerToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01768"/>01768 {
<anchor xml:id="__interpretor_8cpp_source_1l01769"/>01769 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;intK;
<anchor xml:id="__interpretor_8cpp_source_1l01770"/>01770 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01771"/>01771 }
<anchor xml:id="__interpretor_8cpp_source_1l01772"/>01772 
<anchor xml:id="__interpretor_8cpp_source_1l01773"/><link linkend="_class_integer_token_1a879058f4e3d138165efd66bcf46cfdf7">01773</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_integer_token_1a879058f4e3d138165efd66bcf46cfdf7">IntegerToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01774"/>01774 {
<anchor xml:id="__interpretor_8cpp_source_1l01775"/>01775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a53f93baa3057821107c750323892fa92">DataType::INT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01776"/>01776 }
<anchor xml:id="__interpretor_8cpp_source_1l01777"/>01777 
<anchor xml:id="__interpretor_8cpp_source_1l01778"/>01778 
<anchor xml:id="__interpretor_8cpp_source_1l01779"/>01779 
<anchor xml:id="__interpretor_8cpp_source_1l01780"/><link linkend="_class_integer_token_1a33e827ea234b1c0b5b305b5857331960">01780</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_integer_token_1a33e827ea234b1c0b5b305b5857331960">IntegerToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01781"/>01781 {
<anchor xml:id="__interpretor_8cpp_source_1l01782"/>01782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_shared&lt;IntTag&gt;(<link linkend="_class_integer_token_1ae2125154d69dda08817a461786e8b9c6">intToken</link>-&gt;execute());
<anchor xml:id="__interpretor_8cpp_source_1l01783"/>01783 }
<anchor xml:id="__interpretor_8cpp_source_1l01784"/>01784 
<anchor xml:id="__interpretor_8cpp_source_1l01785"/><link linkend="_class_store_token_1afacb2d9d11cafbf437764c86753029b4">01785</link> <link linkend="_class_store_token_1afacb2d9d11cafbf437764c86753029b4">StoreToken::StoreToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01786"/>01786 {
<anchor xml:id="__interpretor_8cpp_source_1l01787"/>01787 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;storeK;
<anchor xml:id="__interpretor_8cpp_source_1l01788"/>01788 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca3cfba54f6873dfd55b0b09d32910b20e">TokenVALUE::STORE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01789"/>01789 }
<anchor xml:id="__interpretor_8cpp_source_1l01790"/>01790 
<anchor xml:id="__interpretor_8cpp_source_1l01791"/><link linkend="_class_store_token_1a431a003fb845c3562c1ebab9b2b40bcd">01791</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_store_token_1a431a003fb845c3562c1ebab9b2b40bcd">StoreToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01792"/>01792 {
<anchor xml:id="__interpretor_8cpp_source_1l01793"/>01793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01794"/>01794 }
<anchor xml:id="__interpretor_8cpp_source_1l01795"/>01795 
<anchor xml:id="__interpretor_8cpp_source_1l01796"/><link linkend="_class_list_token_1a6f8b1c210bafe2fe677ddb92726567aa">01796</link> <link linkend="_class_list_token_1a6f8b1c210bafe2fe677ddb92726567aa">ListToken::ListToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01797"/>01797 {
<anchor xml:id="__interpretor_8cpp_source_1l01798"/>01798 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;listK;
<anchor xml:id="__interpretor_8cpp_source_1l01799"/>01799 &#32;&#32;&#32;&#32;<link linkend="_class_list_token_1ac099c58eaacdd550708afdfb00eb8ba1">dType</link>&#32;=&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6ab50339a10e1de285ac99d4c3990b8693">DataType::NONE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01800"/>01800 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca298cb25408234de02baf2085803a464a">TokenVALUE::LIST</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01801"/>01801 }
<anchor xml:id="__interpretor_8cpp_source_1l01802"/>01802 
<anchor xml:id="__interpretor_8cpp_source_1l01803"/><link linkend="_class_list_token_1ae736d7d0f7a3cd54847651f1d2cf9ffb">01803</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_list_token_1ae736d7d0f7a3cd54847651f1d2cf9ffb">ListToken::addOab</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01804"/>01804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01805"/>01805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01806"/>01806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca09d62a98aa0b2c29e66b3f81c3641657">TokenVALUE::OPENANGLEBRACKETS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01807"/>01807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01808"/>01808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01809"/>01809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01810"/>01810 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01811"/>01811 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca09d62a98aa0b2c29e66b3f81c3641657">TokenVALUE::OPENANGLEBRACKETS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01812"/>01812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01813"/>01813 }
<anchor xml:id="__interpretor_8cpp_source_1l01814"/>01814 
<anchor xml:id="__interpretor_8cpp_source_1l01815"/><link linkend="_class_list_token_1a31080aaed35fe7176403a5e84d295fbe">01815</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_list_token_1a31080aaed35fe7176403a5e84d295fbe">ListToken::addCab</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01816"/>01816 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01817"/>01817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01818"/>01818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad473a02cda3fb53f1def18c632bf4e9d">TokenVALUE::CLOSEANGLEBRACKETS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01819"/>01819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01820"/>01820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01821"/>01821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01822"/>01822 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01823"/>01823 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad473a02cda3fb53f1def18c632bf4e9d">TokenVALUE::CLOSEANGLEBRACKETS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01824"/>01824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01825"/>01825 }
<anchor xml:id="__interpretor_8cpp_source_1l01826"/>01826 
<anchor xml:id="__interpretor_8cpp_source_1l01827"/>01827 
<anchor xml:id="__interpretor_8cpp_source_1l01828"/>01828 
<anchor xml:id="__interpretor_8cpp_source_1l01829"/><link linkend="_class_list_token_1aea0a223d95a5cef71aa01f13bae99b9f">01829</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_list_token_1aea0a223d95a5cef71aa01f13bae99b9f">ListToken::addType</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01830"/>01830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01831"/>01831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01832"/>01832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__interpretor_8cpp_1aeae120e34ddae125123ab27fd7a2eeb3">isType</link>(elem))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01833"/>01833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_list_token_1ac099c58eaacdd550708afdfb00eb8ba1">dType</link>&#32;=&#32;elem-&gt;getDataType();
<anchor xml:id="__interpretor_8cpp_source_1l01834"/>01834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01835"/>01835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01836"/>01836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01837"/>01837 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01838"/>01838 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca5d5cd46919fa987731fb2edefe0f2a0c">TokenVALUE::INTEGER</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01839"/>01839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01840"/>01840 }
<anchor xml:id="__interpretor_8cpp_source_1l01841"/>01841 
<anchor xml:id="__interpretor_8cpp_source_1l01842"/><link linkend="_class_list_token_1a906d4ed5d5198e7238a04207579c5718">01842</link> std::shared_ptr&lt;Token&gt;&#32;<link linkend="_class_list_token_1a906d4ed5d5198e7238a04207579c5718">ListToken::handleCp</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01843"/>01843 {
<anchor xml:id="__interpretor_8cpp_source_1l01844"/>01844 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;addedComma&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01845"/>01845 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;firstEntry&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01846"/>01846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!tl.<link linkend="_class_iterator_list_1a2ebc1118094754b7d333b0a9d257d12b">ended</link>())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01847"/>01847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;tl.<link linkend="_class_iterator_list_1a4acf162e4a194bddd3c2fe26b073f45a">currentToken</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01848"/>01848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01849"/>01849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(firstEntry)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01850"/>01850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstEntry&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01851"/>01851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;getDataType()&#32;==&#32;<link linkend="_class_list_token_1ac099c58eaacdd550708afdfb00eb8ba1">dType</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01852"/>01852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elemRes&#32;=&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01853"/>01853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elemRes-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01854"/>01854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_list_token_1aa261f2c9074d7aa9e3e9aff9dcf4fce0">listToken</link>.push_back(elem);
<anchor xml:id="__interpretor_8cpp_source_1l01855"/>01855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01856"/>01856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01857"/>01857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01858"/>01858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(elemRes);
<anchor xml:id="__interpretor_8cpp_source_1l01859"/>01859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01860"/>01860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01861"/>01861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01862"/>01862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01863"/>01863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01864"/>01864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01865"/>01865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01866"/>01866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01867"/>01867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01868"/>01868 
<anchor xml:id="__interpretor_8cpp_source_1l01869"/>01869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addedComma)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01870"/>01870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;getDataType()&#32;==&#32;<link linkend="_class_list_token_1ac099c58eaacdd550708afdfb00eb8ba1">dType</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01871"/>01871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addedComma&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01872"/>01872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elemRes&#32;=&#32;elem-&gt;addTokens(tl,<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01873"/>01873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elemRes-&gt;isSuccess())&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01874"/>01874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_list_token_1aa261f2c9074d7aa9e3e9aff9dcf4fce0">listToken</link>.push_back(elem);
<anchor xml:id="__interpretor_8cpp_source_1l01875"/>01875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01876"/>01876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01877"/>01877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01878"/>01878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(elemRes);
<anchor xml:id="__interpretor_8cpp_source_1l01879"/>01879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01880"/>01880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01881"/>01881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01882"/>01882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01883"/>01883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01884"/>01884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01885"/>01885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01886"/>01886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01887"/>01887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elem;
<anchor xml:id="__interpretor_8cpp_source_1l01888"/>01888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01889"/>01889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elem-&gt;tValue&#32;==&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca4d9b3e9fc12849d060371eb65154c751">TokenVALUE::COMMA</link>)&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01890"/>01890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addedComma&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01891"/>01891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01892"/>01892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01893"/>01893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01894"/>01894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01895"/>01895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01896"/>01896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01897"/>01897 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01898"/>01898 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c0f84a84656f0b5e28c4193c3c13ea3">addError</link>(<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab658c0ab7888b812782bb032dbf4815c">TokenVALUE::CLOSEPARENTHESIS</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01899"/>01899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01900"/>01900 }
<anchor xml:id="__interpretor_8cpp_source_1l01901"/>01901 
<anchor xml:id="__interpretor_8cpp_source_1l01902"/><link linkend="_class_list_token_1ad933b167a7d348852edf2700a8c2985b">01902</link> std::shared_ptr&lt;TokenResult&gt;&#32;<link linkend="_class_list_token_1ad933b167a7d348852edf2700a8c2985b">ListToken::addTokens</link>(<link linkend="_class_iterator_list">IteratorList&lt;Token&gt;</link>&amp;&#32;tl,&#32;std::shared_ptr&lt;TokenResult&gt;&#32;tRes)
<anchor xml:id="__interpretor_8cpp_source_1l01903"/>01903 {
<anchor xml:id="__interpretor_8cpp_source_1l01904"/>01904 &#32;&#32;&#32;&#32;tl.<link linkend="_class_iterator_list_1af5c370ccb8698e2a9fb0714782d57203">next</link>();
<anchor xml:id="__interpretor_8cpp_source_1l01905"/>01905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_list_token_1ae736d7d0f7a3cd54847651f1d2cf9ffb">addOab</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01906"/>01906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_list_token_1aea0a223d95a5cef71aa01f13bae99b9f">addType</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01907"/>01907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_list_token_1a31080aaed35fe7176403a5e84d295fbe">addCab</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01908"/>01908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_k_p_token_1a0d6ee24aa23095edb2b1c9ba4baedc03">addOp</link>(tl))&#32;{
<anchor xml:id="__interpretor_8cpp_source_1l01909"/>01909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_list_token_1a906d4ed5d5198e7238a04207579c5718">handleCp</link>(tl,&#32;<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>));
<anchor xml:id="__interpretor_8cpp_source_1l01910"/>01910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01911"/>01911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01912"/>01912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01913"/>01913 &#32;&#32;&#32;&#32;}
<anchor xml:id="__interpretor_8cpp_source_1l01914"/>01914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_token_1af13c7d494e5fe273558cb37286fa7185">updateRes</link>(<link linkend="_class_token_1a374f334f070a5a07daf0bbde3be02ced">tRes</link>);
<anchor xml:id="__interpretor_8cpp_source_1l01915"/>01915 }
<anchor xml:id="__interpretor_8cpp_source_1l01916"/>01916 
<anchor xml:id="__interpretor_8cpp_source_1l01917"/><link linkend="_class_list_token_1a7fe18acce7131bdfb768b8a8977173d3">01917</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_list_token_1a7fe18acce7131bdfb768b8a8977173d3">ListToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01918"/>01918 {
<anchor xml:id="__interpretor_8cpp_source_1l01919"/>01919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01920"/>01920 }
<anchor xml:id="__interpretor_8cpp_source_1l01921"/>01921 
<anchor xml:id="__interpretor_8cpp_source_1l01922"/><link linkend="_class_string_token_1a4d387ee58a3492caf7cc5b5c69ea1577">01922</link> <link linkend="_class_string_token_1a4d387ee58a3492caf7cc5b5c69ea1577">StringToken::StringToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01923"/>01923 {
<anchor xml:id="__interpretor_8cpp_source_1l01924"/>01924 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;stringK;
<anchor xml:id="__interpretor_8cpp_source_1l01925"/>01925 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca63b588d5559f64f89a416e656880b949">TokenVALUE::STRING</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01926"/>01926 }
<anchor xml:id="__interpretor_8cpp_source_1l01927"/>01927 
<anchor xml:id="__interpretor_8cpp_source_1l01928"/><link linkend="_class_string_token_1a1dbc21181980b768c55acb13d0213601">01928</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_string_token_1a1dbc21181980b768c55acb13d0213601">StringToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01929"/>01929 {
<anchor xml:id="__interpretor_8cpp_source_1l01930"/>01930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01931"/>01931 }
<anchor xml:id="__interpretor_8cpp_source_1l01932"/>01932 
<anchor xml:id="__interpretor_8cpp_source_1l01933"/><link linkend="_class_second_token_1adf8fe7d7c5ae3fc0f72dd5035f7fa317">01933</link> <link linkend="_class_second_token_1adf8fe7d7c5ae3fc0f72dd5035f7fa317">SecondToken::SecondToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01934"/>01934 {
<anchor xml:id="__interpretor_8cpp_source_1l01935"/>01935 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;secondL;
<anchor xml:id="__interpretor_8cpp_source_1l01936"/>01936 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca2200becb80f0019c4a2ccecec350d0db">TokenVALUE::SECOND</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01937"/>01937 }
<anchor xml:id="__interpretor_8cpp_source_1l01938"/>01938 
<anchor xml:id="__interpretor_8cpp_source_1l01939"/><link linkend="_class_second_token_1aa4d852983520e6d5fd31aadffe80d8e4">01939</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_second_token_1aa4d852983520e6d5fd31aadffe80d8e4">SecondToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01940"/>01940 {
<anchor xml:id="__interpretor_8cpp_source_1l01941"/>01941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6af03689713d1683f6872267046e6de33c">DataType::TIMETYPE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01942"/>01942 }
<anchor xml:id="__interpretor_8cpp_source_1l01943"/>01943 
<anchor xml:id="__interpretor_8cpp_source_1l01944"/><link linkend="_class_milli_second_token_1a0a728a23e8a29752ba7e999143741fd3">01944</link> <link linkend="_class_milli_second_token_1a0a728a23e8a29752ba7e999143741fd3">MilliSecondToken::MilliSecondToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01945"/>01945 {
<anchor xml:id="__interpretor_8cpp_source_1l01946"/>01946 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;millisecondL;
<anchor xml:id="__interpretor_8cpp_source_1l01947"/>01947 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca241d7907de05ad50c011812e927cd671">TokenVALUE::MILLISECOND</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01948"/>01948 }
<anchor xml:id="__interpretor_8cpp_source_1l01949"/>01949 
<anchor xml:id="__interpretor_8cpp_source_1l01950"/><link linkend="_class_milli_second_token_1a648c3017582444e693a59bef9b3a5d71">01950</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_milli_second_token_1a648c3017582444e693a59bef9b3a5d71">MilliSecondToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01951"/>01951 {
<anchor xml:id="__interpretor_8cpp_source_1l01952"/>01952 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6af03689713d1683f6872267046e6de33c">DataType::TIMETYPE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01953"/>01953 }
<anchor xml:id="__interpretor_8cpp_source_1l01954"/>01954 
<anchor xml:id="__interpretor_8cpp_source_1l01955"/><link linkend="_class_minute_token_1a7aecee81b39ae555fe1c231c3c80df17">01955</link> <link linkend="_class_minute_token_1a7aecee81b39ae555fe1c231c3c80df17">MinuteToken::MinuteToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01956"/>01956 {
<anchor xml:id="__interpretor_8cpp_source_1l01957"/>01957 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;minuteL;
<anchor xml:id="__interpretor_8cpp_source_1l01958"/>01958 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca46bda4cde2f10bdb9e51e3bbefa4a2bf">TokenVALUE::MINUTE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01959"/>01959 }
<anchor xml:id="__interpretor_8cpp_source_1l01960"/>01960 
<anchor xml:id="__interpretor_8cpp_source_1l01961"/><link linkend="_class_minute_token_1af9875f90d35c8034c5a8f073c1b27b43">01961</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_minute_token_1af9875f90d35c8034c5a8f073c1b27b43">MinuteToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01962"/>01962 {
<anchor xml:id="__interpretor_8cpp_source_1l01963"/>01963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6af03689713d1683f6872267046e6de33c">DataType::TIMETYPE</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01964"/>01964 }
<anchor xml:id="__interpretor_8cpp_source_1l01965"/>01965 
<anchor xml:id="__interpretor_8cpp_source_1l01966"/><link linkend="_class_numeric_token_1a7f1b43277fb39aeab23502635e8a0126">01966</link> <link linkend="_class_numeric_token_1a7f1b43277fb39aeab23502635e8a0126">NumericToken::NumericToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;nb)
<anchor xml:id="__interpretor_8cpp_source_1l01967"/>01967 {
<anchor xml:id="__interpretor_8cpp_source_1l01968"/>01968 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cab22f521f17b09d0fd389e231f8f6d66d">TokenVALUE::NUMERIC</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01969"/>01969 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;nb;
<anchor xml:id="__interpretor_8cpp_source_1l01970"/>01970 &#32;&#32;&#32;&#32;<link linkend="_class_numeric_token_1a3349ba56e3f951e3c3473b66fcf195ee">number</link>&#32;=&#32;std::stoi(nb);
<anchor xml:id="__interpretor_8cpp_source_1l01971"/>01971 }
<anchor xml:id="__interpretor_8cpp_source_1l01972"/>01972 
<anchor xml:id="__interpretor_8cpp_source_1l01973"/><link linkend="_class_numeric_token_1af1967ab001cb9d95aba3de02e9fd78c5">01973</link> <link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</link>&#32;<link linkend="_class_numeric_token_1af1967ab001cb9d95aba3de02e9fd78c5">NumericToken::getDataType</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01974"/>01974 {
<anchor xml:id="__interpretor_8cpp_source_1l01975"/>01975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__interpretor_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a53f93baa3057821107c750323892fa92">DataType::INT</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01976"/>01976 }
<anchor xml:id="__interpretor_8cpp_source_1l01977"/>01977 
<anchor xml:id="__interpretor_8cpp_source_1l01978"/><link linkend="_class_unknown_token_1ac37d05a7251a0636f36a703cc69bbc69">01978</link> <link linkend="_class_unknown_token_1ac37d05a7251a0636f36a703cc69bbc69">UnknownToken::UnknownToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01979"/>01979 {
<anchor xml:id="__interpretor_8cpp_source_1l01980"/>01980 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca696b031073e74bf2cb98e5ef201d4aa3">TokenVALUE::UNKNOWN</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01981"/>01981 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;<emphasis role="stringliteral">&quot;Unknown&quot;</emphasis>;
<anchor xml:id="__interpretor_8cpp_source_1l01982"/>01982 }
<anchor xml:id="__interpretor_8cpp_source_1l01983"/>01983 
<anchor xml:id="__interpretor_8cpp_source_1l01984"/><link linkend="_class_string_literal_token_1af17431409d177d987b1e7e2851658e04">01984</link> <link linkend="_class_string_literal_token_1af17431409d177d987b1e7e2851658e04">StringLiteralToken::StringLiteralToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content):<link linkend="_class_l_token">LToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01985"/>01985 {
<anchor xml:id="__interpretor_8cpp_source_1l01986"/>01986 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;content;
<anchor xml:id="__interpretor_8cpp_source_1l01987"/>01987 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cace7e8413589722ee650cbce0ea040f86">TokenVALUE::STRINGLITERAL</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01988"/>01988 }
<anchor xml:id="__interpretor_8cpp_source_1l01989"/>01989 
<anchor xml:id="__interpretor_8cpp_source_1l01990"/><link linkend="_class_string_literal_token_1a9f1db1ae9a350867f394676d5b809be3">01990</link> std::shared_ptr&lt;Tag&gt;&#32;<link linkend="_class_string_literal_token_1a9f1db1ae9a350867f394676d5b809be3">StringLiteralToken::execute</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01991"/>01991 {
<anchor xml:id="__interpretor_8cpp_source_1l01992"/>01992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::shared_ptr&lt;Tag&gt;();
<anchor xml:id="__interpretor_8cpp_source_1l01993"/>01993 }
<anchor xml:id="__interpretor_8cpp_source_1l01994"/>01994 
<anchor xml:id="__interpretor_8cpp_source_1l01995"/><link linkend="_class_close_angle_brackets_token_1a2009810627062cc4676f13c689e5c383">01995</link> <link linkend="_class_close_angle_brackets_token_1a2009810627062cc4676f13c689e5c383">CloseAngleBracketsToken::CloseAngleBracketsToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l01996"/>01996 {
<anchor xml:id="__interpretor_8cpp_source_1l01997"/>01997 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;closeAngleBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l01998"/>01998 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46cad473a02cda3fb53f1def18c632bf4e9d">TokenVALUE::CLOSEANGLEBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l01999"/>01999 }
<anchor xml:id="__interpretor_8cpp_source_1l02000"/>02000 
<anchor xml:id="__interpretor_8cpp_source_1l02001"/><link linkend="_class_open_angle_brackets_token_1a64a65c59aebef72567fcb68046362e9f">02001</link> <link linkend="_class_open_angle_brackets_token_1a64a65c59aebef72567fcb68046362e9f">OpenAngleBracketsToken::OpenAngleBracketsToken</link>()
<anchor xml:id="__interpretor_8cpp_source_1l02002"/>02002 {
<anchor xml:id="__interpretor_8cpp_source_1l02003"/>02003 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a8b3faba4c73c28d11fec73758a0302b2">tokenText</link>&#32;=&#32;openAngleBracketsP;
<anchor xml:id="__interpretor_8cpp_source_1l02004"/>02004 &#32;&#32;&#32;&#32;<link linkend="_class_token_1a4c8ce9cf1eecbc7e49650307eea6a862">tValue</link>&#32;=&#32;<link linkend="__interpretor_8h_1acbd1e63c605cbb3dbe67c7411841b46ca09d62a98aa0b2c29e66b3f81c3641657">TokenVALUE::OPENANGLEBRACKETS</link>;
<anchor xml:id="__interpretor_8cpp_source_1l02005"/>02005 }
<anchor xml:id="__interpretor_8cpp_source_1l02006"/>02006 
</programlisting></section>
