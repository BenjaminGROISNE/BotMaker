<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_fopencv_8h" xml:lang="en-US">
<title>src/fopencv.h File Reference</title>
<indexterm><primary>src/fopencv.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;string&gt;<?linebreak?>#include &lt;opencv2/core.hpp&gt;<?linebreak?>#include &lt;opencv2/imgproc.hpp&gt;<?linebreak?>#include &lt;opencv2/photo.hpp&gt;<?linebreak?>#include &lt;opencv2/highgui.hpp&gt;<?linebreak?>#include &lt;opencv2/opencv.hpp&gt;<?linebreak?>#include &lt;iostream&gt;<?linebreak?>#include &lt;vector&gt;<?linebreak?>#include &lt;random&gt;<?linebreak?>#include &lt;time.h&gt;<?linebreak?>#include &lt;stdlib.h&gt;<?linebreak?>#include &lt;fstream&gt;<?linebreak?>#include &quot;sysCommands.h&quot;<?linebreak?>#include &quot;Units.h&quot;<?linebreak?></programlisting>Include dependency graph for fopencv.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h__dep__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>cv::Mat <link linkend="_fopencv_8h_1a0181b31cadb4c79a4b9e0154426549fd">CreateMat</link> (const std::string &amp;path, <link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61">typeMat</link> color)</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link> (const <link linkend="_struct_template">Template</link> &amp;templ1, const <link linkend="_struct_template">Template</link> &amp;templ2)</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1af84c02a29674161ec6726f7c6a3463fe">intersects</link> (const <link linkend="_struct_zone">Zone</link> &amp;rect1, const <link linkend="_struct_zone">Zone</link> &amp;rect2)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1a20a7a3d735be5b59a78d1fd505f198dd">messageFound</link> (const <link linkend="_struct_template">Template</link> &amp;templ, bool found)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1ac8e3a251644361c193c8b3d95403b85d">messageFound</link> (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, bool found)</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1aec980fb4849dfd312ae3d40c35c5cad6">cvmtfTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;tempimg, const <link linkend="_struct_template">Template</link> &amp;backgroundimage, <link linkend="_struct_template">Template</link> &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1afb1f712add6873e9f6c1446f75c2e260">cvmtfMultipleTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;tempimg, const <link linkend="_struct_template">Template</link> &amp;background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a017a0e5a3230a62091066460747f8776">cvmtfMultipleTemplate</link> (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;allTempl, const <link linkend="_struct_template">Template</link> &amp;background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1ab81fea58f2d602b98fc733aa518f2c59">cvmtfOneTemplate</link> (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;allTempl, const <link linkend="_struct_template">Template</link> &amp;background, <link linkend="_struct_template">Template</link> &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a6708389c5e45be6e92ea760cef3ec9ea">cvmtfCompareOneTemplate</link> (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;allTempl, const <link linkend="_struct_template">Template</link> &amp;background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;similartemplates, <link linkend="_struct_template">Template</link> &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a70466e523d4d4082d2fa9906974775d7">cvmtfOneMultipleTemplate</link> (const std::vector&lt; std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &gt; &amp;allTempl, const <link linkend="_struct_template">Template</link> &amp;background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a821d691b8432ab883e71fed407fb8025">cvmtfAllTemplate</link> (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;allTempl, const <link linkend="_struct_template">Template</link> &amp;background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a9e1355e7efa02ab22d9e1ded39b0c122">cvmtfCompareTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;goodTemplate, const <link linkend="_struct_template">Template</link> &amp;background, const <link linkend="_struct_template">Template</link> &amp;similartemplate, <link linkend="_struct_template">Template</link> &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a944308241e979ded74a0e1a9c262157a">cvmtfCompareMultipleTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;goodTemplate, const <link linkend="_struct_template">Template</link> &amp;background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;similartemplates, <link linkend="_struct_template">Template</link> &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1acc292d8056e0864414412fe49006d3af">cvmtfMultipleTemplateCompareMultipleTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;goodTemplate, const <link linkend="_struct_template">Template</link> &amp;background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;similartemplates, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a91f54668d3beda4c6bc196038cd56411">cvmtfMultipleTemplateCompareMultipleTemplate</link> (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;goodTemplate, const <link linkend="_struct_template">Template</link> &amp;background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;similartemplates, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult, <link linkend="_struct_zone">Zone</link> Z=<link linkend="_struct_zone">Zone</link>())</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1a7521a083566181475d36ee14aad60f1d">multipleMatchTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;templateImg, const <link linkend="_struct_template">Template</link> &amp;background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp;Tresult)</para>
</listitem>
            <listitem><para>bool <link linkend="_fopencv_8h_1ae51fd1f3ed39bd8c9b8da4a313d5aeb3">oneMatchTemplate</link> (const <link linkend="_struct_template">Template</link> &amp;templateImg, const <link linkend="_struct_template">Template</link> &amp;background, <link linkend="_struct_template">Template</link> &amp;Tresult)</para>
</listitem>
            <listitem><para><link linkend="_struct_template">Template</link> <link linkend="_fopencv_8h_1aed6092f864c145fab7cba35414cdd47b">extractZone</link> (const <link linkend="_struct_template">Template</link> &amp;image, <link linkend="_struct_zone">Zone</link> Z)</para>
</listitem>
            <listitem><para>cv::Vec3b <link linkend="_fopencv_8h_1a0fbdf9bdacefdd4664983d08813d73d3">getPixel</link> (cv::Mat img, int x, int y)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1a7c904b3404eaf5f63b27530c5460b87c">showImg</link> (std::string path)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1a26eb586061a340e892509bc69dd61dfa">showMat</link> (const cv::Mat &amp;img)</para>
</listitem>
            <listitem><para>cv::Mat <link linkend="_fopencv_8h_1aa4a2e719d8c3ffa0251a144f3c7bb7f6">DetectContours</link> (cv::Mat img)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1a88f1073464ea1eda29fdd6585b1225e0">getContours</link> (std::string pathImg)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1af5834294efa4c99773e98a8945ac5e90">showImgtest</link> (std::string path)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1a6b4612eb9922d9f6a63f553b45046790">performCannyEdgeDetectionFromLiveCamera</link> ()</para>
</listitem>
            <listitem><para>cv::Mat <link linkend="_fopencv_8h_1add9eb7c3df17f77c22f0a31113b2cca5">performCannyEdgeDetectionFromPicture</link> (const std::string &amp;imagePath)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1a5d4b6abd23a228c7da1096ac9929a9d2">CannyEdgeVideo</link> (std::string videoPath)</para>
</listitem>
            <listitem><para>void <link linkend="_fopencv_8h_1ab473a21d9103080cb23e448906582fea">SaveCannyEdgeVideo</link> (const std::string &amp;videoPath, const std::string &amp;outputPath)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_fopencv_8h_1a5d4b6abd23a228c7da1096ac9929a9d2"/><section>
    <title>CannyEdgeVideo()</title>
<indexterm><primary>CannyEdgeVideo</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>CannyEdgeVideo</secondary></indexterm>
<para><computeroutput>void CannyEdgeVideo (std::string videoPath)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00428">428</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1a0181b31cadb4c79a4b9e0154426549fd"/><section>
    <title>CreateMat()</title>
<indexterm><primary>CreateMat</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>CreateMat</secondary></indexterm>
<para><computeroutput>cv::Mat CreateMat (const std::string &amp; path, <link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61">typeMat</link> color)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00009">9</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a0181b31cadb4c79a4b9e0154426549fd_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a821d691b8432ab883e71fed407fb8025"/><section>
    <title>cvmtfAllTemplate()</title>
<indexterm><primary>cvmtfAllTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfAllTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfAllTemplate (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; allTempl, const <link linkend="_struct_template">Template</link> &amp; background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00293">293</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a821d691b8432ab883e71fed407fb8025_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a821d691b8432ab883e71fed407fb8025_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a944308241e979ded74a0e1a9c262157a"/><section>
    <title>cvmtfCompareMultipleTemplate()</title>
<indexterm><primary>cvmtfCompareMultipleTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfCompareMultipleTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfCompareMultipleTemplate (const <link linkend="_struct_template">Template</link> &amp; goodTemplate, const <link linkend="_struct_template">Template</link> &amp; background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; similartemplates, <link linkend="_struct_template">Template</link> &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00330">330</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a944308241e979ded74a0e1a9c262157a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a944308241e979ded74a0e1a9c262157a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a6708389c5e45be6e92ea760cef3ec9ea"/><section>
    <title>cvmtfCompareOneTemplate()</title>
<indexterm><primary>cvmtfCompareOneTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfCompareOneTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfCompareOneTemplate (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; allTempl, const <link linkend="_struct_template">Template</link> &amp; background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; similartemplates, <link linkend="_struct_template">Template</link> &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00272">272</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a6708389c5e45be6e92ea760cef3ec9ea_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a6708389c5e45be6e92ea760cef3ec9ea_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a9e1355e7efa02ab22d9e1ded39b0c122"/><section>
    <title>cvmtfCompareTemplate()</title>
<indexterm><primary>cvmtfCompareTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfCompareTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfCompareTemplate (const <link linkend="_struct_template">Template</link> &amp; goodTemplate, const <link linkend="_struct_template">Template</link> &amp; background, const <link linkend="_struct_template">Template</link> &amp; similartemplate, <link linkend="_struct_template">Template</link> &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00307">307</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a9e1355e7efa02ab22d9e1ded39b0c122_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a9e1355e7efa02ab22d9e1ded39b0c122_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a017a0e5a3230a62091066460747f8776"/><section>
    <title>cvmtfMultipleTemplate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cvmtfMultipleTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfMultipleTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfMultipleTemplate (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; allTempl, const <link linkend="_struct_template">Template</link> &amp; background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00253">253</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a017a0e5a3230a62091066460747f8776_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1afb1f712add6873e9f6c1446f75c2e260"/><section>
    <title>cvmtfMultipleTemplate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cvmtfMultipleTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfMultipleTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfMultipleTemplate (const <link linkend="_struct_template">Template</link> &amp; tempimg, const <link linkend="_struct_template">Template</link> &amp; background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00235">235</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_afb1f712add6873e9f6c1446f75c2e260_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_afb1f712add6873e9f6c1446f75c2e260_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a91f54668d3beda4c6bc196038cd56411"/><section>
    <title>cvmtfMultipleTemplateCompareMultipleTemplate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cvmtfMultipleTemplateCompareMultipleTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfMultipleTemplateCompareMultipleTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfMultipleTemplateCompareMultipleTemplate (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; goodTemplate, const <link linkend="_struct_template">Template</link> &amp; background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; similartemplates, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00385">385</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a91f54668d3beda4c6bc196038cd56411_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1acc292d8056e0864414412fe49006d3af"/><section>
    <title>cvmtfMultipleTemplateCompareMultipleTemplate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cvmtfMultipleTemplateCompareMultipleTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfMultipleTemplateCompareMultipleTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfMultipleTemplateCompareMultipleTemplate (const <link linkend="_struct_template">Template</link> &amp; goodTemplate, const <link linkend="_struct_template">Template</link> &amp; background, const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; similartemplates, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00352">352</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_acc292d8056e0864414412fe49006d3af_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_acc292d8056e0864414412fe49006d3af_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a70466e523d4d4082d2fa9906974775d7"/><section>
    <title>cvmtfOneMultipleTemplate()</title>
<indexterm><primary>cvmtfOneMultipleTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfOneMultipleTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfOneMultipleTemplate (const std::vector&lt; std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &gt; &amp; allTempl, const <link linkend="_struct_template">Template</link> &amp; background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00282">282</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a70466e523d4d4082d2fa9906974775d7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a70466e523d4d4082d2fa9906974775d7_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1ab81fea58f2d602b98fc733aa518f2c59"/><section>
    <title>cvmtfOneTemplate()</title>
<indexterm><primary>cvmtfOneTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfOneTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfOneTemplate (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; allTempl, const <link linkend="_struct_template">Template</link> &amp; background, <link linkend="_struct_template">Template</link> &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00264">264</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_ab81fea58f2d602b98fc733aa518f2c59_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_ab81fea58f2d602b98fc733aa518f2c59_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1aec980fb4849dfd312ae3d40c35c5cad6"/><section>
    <title>cvmtfTemplate()</title>
<indexterm><primary>cvmtfTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>cvmtfTemplate</secondary></indexterm>
<para><computeroutput>bool cvmtfTemplate (const <link linkend="_struct_template">Template</link> &amp; tempimg, const <link linkend="_struct_template">Template</link> &amp; backgroundimage, <link linkend="_struct_template">Template</link> &amp; Tresult, <link linkend="_struct_zone">Zone</link> Z = <computeroutput><link linkend="_struct_zone">Zone</link>()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00154">154</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_aec980fb4849dfd312ae3d40c35c5cad6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_aec980fb4849dfd312ae3d40c35c5cad6_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1aa4a2e719d8c3ffa0251a144f3c7bb7f6"/><section>
    <title>DetectContours()</title>
<indexterm><primary>DetectContours</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>DetectContours</secondary></indexterm>
<para><computeroutput>cv::Mat DetectContours (cv::Mat img)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00047">47</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_aa4a2e719d8c3ffa0251a144f3c7bb7f6_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1aed6092f864c145fab7cba35414cdd47b"/><section>
    <title>extractZone()</title>
<indexterm><primary>extractZone</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>extractZone</secondary></indexterm>
<para><computeroutput><link linkend="_struct_template">Template</link> extractZone (const <link linkend="_struct_template">Template</link> &amp; image, <link linkend="_struct_zone">Zone</link> Z)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00132">132</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_aed6092f864c145fab7cba35414cdd47b_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a88f1073464ea1eda29fdd6585b1225e0"/><section>
    <title>getContours()</title>
<indexterm><primary>getContours</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>getContours</secondary></indexterm>
<para><computeroutput>void getContours (std::string pathImg)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00059">59</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a88f1073464ea1eda29fdd6585b1225e0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a0fbdf9bdacefdd4664983d08813d73d3"/><section>
    <title>getPixel()</title>
<indexterm><primary>getPixel</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>getPixel</secondary></indexterm>
<para><computeroutput>cv::Vec3b getPixel (cv::Mat img, int x, int y)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00005">5</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1a6abdcaeee06b3da6f210daf0162bcd01"/><section>
    <title>intersects()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>intersects</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>intersects</secondary></indexterm>
<para><computeroutput>bool intersects (const <link linkend="_struct_template">Template</link> &amp; templ1, const <link linkend="_struct_template">Template</link> &amp; templ2)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00099">99</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a6abdcaeee06b3da6f210daf0162bcd01_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a6abdcaeee06b3da6f210daf0162bcd01_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1af84c02a29674161ec6726f7c6a3463fe"/><section>
    <title>intersects()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>intersects</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>intersects</secondary></indexterm>
<para><computeroutput>bool intersects (const <link linkend="_struct_zone">Zone</link> &amp; rect1, const <link linkend="_struct_zone">Zone</link> &amp; rect2)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00110">110</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1ac8e3a251644361c193c8b3d95403b85d"/><section>
    <title>messageFound()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>messageFound</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>messageFound</secondary></indexterm>
<para><computeroutput>void messageFound (const std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult, bool found)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00124">124</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_ac8e3a251644361c193c8b3d95403b85d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a20a7a3d735be5b59a78d1fd505f198dd"/><section>
    <title>messageFound()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>messageFound</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>messageFound</secondary></indexterm>
<para><computeroutput>void messageFound (const <link linkend="_struct_template">Template</link> &amp; templ, bool found)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00115">115</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a20a7a3d735be5b59a78d1fd505f198dd_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a7521a083566181475d36ee14aad60f1d"/><section>
    <title>multipleMatchTemplate()</title>
<indexterm><primary>multipleMatchTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>multipleMatchTemplate</secondary></indexterm>
<para><computeroutput>bool multipleMatchTemplate (const <link linkend="_struct_template">Template</link> &amp; templateImg, const <link linkend="_struct_template">Template</link> &amp; background, std::vector&lt; <link linkend="_struct_template">Template</link> &gt; &amp; Tresult)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00197">197</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a7521a083566181475d36ee14aad60f1d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a7521a083566181475d36ee14aad60f1d_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1ae51fd1f3ed39bd8c9b8da4a313d5aeb3"/><section>
    <title>oneMatchTemplate()</title>
<indexterm><primary>oneMatchTemplate</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>oneMatchTemplate</secondary></indexterm>
<para><computeroutput>bool oneMatchTemplate (const <link linkend="_struct_template">Template</link> &amp; templateImg, const <link linkend="_struct_template">Template</link> &amp; background, <link linkend="_struct_template">Template</link> &amp; Tresult)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00173">173</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_ae51fd1f3ed39bd8c9b8da4a313d5aeb3_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1a6b4612eb9922d9f6a63f553b45046790"/><section>
    <title>performCannyEdgeDetectionFromLiveCamera()</title>
<indexterm><primary>performCannyEdgeDetectionFromLiveCamera</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>performCannyEdgeDetectionFromLiveCamera</secondary></indexterm>
<para><computeroutput>void performCannyEdgeDetectionFromLiveCamera ( )</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00535">535</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1add9eb7c3df17f77c22f0a31113b2cca5"/><section>
    <title>performCannyEdgeDetectionFromPicture()</title>
<indexterm><primary>performCannyEdgeDetectionFromPicture</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>performCannyEdgeDetectionFromPicture</secondary></indexterm>
<para><computeroutput>cv::Mat performCannyEdgeDetectionFromPicture (const std::string &amp; imagePath)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00515">515</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1ab473a21d9103080cb23e448906582fea"/><section>
    <title>SaveCannyEdgeVideo()</title>
<indexterm><primary>SaveCannyEdgeVideo</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>SaveCannyEdgeVideo</secondary></indexterm>
<para><computeroutput>void SaveCannyEdgeVideo (const std::string &amp; videoPath, const std::string &amp; outputPath)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00473">473</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1a7c904b3404eaf5f63b27530c5460b87c"/><section>
    <title>showImg()</title>
<indexterm><primary>showImg</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>showImg</secondary></indexterm>
<para><computeroutput>void showImg (std::string path)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00026">26</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a7c904b3404eaf5f63b27530c5460b87c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_fopencv_8h_1af5834294efa4c99773e98a8945ac5e90"/><section>
    <title>showImgtest()</title>
<indexterm><primary>showImgtest</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>showImgtest</secondary></indexterm>
<para><computeroutput>void showImgtest (std::string path)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00069">69</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
</section>
<anchor xml:id="_fopencv_8h_1a26eb586061a340e892509bc69dd61dfa"/><section>
    <title>showMat()</title>
<indexterm><primary>showMat</primary><secondary>fopencv.h</secondary></indexterm>
<indexterm><primary>fopencv.h</primary><secondary>showMat</secondary></indexterm>
<para><computeroutput>void showMat (const cv::Mat &amp; img)</computeroutput></para><para>
Definition at line <link linkend="_fopencv_8cpp_source_1l00036">36</link> of file <link linkend="_fopencv_8cpp_source">fopencv.cpp</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="fopencv_8h_a26eb586061a340e892509bc69dd61dfa_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
