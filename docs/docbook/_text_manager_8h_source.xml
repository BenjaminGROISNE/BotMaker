<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__text_manager_8h_source" xml:lang="en-US">
<title>TextManager.h</title>
<indexterm><primary>src/TextManager.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__text_manager_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;filesystem&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00008"/>00008 
<anchor xml:id="__text_manager_8h_source_1l00009"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">00009</link> <emphasis role="keyword">enum</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;{
<anchor xml:id="__text_manager_8h_source_1l00010"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">00010</link> &#32;&#32;&#32;&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>,
<anchor xml:id="__text_manager_8h_source_1l00011"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76daf38784ef4b08f294d4a78f62181729a0">00011</link> &#32;&#32;&#32;&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76daf38784ef4b08f294d4a78f62181729a0">APPEND</link>,
<anchor xml:id="__text_manager_8h_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76da5d8c28daa563cffcab51f34a0bec098d">OVERWRITE</link>
<anchor xml:id="__text_manager_8h_source_1l00013"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76da5d8c28daa563cffcab51f34a0bec098d">00013</link> };
<anchor xml:id="__text_manager_8h_source_1l00014"/>00014 
<anchor xml:id="__text_manager_8h_source_1l00015"/>00015 std::string&#32;<link linkend="__text_manager_8h_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00016"/>00016 std::string&#32;<link linkend="__text_manager_8h_1a7877c01eb21ddf2a0d98bfc1f11de9df">getCorrectPath</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00017"/>00017 std::string&#32;<link linkend="__text_manager_8h_1a34a7fbcd3165980b6f6a9e00f79af34c">appendToFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folderName,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fileName);
<anchor xml:id="__text_manager_8h_source_1l00018"/>00018 std::ofstream&#32;<link linkend="__text_manager_8h_1ab94653432c8ce86c30be348c8c30caab">getOfstreamFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method=<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>);
<anchor xml:id="__text_manager_8h_source_1l00019"/>00019 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1a17dcf01a80ea6a03039f6792fe0ce1ec">writeToFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method=&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>);
<anchor xml:id="__text_manager_8h_source_1l00020"/>00020 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1ae4fe8a84012650993d5d2fac420daec2">clearFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00021"/>00021 std::string&#32;<link linkend="__text_manager_8h_1a403fecdff00b4440493fcda0d42efb0c">extractBetween</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end);
<anchor xml:id="__text_manager_8h_source_1l00022"/>00022 std::string&#32;<link linkend="__text_manager_8h_1ae390b108793fa81984968410a695c1af">extractLineContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end);
<anchor xml:id="__text_manager_8h_source_1l00023"/>00023 std::string&#32;<link linkend="__text_manager_8h_1ac695ebe5513185f42689b419f58d8a83">updateContent</link>(std::string&#32;fullContent,&#32;std::string&#32;newContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end);
<anchor xml:id="__text_manager_8h_source_1l00024"/>00024 std::string&#32;<link linkend="__text_manager_8h_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter);
<anchor xml:id="__text_manager_8h_source_1l00025"/>00025 std::string&#32;<link linkend="__text_manager_8h_1aff8311b88dbf5f3091f3ac1262543242">getStringBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00026"/>00026 std::string&#32;<link linkend="__text_manager_8h_1a1e51a0b4d80fa91c2b174d65be392cb6">getStringUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos);
<anchor xml:id="__text_manager_8h_source_1l00027"/>00027 std::string&#32;<link linkend="__text_manager_8h_1a68949f143705185b5de387b1250a8599">getStringStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos);
<anchor xml:id="__text_manager_8h_source_1l00028"/>00028 std::string&#32;<link linkend="__text_manager_8h_1a1e51a0b4d80fa91c2b174d65be392cb6">getStringUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00029"/>00029 std::string&#32;<link linkend="__text_manager_8h_1a6956d58559ef67f422247fdeb1c22775">getStringAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00030"/>00030 <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8h_1a1dd90943aa6af977600339afcf35fab5">getPosAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset=0);
<anchor xml:id="__text_manager_8h_source_1l00031"/>00031 <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8h_1a3a37fb4ca03837c1478d42d69ba70da5">getPosEnd</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset=0);
<anchor xml:id="__text_manager_8h_source_1l00032"/>00032 std::string&#32;<link linkend="__text_manager_8h_1a68949f143705185b5de387b1250a8599">getStringStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00033"/>00033 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1a72a90b0bbf9fa83e1542341baef2d051">isBeforeStrict</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;after);
<anchor xml:id="__text_manager_8h_source_1l00034"/>00034 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1a91f22ed7b57fcd5b0c51ef13f0c13873">isBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;after);
<anchor xml:id="__text_manager_8h_source_1l00035"/>00035 std::string&#32;<link linkend="__text_manager_8h_1a5adfb1e14ce20866bfe01ed05b344a87">getStringInsideBorders</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;open,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;close);
<anchor xml:id="__text_manager_8h_source_1l00036"/>00036 std::string&#32;<link linkend="__text_manager_8h_1aa98ebbb97e30e73c3fec5e26ec1305d8">getStringBeforeLastMatch</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;match);
<anchor xml:id="__text_manager_8h_source_1l00037"/>00037 std::string&#32;<link linkend="__text_manager_8h_1a8e4fb03d21e39e65bf90e109939b0105">reverseString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text);
<anchor xml:id="__text_manager_8h_source_1l00038"/>00038 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8h_1a278c93e4da07307afdf330e31213045a">countMatches</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00039"/>00039 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8h_1a12bb0eb588142af2450f2258403d6abc">countMatchesBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end);
<anchor xml:id="__text_manager_8h_source_1l00040"/>00040 
<anchor xml:id="__text_manager_8h_source_1l00041"/>00041 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1aa6913b7fe272fe20684f1c5c701d54d7">skipSpace</link>(std::string&amp;&#32;text);
<anchor xml:id="__text_manager_8h_source_1l00042"/>00042 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1a46d952a72f09b33c8620f9978b962cee">beginsBySpace</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text);
<anchor xml:id="__text_manager_8h_source_1l00043"/>00043 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1aa18ab3a474aba30784c5521be8a7da65">beginsBySequence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sequence);
<anchor xml:id="__text_manager_8h_source_1l00044"/>00044 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1ae58f22c7238c63a9ffd8ac0f9fb36216">skipAnySequence</link>(std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sequence);
<anchor xml:id="__text_manager_8h_source_1l00045"/>00045 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1a053e0b36b2796cc4d128150353f13449">skipSequence</link>(std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sequence);
<anchor xml:id="__text_manager_8h_source_1l00046"/>00046 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1af6e89ec4a1e0eeb2651936f54b6b8ba1">containsSequence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset=0);
<anchor xml:id="__text_manager_8h_source_1l00047"/>00047 <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8h_1a286351ee99fdb7bb6345fdc7e6b6938f">getSequencePos</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;seq,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset&#32;=&#32;0);
<anchor xml:id="__text_manager_8h_source_1l00048"/>00048 <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8h_1aea426de6db2fac6479961dba4f2e6c23">getSequencePosR</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;seq,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;offset=std::string::npos);
<anchor xml:id="__text_manager_8h_source_1l00049"/>00049 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1a6d41db9b9e6416e155fc5bdeeacef16c">printFileContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00050"/>00050 std::string&#32;<link linkend="__text_manager_8h_1ab7ccde875039001c7db16bf6eae6936b">eraseLastMatch</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00051"/>00051 std::vector&lt;std::string&gt;&#32;<link linkend="__text_manager_8h_1a42b898aede0151587625671fa5ba1ef3">getAllLines</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter);
<anchor xml:id="__text_manager_8h_source_1l00052"/>00052 std::string&#32;<link linkend="__text_manager_8h_1a5f4889fcc6892114ae5ea80e2fec852e">removeContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00053"/>00053 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1a4d7e873070d3addef773ee502b520f7e">to_bool</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s);
<anchor xml:id="__text_manager_8h_source_1l00054"/>00054 std::string&#32;<link linkend="__text_manager_8h_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c);
<anchor xml:id="__text_manager_8h_source_1l00055"/>00055 std::string&#32;<link linkend="__text_manager_8h_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;char&gt;&amp;&#32;c);
<anchor xml:id="__text_manager_8h_source_1l00056"/>00056 
<anchor xml:id="__text_manager_8h_source_1l00057"/>00057 
</programlisting></section>
