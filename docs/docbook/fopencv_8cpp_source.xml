<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_fopencv_8cpp_source" xml:lang="en-US">
<title>fopencv.cpp</title>
<indexterm><primary>src/fopencv.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_fopencv_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_fopencv_8h">fopencv.h</link>&quot;</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00002"/>00002 
<anchor xml:id="_fopencv_8cpp_source_1l00003"/>00003 
<anchor xml:id="_fopencv_8cpp_source_1l00004"/>00004 
<anchor xml:id="_fopencv_8cpp_source_1l00005"/><link linkend="_fopencv_8cpp_1a0fbdf9bdacefdd4664983d08813d73d3">00005</link> cv::Vec3b&#32;<link linkend="_fopencv_8cpp_1a0fbdf9bdacefdd4664983d08813d73d3">getPixel</link>(cv::Mat&#32;img,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;img.at&lt;cv::Vec3b&gt;(y,&#32;x);
<anchor xml:id="_fopencv_8cpp_source_1l00007"/>00007 }
<anchor xml:id="_fopencv_8cpp_source_1l00008"/>00008 
<anchor xml:id="_fopencv_8cpp_source_1l00009"/><link linkend="_fopencv_8cpp_1a5c455ed716b7fa4c675446fc5b8ba4fb">00009</link> cv::Mat&#32;<link linkend="_fopencv_8cpp_1a5c455ed716b7fa4c675446fc5b8ba4fb">CreateMat</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;imagePath,&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61">typeMat</link>&#32;color&#32;=&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a0d368292f17012d66912908725eaedbb">Color</link>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;cv::Mat&#32;image;
<anchor xml:id="_fopencv_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(color)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a0d368292f17012d66912908725eaedbb">Color</link>:
<anchor xml:id="_fopencv_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;image&#32;=&#32;cv::imread(imagePath,&#32;cv::IMREAD_COLOR);
<anchor xml:id="_fopencv_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a551cc46435cf57d89ca000b540d78ab0">Gray</link>:
<anchor xml:id="_fopencv_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;image&#32;=&#32;cv::imread(imagePath,&#32;cv::IMREAD_GRAYSCALE);
<anchor xml:id="_fopencv_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(image.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Failed&#32;to&#32;read&#32;image&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;imagePath&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cv::Mat();
<anchor xml:id="_fopencv_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;image;
<anchor xml:id="_fopencv_8cpp_source_1l00024"/>00024 }
<anchor xml:id="_fopencv_8cpp_source_1l00025"/>00025 
<anchor xml:id="_fopencv_8cpp_source_1l00026"/><link linkend="_fopencv_8cpp_1a7c904b3404eaf5f63b27530c5460b87c">00026</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a7c904b3404eaf5f63b27530c5460b87c">showImg</link>(std::string&#32;path)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;cv::Mat&#32;img&#32;=&#32;<link linkend="_fopencv_8cpp_1a5c455ed716b7fa4c675446fc5b8ba4fb">CreateMat</link>(path);
<anchor xml:id="_fopencv_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;imshow(<emphasis role="stringliteral">&quot;img&quot;</emphasis>,&#32;img);
<anchor xml:id="_fopencv_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;height;
<anchor xml:id="_fopencv_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a61d85a8cc16ea3d6e2e86d14beb29804">GetRelativeResolution</link>(width,&#32;height);
<anchor xml:id="_fopencv_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;(width&#32;-&#32;img.cols)&#32;/&#32;2;
<anchor xml:id="_fopencv_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;(height&#32;-&#32;img.rows)&#32;/&#32;2;
<anchor xml:id="_fopencv_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;cv::moveWindow(<emphasis role="stringliteral">&quot;img&quot;</emphasis>,&#32;x,&#32;y);
<anchor xml:id="_fopencv_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;cv::waitKey(0);
<anchor xml:id="_fopencv_8cpp_source_1l00035"/>00035 }
<anchor xml:id="_fopencv_8cpp_source_1l00036"/><link linkend="_fopencv_8cpp_1a26eb586061a340e892509bc69dd61dfa">00036</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a26eb586061a340e892509bc69dd61dfa">showMat</link>(<emphasis role="keyword">const</emphasis>&#32;cv::Mat&amp;&#32;img)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;imshow(<emphasis role="stringliteral">&quot;img&quot;</emphasis>,&#32;img);
<anchor xml:id="_fopencv_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;height;
<anchor xml:id="_fopencv_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a61d85a8cc16ea3d6e2e86d14beb29804">GetRelativeResolution</link>(width,&#32;height);
<anchor xml:id="_fopencv_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;(width&#32;-&#32;img.cols)&#32;/&#32;4;
<anchor xml:id="_fopencv_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;(height&#32;-&#32;img.rows)&#32;/&#32;4;
<anchor xml:id="_fopencv_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;cv::moveWindow(<emphasis role="stringliteral">&quot;img&quot;</emphasis>,&#32;x,&#32;y);
<anchor xml:id="_fopencv_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;cv::waitKey(1000);
<anchor xml:id="_fopencv_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;cv::destroyWindow(<emphasis role="stringliteral">&quot;img&quot;</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00045"/>00045 }
<anchor xml:id="_fopencv_8cpp_source_1l00046"/>00046 
<anchor xml:id="_fopencv_8cpp_source_1l00047"/><link linkend="_fopencv_8cpp_1aa4a2e719d8c3ffa0251a144f3c7bb7f6">00047</link> cv::Mat&#32;<link linkend="_fopencv_8cpp_1aa4a2e719d8c3ffa0251a144f3c7bb7f6">DetectContours</link>(cv::Mat&#32;img)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;cv::Mat&#32;imgBlur,&#32;imgCanny,&#32;imgDil,&#32;imgErode,&#32;imgRange;
<anchor xml:id="_fopencv_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;cv::Scalar&#32;lower(50,&#32;0,&#32;100);
<anchor xml:id="_fopencv_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;cv::Scalar&#32;upper(100,&#32;255,&#32;150);
<anchor xml:id="_fopencv_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;inRange(img,&#32;lower,&#32;upper,&#32;imgRange);
<anchor xml:id="_fopencv_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;GaussianBlur(imgRange,&#32;imgBlur,&#32;cv::Size(0,&#32;0),&#32;1,&#32;0);
<anchor xml:id="_fopencv_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;Canny(imgBlur,&#32;imgCanny,&#32;65,&#32;75);
<anchor xml:id="_fopencv_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;cv::Mat&#32;kernel&#32;=&#32;cv::getStructuringElement(cv::MORPH_RECT,&#32;cv::Size(3,&#32;3));
<anchor xml:id="_fopencv_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;dilate(imgCanny,&#32;imgDil,&#32;kernel);
<anchor xml:id="_fopencv_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;imgDil;
<anchor xml:id="_fopencv_8cpp_source_1l00057"/>00057 }
<anchor xml:id="_fopencv_8cpp_source_1l00058"/>00058 
<anchor xml:id="_fopencv_8cpp_source_1l00059"/><link linkend="_fopencv_8cpp_1a88f1073464ea1eda29fdd6585b1225e0">00059</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a88f1073464ea1eda29fdd6585b1225e0">getContours</link>(std::string&#32;pathImg)&#32;{&#32;<emphasis role="comment">//à&#32;revoir</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;cv::Mat&#32;img&#32;=&#32;<link linkend="_fopencv_8cpp_1a5c455ed716b7fa4c675446fc5b8ba4fb">CreateMat</link>(pathImg);
<anchor xml:id="_fopencv_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;cv::Mat&#32;imgDil&#32;=&#32;<link linkend="_fopencv_8cpp_1aa4a2e719d8c3ffa0251a144f3c7bb7f6">DetectContours</link>(img);
<anchor xml:id="_fopencv_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;cv::Point&gt;&gt;contours;
<anchor xml:id="_fopencv_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;std::vector&lt;cv::Vec4i&gt;hierarchy;
<anchor xml:id="_fopencv_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;findContours(imgDil,&#32;contours,&#32;hierarchy,&#32;cv::RETR_EXTERNAL,&#32;cv::CHAIN_APPROX_SIMPLE);
<anchor xml:id="_fopencv_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;drawContours(img,&#32;contours,&#32;-1,&#32;cv::Scalar(255,&#32;0,&#32;255),&#32;2);
<anchor xml:id="_fopencv_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;imshow(<emphasis role="stringliteral">&quot;img&quot;</emphasis>,&#32;img);
<anchor xml:id="_fopencv_8cpp_source_1l00067"/>00067 }
<anchor xml:id="_fopencv_8cpp_source_1l00068"/>00068 
<anchor xml:id="_fopencv_8cpp_source_1l00069"/><link linkend="_fopencv_8cpp_1af5834294efa4c99773e98a8945ac5e90">00069</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1af5834294efa4c99773e98a8945ac5e90">showImgtest</link>(std::string&#32;path)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hmin&#32;=&#32;0,&#32;smin&#32;=&#32;0,&#32;vmin&#32;=&#32;0;
<anchor xml:id="_fopencv_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hmax&#32;=&#32;255,&#32;smax&#32;=&#32;255,&#32;vmax&#32;=&#32;255;
<anchor xml:id="_fopencv_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;cv::Mat&#32;img&#32;=&#32;cv::imread(path,&#32;cv::IMREAD_REDUCED_COLOR_2);
<anchor xml:id="_fopencv_8cpp_source_1l00073"/>00073 
<anchor xml:id="_fopencv_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;cv::Mat&#32;imgHSV,&#32;mask;
<anchor xml:id="_fopencv_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;cvtColor(img,&#32;imgHSV,&#32;cv::COLOR_BGR2HSV);
<anchor xml:id="_fopencv_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;cv::namedWindow(<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;(640,&#32;200));
<anchor xml:id="_fopencv_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;cv::createTrackbar(<emphasis role="stringliteral">&quot;Hue&#32;min&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;&amp;hmin,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;cv::createTrackbar(<emphasis role="stringliteral">&quot;Hue&#32;max&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;&amp;hmax,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;cv::createTrackbar(<emphasis role="stringliteral">&quot;sat&#32;min&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;&amp;smin,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;cv::createTrackbar(<emphasis role="stringliteral">&quot;sat&#32;max&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;&amp;smax,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;cv::createTrackbar(<emphasis role="stringliteral">&quot;Val&#32;min&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;&amp;vmin,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;cv::createTrackbar(<emphasis role="stringliteral">&quot;Val&#32;max&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;&amp;vmax,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00083"/>00083 
<anchor xml:id="_fopencv_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Scalar&#32;lower(0,&#32;0,&#32;213);
<anchor xml:id="_fopencv_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Scalar&#32;upper(255,&#32;179,&#32;255);
<anchor xml:id="_fopencv_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inRange(imgHSV,&#32;lower,&#32;upper,&#32;mask);
<anchor xml:id="_fopencv_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imshow(<emphasis role="stringliteral">&quot;Image&quot;</emphasis>,&#32;img);
<anchor xml:id="_fopencv_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::moveWindow(<emphasis role="stringliteral">&quot;Image&quot;</emphasis>,&#32;0,&#32;0);
<anchor xml:id="_fopencv_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imshow(<emphasis role="stringliteral">&quot;imagemod1&quot;</emphasis>,&#32;imgHSV);
<anchor xml:id="_fopencv_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::moveWindow(<emphasis role="stringliteral">&quot;imagemod1&quot;</emphasis>,&#32;0,&#32;400);
<anchor xml:id="_fopencv_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imshow(<emphasis role="stringliteral">&quot;imagemod2&quot;</emphasis>,&#32;mask);
<anchor xml:id="_fopencv_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::moveWindow(<emphasis role="stringliteral">&quot;imagemod2&quot;</emphasis>,&#32;700,&#32;0);
<anchor xml:id="_fopencv_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::moveWindow(<emphasis role="stringliteral">&quot;Track&quot;</emphasis>,&#32;700,&#32;400);
<anchor xml:id="_fopencv_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::waitKey(1);
<anchor xml:id="_fopencv_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00097"/>00097 }
<anchor xml:id="_fopencv_8cpp_source_1l00098"/>00098 
<anchor xml:id="_fopencv_8cpp_source_1l00099"/><link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">00099</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ2)
<anchor xml:id="_fopencv_8cpp_source_1l00100"/>00100 {
<anchor xml:id="_fopencv_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<link linkend="_struct_coord">Coord</link>&#32;topLeft1&#32;=&#32;templ1.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<link linkend="_struct_coord">Coord</link>&#32;topLeft2&#32;=&#32;templ2.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<link linkend="_struct_coord">Coord</link>&#32;botRight1&#32;=&#32;templ1.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>&#32;+&#32;<link linkend="_struct_coord">Coord</link>(templ1.<link linkend="_struct_template_1ab59f2a046fc791a75b0aba9b2ff9707d">width</link>,&#32;templ1.<link linkend="_struct_template_1a1d17a59e2a5f2c2772d9fa04066f7b09">height</link>);
<anchor xml:id="_fopencv_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<link linkend="_struct_coord">Coord</link>&#32;botRight2&#32;=&#32;templ2.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>&#32;+&#32;<link linkend="_struct_coord">Coord</link>(templ2.<link linkend="_struct_template_1ab59f2a046fc791a75b0aba9b2ff9707d">width</link>,&#32;templ2.<link linkend="_struct_template_1a1d17a59e2a5f2c2772d9fa04066f7b09">height</link>);
<anchor xml:id="_fopencv_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<link linkend="_struct_zone">Zone</link>&#32;rect1(topLeft1,&#32;botRight1);
<anchor xml:id="_fopencv_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<link linkend="_struct_zone">Zone</link>&#32;rect2(topLeft2,&#32;botRight2);
<anchor xml:id="_fopencv_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(rect1,&#32;rect2);
<anchor xml:id="_fopencv_8cpp_source_1l00108"/>00108 }
<anchor xml:id="_fopencv_8cpp_source_1l00109"/>00109 
<anchor xml:id="_fopencv_8cpp_source_1l00110"/><link linkend="_fopencv_8cpp_1af84c02a29674161ec6726f7c6a3463fe">00110</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_zone">Zone</link>&amp;&#32;rect1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_zone">Zone</link>&amp;&#32;rect2)
<anchor xml:id="_fopencv_8cpp_source_1l00111"/>00111 {
<anchor xml:id="_fopencv_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(rect1.<link linkend="_struct_zone_1a530a398cfac07a831e7a4254c539fd90">left</link>&#32;&lt;&#32;rect2.<link linkend="_struct_zone_1abffc337838fa9f1bc6ef1f932682a69e">right</link>&#32;&amp;&amp;&#32;rect1.<link linkend="_struct_zone_1abffc337838fa9f1bc6ef1f932682a69e">right</link>&#32;&gt;&#32;rect2.<link linkend="_struct_zone_1a530a398cfac07a831e7a4254c539fd90">left</link>&#32;&amp;&amp;&#32;rect1.<link linkend="_struct_zone_1afa2cbd6061365fe4104b4a8f0eb66a73">top</link>&#32;&lt;&#32;rect2.<link linkend="_struct_zone_1a9f5a4c5c1fa43f736a0ec57e57739497">bottom</link>&#32;&amp;&amp;&#32;rect1.<link linkend="_struct_zone_1a9f5a4c5c1fa43f736a0ec57e57739497">bottom</link>&#32;&gt;&#32;rect2.<link linkend="_struct_zone_1afa2cbd6061365fe4104b4a8f0eb66a73">top</link>);
<anchor xml:id="_fopencv_8cpp_source_1l00113"/>00113 }
<anchor xml:id="_fopencv_8cpp_source_1l00114"/>00114 
<anchor xml:id="_fopencv_8cpp_source_1l00115"/><link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">00115</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FOUND&#32;MaxVal:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Tresult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;X:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Tresult.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>.<link linkend="_struct_coord_1a696eaa744360fc791d0e3b331c549dbe">x</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Y:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Tresult.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>.<link linkend="_struct_coord_1a214166cca70cef7dda9201689c3e81ab">y</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Tresult.<link linkend="_struct_template_1a7d3b343c5b1f0dce079476ecc5962985">id</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Not&#32;found&#32;MaxVal:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Tresult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Tresult.<link linkend="_struct_template_1a7d3b343c5b1f0dce079476ecc5962985">id</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00122"/>00122 }
<anchor xml:id="_fopencv_8cpp_source_1l00123"/>00123 
<anchor xml:id="_fopencv_8cpp_source_1l00124"/><link linkend="_fopencv_8cpp_1ac8e3a251644361c193c8b3d95403b85d">00124</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_struct_template">Template</link>&#32;templ&#32;:&#32;Tresult)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(templ,&#32;found);
<anchor xml:id="_fopencv_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00128"/>00128 }
<anchor xml:id="_fopencv_8cpp_source_1l00129"/>00129 
<anchor xml:id="_fopencv_8cpp_source_1l00130"/>00130 
<anchor xml:id="_fopencv_8cpp_source_1l00131"/>00131 
<anchor xml:id="_fopencv_8cpp_source_1l00132"/><link linkend="_fopencv_8cpp_1af6fc77188d314c0d5a58888452f9b313">00132</link> <link linkend="_struct_template">Template</link>&#32;<link linkend="_fopencv_8cpp_1af6fc77188d314c0d5a58888452f9b313">extractZone</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newRight&#32;=&#32;Z.<link linkend="_struct_zone_1abffc337838fa9f1bc6ef1f932682a69e">right</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newLeft&#32;=&#32;Z.<link linkend="_struct_zone_1a530a398cfac07a831e7a4254c539fd90">left</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newTop&#32;=&#32;Z.<link linkend="_struct_zone_1afa2cbd6061365fe4104b4a8f0eb66a73">top</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newBottom&#32;=&#32;Z.<link linkend="_struct_zone_1a9f5a4c5c1fa43f736a0ec57e57739497">bottom</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newRight&#32;&lt;&#32;templ.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>.cols)newRight++;
<anchor xml:id="_fopencv_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newLeft&#32;&gt;&#32;0)newLeft--;
<anchor xml:id="_fopencv_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newTop&#32;&gt;&#32;0)newTop--;
<anchor xml:id="_fopencv_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newBottom&#32;&lt;&#32;templ.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>.rows)newBottom++;
<anchor xml:id="_fopencv_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newWidth&#32;=&#32;abs(newRight&#32;-&#32;newLeft);
<anchor xml:id="_fopencv_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newHeight&#32;=&#32;abs(newBottom&#32;-&#32;newTop);
<anchor xml:id="_fopencv_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;cv::Rect&#32;roiRect(newLeft,&#32;newTop,&#32;newWidth,&#32;newHeight);
<anchor xml:id="_fopencv_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;cv::Mat&#32;graymatROI&#32;=&#32;templ.<link linkend="_struct_template_1af95fe5a1cdb4e8d32451db2b3ad29a4c">graymat</link>(roiRect).clone();
<anchor xml:id="_fopencv_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;cv::Mat&#32;matROI&#32;=&#32;templ.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>(roiRect).clone();
<anchor xml:id="_fopencv_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<link linkend="_struct_template">Template</link>&#32;newTemplate(templ);
<anchor xml:id="_fopencv_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;newTemplate.<link linkend="_struct_template_1ab59f2a046fc791a75b0aba9b2ff9707d">width</link>&#32;=&#32;graymatROI.cols;
<anchor xml:id="_fopencv_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;newTemplate.<link linkend="_struct_template_1a1d17a59e2a5f2c2772d9fa04066f7b09">height</link>&#32;=&#32;graymatROI.rows;
<anchor xml:id="_fopencv_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;newTemplate.<link linkend="_struct_template_1af95fe5a1cdb4e8d32451db2b3ad29a4c">graymat</link>&#32;=&#32;graymatROI;
<anchor xml:id="_fopencv_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;newTemplate.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>&#32;=&#32;matROI;
<anchor xml:id="_fopencv_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newTemplate;
<anchor xml:id="_fopencv_8cpp_source_1l00152"/>00152 }
<anchor xml:id="_fopencv_8cpp_source_1l00153"/>00153 
<anchor xml:id="_fopencv_8cpp_source_1l00154"/><link linkend="_fopencv_8cpp_1a69713584f69a121e4ed91918a64448a0">00154</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a69713584f69a121e4ed91918a64448a0">cvmtfTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templateImg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<link linkend="_struct_template">Template</link>&#32;newback(background);
<anchor xml:id="_fopencv_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Z.<link linkend="_struct_zone_1a5301e7fcf185a5a79c1bf7d7930f4b8a">isNull</link>())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newback&#32;=&#32;<link linkend="_fopencv_8cpp_1af6fc77188d314c0d5a58888452f9b313">extractZone</link>(background,&#32;Z);
<anchor xml:id="_fopencv_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found&#32;=&#32;<link linkend="_fopencv_8cpp_1ae51fd1f3ed39bd8c9b8da4a313d5aeb3">oneMatchTemplate</link>(templateImg,&#32;newback,&#32;Tresult);
<anchor xml:id="_fopencv_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;Tresult.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>.<link linkend="_struct_coord_1a696eaa744360fc791d0e3b331c549dbe">x</link>&#32;+=&#32;Z.<link linkend="_struct_zone_1a257bb2bacc6d2395c02d144bbd1f35c8">C1</link>.<link linkend="_struct_coord_1a696eaa744360fc791d0e3b331c549dbe">x</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;Tresult.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>.<link linkend="_struct_coord_1a214166cca70cef7dda9201689c3e81ab">y</link>&#32;+=&#32;Z.<link linkend="_struct_zone_1a257bb2bacc6d2395c02d144bbd1f35c8">C1</link>.<link linkend="_struct_coord_1a214166cca70cef7dda9201689c3e81ab">y</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00170"/>00170 }
<anchor xml:id="_fopencv_8cpp_source_1l00171"/>00171 
<anchor xml:id="_fopencv_8cpp_source_1l00172"/>00172 
<anchor xml:id="_fopencv_8cpp_source_1l00173"/><link linkend="_fopencv_8cpp_1ae51fd1f3ed39bd8c9b8da4a313d5aeb3">00173</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1ae51fd1f3ed39bd8c9b8da4a313d5aeb3">oneMatchTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templateImg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxVal&#32;=&#32;0;
<anchor xml:id="_fopencv_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;cv::Point&#32;maxLoc;
<anchor xml:id="_fopencv_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;cv::Mat&#32;resultMat;
<anchor xml:id="_fopencv_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;cv::Point&#32;topLeft;
<anchor xml:id="_fopencv_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(background.<link linkend="_struct_template_1a1ec70d2de7871cb6400bf0ac1c12e345">type</link>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a0d368292f17012d66912908725eaedbb">Color</link>:
<anchor xml:id="_fopencv_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::matchTemplate(background.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>,&#32;templateImg.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>,&#32;resultMat,&#32;cv::TM_CCOEFF_NORMED);
<anchor xml:id="_fopencv_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::minMaxLoc(resultMat,&#32;NULL,&#32;&amp;maxVal,&#32;NULL,&#32;&amp;maxLoc);
<anchor xml:id="_fopencv_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topLeft&#32;=&#32;maxLoc;
<anchor xml:id="_fopencv_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00184"/>00184 
<anchor xml:id="_fopencv_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a551cc46435cf57d89ca000b540d78ab0">Gray</link>:
<anchor xml:id="_fopencv_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::matchTemplate(background.<link linkend="_struct_template_1af95fe5a1cdb4e8d32451db2b3ad29a4c">graymat</link>,&#32;templateImg.<link linkend="_struct_template_1af95fe5a1cdb4e8d32451db2b3ad29a4c">graymat</link>,&#32;resultMat,&#32;cv::TM_CCOEFF_NORMED);
<anchor xml:id="_fopencv_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::minMaxLoc(resultMat,&#32;NULL,&#32;&amp;maxVal,&#32;NULL,&#32;&amp;maxLoc);
<anchor xml:id="_fopencv_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topLeft&#32;=&#32;maxLoc;
<anchor xml:id="_fopencv_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;Tresult&#32;=&#32;templateImg;
<anchor xml:id="_fopencv_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;Tresult.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>&#32;=&#32;<link linkend="_struct_coord">Coord</link>(topLeft.x,&#32;topLeft.y);
<anchor xml:id="_fopencv_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;Tresult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;=&#32;maxVal;
<anchor xml:id="_fopencv_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tresult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;&gt;=&#32;matchTemplatePrecision;
<anchor xml:id="_fopencv_8cpp_source_1l00195"/>00195 }
<anchor xml:id="_fopencv_8cpp_source_1l00196"/>00196 
<anchor xml:id="_fopencv_8cpp_source_1l00197"/><link linkend="_fopencv_8cpp_1a7521a083566181475d36ee14aad60f1d">00197</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a7521a083566181475d36ee14aad60f1d">multipleMatchTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templateImg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;cv::Mat&#32;matresult;
<anchor xml:id="_fopencv_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(background.<link linkend="_struct_template_1a1ec70d2de7871cb6400bf0ac1c12e345">type</link>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a0d368292f17012d66912908725eaedbb">Color</link>:
<anchor xml:id="_fopencv_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::matchTemplate(background.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>,&#32;templateImg.<link linkend="_struct_template_1a9a9825d5a96090c84020ed450751d549">mat</link>,&#32;matresult,&#32;cv::TM_CCOEFF_NORMED);
<anchor xml:id="_fopencv_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00203"/>00203 
<anchor xml:id="_fopencv_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__units_8h_1a6b62789b863165c9d424a7504d4a6f61a551cc46435cf57d89ca000b540d78ab0">Gray</link>:
<anchor xml:id="_fopencv_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::matchTemplate(background.<link linkend="_struct_template_1af95fe5a1cdb4e8d32451db2b3ad29a4c">graymat</link>,&#32;templateImg.<link linkend="_struct_template_1af95fe5a1cdb4e8d32451db2b3ad29a4c">graymat</link>,&#32;matresult,&#32;cv::TM_CCOEFF_NORMED);
<anchor xml:id="_fopencv_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;y;
<anchor xml:id="_fopencv_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;matchVal&#32;=&#32;0;
<anchor xml:id="_fopencv_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;duplicate;
<anchor xml:id="_fopencv_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<link linkend="_struct_template">Template</link>&#32;newResult(templateImg);
<anchor xml:id="_fopencv_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(y&#32;=&#32;0;&#32;y&#32;&lt;&#32;matresult.rows;&#32;++y)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(x&#32;=&#32;0;&#32;x&#32;&lt;&#32;matresult.cols;&#32;++x)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matchVal&#32;=&#32;matresult.at&lt;<emphasis role="keywordtype">float</emphasis>&gt;(y,&#32;x);
<anchor xml:id="_fopencv_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matchVal&#32;&gt;=&#32;matchTemplatePrecision)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newResult.<link linkend="_struct_template_1a6164c425299fb5841f10e46788d9dc3e">C</link>&#32;=&#32;<link linkend="_struct_coord">Coord</link>(x,&#32;y);
<anchor xml:id="_fopencv_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newResult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;=&#32;matchVal;
<anchor xml:id="_fopencv_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duplicate&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Tresult.size();&#32;++i)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(Tresult.at(i),&#32;newResult))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tresult.at(i).score&#32;&lt;&#32;newResult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tresult.erase(Tresult.begin()&#32;+&#32;i);
<anchor xml:id="_fopencv_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;duplicate&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!duplicate)Tresult.push_back(newResult);
<anchor xml:id="_fopencv_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!Tresult.empty();
<anchor xml:id="_fopencv_8cpp_source_1l00233"/>00233 }
<anchor xml:id="_fopencv_8cpp_source_1l00234"/>00234 
<anchor xml:id="_fopencv_8cpp_source_1l00235"/><link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">00235</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templateImg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;Tresult.clear();
<anchor xml:id="_fopencv_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<link linkend="_struct_template">Template</link>&#32;newback&#32;=&#32;background;
<anchor xml:id="_fopencv_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Z.<link linkend="_struct_zone_1a5301e7fcf185a5a79c1bf7d7930f4b8a">isNull</link>())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newback&#32;=&#32;<link linkend="_fopencv_8cpp_1af6fc77188d314c0d5a58888452f9b313">extractZone</link>(background,&#32;Z);
<anchor xml:id="_fopencv_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a7521a083566181475d36ee14aad60f1d">multipleMatchTemplate</link>(templateImg,&#32;newback,&#32;Tresult);
<anchor xml:id="_fopencv_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tresult.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_struct_template">Template</link>&#32;res&#32;:&#32;Tresult)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res.C&#32;=&#32;res.C&#32;+&#32;Z.<link linkend="_struct_zone_1a257bb2bacc6d2395c02d144bbd1f35c8">C1</link>;
<anchor xml:id="_fopencv_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00251"/>00251 }
<anchor xml:id="_fopencv_8cpp_source_1l00252"/>00252 
<anchor xml:id="_fopencv_8cpp_source_1l00253"/><link linkend="_fopencv_8cpp_1a25e372dc4350d3deae6094f385233852">00253</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00254"/>00254 {
<anchor xml:id="_fopencv_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;std::vector&lt;Template&gt;result;
<anchor xml:id="_fopencv_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ&#32;:&#32;allTempl)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(templ,&#32;background,&#32;result,&#32;Z);
<anchor xml:id="_fopencv_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tresult.insert(Tresult.end(),&#32;result.begin(),&#32;result.end());
<anchor xml:id="_fopencv_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!Tresult.empty();
<anchor xml:id="_fopencv_8cpp_source_1l00261"/>00261 }
<anchor xml:id="_fopencv_8cpp_source_1l00262"/>00262 
<anchor xml:id="_fopencv_8cpp_source_1l00263"/>00263 
<anchor xml:id="_fopencv_8cpp_source_1l00264"/><link linkend="_fopencv_8cpp_1abe41135f4dce8bf30bbdf6fd28d2abbc">00264</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1abe41135f4dce8bf30bbdf6fd28d2abbc">cvmtfOneTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00265"/>00265 {
<anchor xml:id="_fopencv_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ&#32;:&#32;allTempl)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a69713584f69a121e4ed91918a64448a0">cvmtfTemplate</link>(templ,&#32;background,&#32;Tresult,&#32;Z))<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00270"/>00270 }
<anchor xml:id="_fopencv_8cpp_source_1l00271"/>00271 
<anchor xml:id="_fopencv_8cpp_source_1l00272"/><link linkend="_fopencv_8cpp_1a4b7f4310e3f3a9227fa4b12401c3a94b">00272</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a4b7f4310e3f3a9227fa4b12401c3a94b">cvmtfCompareOneTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;similartemplates,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00273"/>00273 {
<anchor xml:id="_fopencv_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ&#32;:&#32;allTempl)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1ade157d547c93a4a6c0c6395cbcd15e10">cvmtfCompareMultipleTemplate</link>(templ,&#32;background,&#32;similartemplates,&#32;Tresult,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00280"/>00280 }
<anchor xml:id="_fopencv_8cpp_source_1l00281"/>00281 
<anchor xml:id="_fopencv_8cpp_source_1l00282"/><link linkend="_fopencv_8cpp_1ae8b731e67c3c69e0ca3f60a25fa37dc2">00282</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1ae8b731e67c3c69e0ca3f60a25fa37dc2">cvmtfOneMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::vector&lt;Template&gt;&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00283"/>00283 {
<anchor xml:id="_fopencv_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;templ&#32;:&#32;allTempl)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1af7a3ba48f40c0daed2b12759647e5b89">cvmtfAllTemplate</link>(templ,&#32;background,&#32;Tresult,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00291"/>00291 }
<anchor xml:id="_fopencv_8cpp_source_1l00292"/>00292 
<anchor xml:id="_fopencv_8cpp_source_1l00293"/><link linkend="_fopencv_8cpp_1af7a3ba48f40c0daed2b12759647e5b89">00293</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1af7a3ba48f40c0daed2b12759647e5b89">cvmtfAllTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;allTempl,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00294"/>00294 {
<anchor xml:id="_fopencv_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<link linkend="_struct_template">Template</link>&#32;resultSearch;
<anchor xml:id="_fopencv_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<link linkend="_struct_coord">Coord</link>&#32;temp;
<anchor xml:id="_fopencv_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;templ&#32;:&#32;allTempl)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a69713584f69a121e4ed91918a64448a0">cvmtfTemplate</link>(templ,&#32;background,&#32;resultSearch,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(resultSearch,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tresult.push_back(resultSearch);
<anchor xml:id="_fopencv_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00305"/>00305 }
<anchor xml:id="_fopencv_8cpp_source_1l00306"/>00306 
<anchor xml:id="_fopencv_8cpp_source_1l00307"/><link linkend="_fopencv_8cpp_1a248b5cdc64398082a700818b8e29ff59">00307</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a248b5cdc64398082a700818b8e29ff59">cvmtfCompareTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;simTemplate,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00308"/>00308 {
<anchor xml:id="_fopencv_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;std::vector&lt;Template&gt;resSimTemplate;
<anchor xml:id="_fopencv_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a69713584f69a121e4ed91918a64448a0">cvmtfTemplate</link>(goodTemplate,&#32;background,&#32;Tresult,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(simTemplate,&#32;background,&#32;resSimTemplate,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;simTempl&#32;:&#32;resSimTemplate)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(Tresult,&#32;simTempl))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(simTempl.score&#32;&gt;&#32;Tresult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;&amp;&amp;&#32;simTempl.id&#32;!=&#32;Tresult.<link linkend="_struct_template_1a7d3b343c5b1f0dce079476ecc5962985">id</link>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(simTempl,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00326"/>00326 
<anchor xml:id="_fopencv_8cpp_source_1l00327"/>00327 }
<anchor xml:id="_fopencv_8cpp_source_1l00328"/>00328 
<anchor xml:id="_fopencv_8cpp_source_1l00329"/>00329 
<anchor xml:id="_fopencv_8cpp_source_1l00330"/><link linkend="_fopencv_8cpp_1ade157d547c93a4a6c0c6395cbcd15e10">00330</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1ade157d547c93a4a6c0c6395cbcd15e10">cvmtfCompareMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;simTemplates,&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00331"/>00331 {
<anchor xml:id="_fopencv_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a69713584f69a121e4ed91918a64448a0">cvmtfTemplate</link>(goodTemplate,&#32;background,&#32;Tresult,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Template&gt;resSimTemplates;
<anchor xml:id="_fopencv_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(simTemplates,&#32;background,&#32;resSimTemplates,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;simTempl&#32;:&#32;resSimTemplates)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(simTempl,&#32;Tresult))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(simTempl.score&#32;&gt;&#32;Tresult.<link linkend="_struct_template_1a3f0387ee18d1195f948377b0f0903e1b">score</link>&#32;&amp;&amp;&#32;simTempl.id&#32;!=&#32;Tresult.<link linkend="_struct_template_1a7d3b343c5b1f0dce079476ecc5962985">id</link>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(simTempl,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00349"/>00349 }
<anchor xml:id="_fopencv_8cpp_source_1l00350"/>00350 
<anchor xml:id="_fopencv_8cpp_source_1l00351"/>00351 
<anchor xml:id="_fopencv_8cpp_source_1l00352"/><link linkend="_fopencv_8cpp_1a154cb9c9b19db5ba6c4df73e72c98256">00352</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a154cb9c9b19db5ba6c4df73e72c98256">cvmtfMultipleTemplateCompareMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;simTemplates,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00353"/>00353 {
<anchor xml:id="_fopencv_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;std::vector&lt;Template&gt;tabGoodTemplates;
<anchor xml:id="_fopencv_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(goodTemplate,&#32;background,&#32;tabGoodTemplates,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Template&gt;resSimTemplates;
<anchor xml:id="_fopencv_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(simTemplates,&#32;background,&#32;resSimTemplates,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Templ&#32;:&#32;tabGoodTemplates)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;overlap&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;simTempl&#32;:&#32;resSimTemplates)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(simTempl,&#32;Templ))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(simTempl.score&#32;&gt;&#32;Templ.score&#32;&amp;&amp;&#32;simTempl.id&#32;!=&#32;Templ.id)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(simTempl,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;overlap&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!overlap)Tresult.push_back(Templ);
<anchor xml:id="_fopencv_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Templ,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;Tresult.insert(Tresult.end(),&#32;tabGoodTemplates.begin(),&#32;tabGoodTemplates.end());
<anchor xml:id="_fopencv_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tresult.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(goodTemplate,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00383"/>00383 }
<anchor xml:id="_fopencv_8cpp_source_1l00384"/>00384 
<anchor xml:id="_fopencv_8cpp_source_1l00385"/><link linkend="_fopencv_8cpp_1a13c3ec7e437cd03974e9a2c2e10f355a">00385</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_fopencv_8cpp_1a154cb9c9b19db5ba6c4df73e72c98256">cvmtfMultipleTemplateCompareMultipleTemplate</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;goodTemplate,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;background,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Template&gt;&amp;&#32;simTemplates,&#32;std::vector&lt;Template&gt;&amp;&#32;Tresult,&#32;<link linkend="_struct_zone">Zone</link>&#32;Z)
<anchor xml:id="_fopencv_8cpp_source_1l00386"/>00386 {
<anchor xml:id="_fopencv_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;std::vector&lt;Template&gt;tabGoodTemplates;
<anchor xml:id="_fopencv_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(goodTemplate,&#32;background,&#32;tabGoodTemplates,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Template&gt;resSimTemplates;
<anchor xml:id="_fopencv_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a95c56af5716e2b2d1b4df612796cc229">cvmtfMultipleTemplate</link>(simTemplates,&#32;background,&#32;resSimTemplates,&#32;Z))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;Templ&#32;:&#32;tabGoodTemplates)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;overlap&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_template">Template</link>&amp;&#32;simTempl&#32;:&#32;resSimTemplates)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_fopencv_8cpp_1a6abdcaeee06b3da6f210daf0162bcd01">intersects</link>(simTempl,&#32;Templ))&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(simTempl.score&#32;&gt;&#32;Templ.score&#32;&amp;&amp;&#32;simTempl.id&#32;!=&#32;Templ.id)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(simTempl,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;overlap&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!overlap)Tresult.push_back(Templ);
<anchor xml:id="_fopencv_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;Tresult.insert(Tresult.end(),&#32;tabGoodTemplates.begin(),&#32;tabGoodTemplates.end());
<anchor xml:id="_fopencv_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tresult.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(goodTemplate,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fopencv_8cpp_1a1ed1ff1a9df2ab889e1423cb11a58c06">messageFound</link>(Tresult,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00415"/>00415 }
<anchor xml:id="_fopencv_8cpp_source_1l00416"/>00416 
<anchor xml:id="_fopencv_8cpp_source_1l00417"/>00417 
<anchor xml:id="_fopencv_8cpp_source_1l00418"/>00418 
<anchor xml:id="_fopencv_8cpp_source_1l00419"/>00419 
<anchor xml:id="_fopencv_8cpp_source_1l00420"/>00420 
<anchor xml:id="_fopencv_8cpp_source_1l00421"/>00421 
<anchor xml:id="_fopencv_8cpp_source_1l00422"/>00422 
<anchor xml:id="_fopencv_8cpp_source_1l00423"/>00423 
<anchor xml:id="_fopencv_8cpp_source_1l00424"/>00424 
<anchor xml:id="_fopencv_8cpp_source_1l00425"/>00425 
<anchor xml:id="_fopencv_8cpp_source_1l00426"/>00426 
<anchor xml:id="_fopencv_8cpp_source_1l00427"/>00427 
<anchor xml:id="_fopencv_8cpp_source_1l00428"/><link linkend="_fopencv_8cpp_1a5d4b6abd23a228c7da1096ac9929a9d2">00428</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a5d4b6abd23a228c7da1096ac9929a9d2">CannyEdgeVideo</link>(std::string&#32;videoPath)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00429"/>00429 
<anchor xml:id="_fopencv_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;&#32;cv::VideoCapture&#32;cap(videoPath);
<anchor xml:id="_fopencv_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cap.isOpened())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Unable&#32;to&#32;open&#32;the&#32;video&#32;file:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;videoPath&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00435"/>00435 
<anchor xml:id="_fopencv_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;cv::namedWindow(<emphasis role="stringliteral">&quot;Edge&#32;Image&quot;</emphasis>,&#32;cv::WINDOW_NORMAL);
<anchor xml:id="_fopencv_8cpp_source_1l00437"/>00437 
<anchor xml:id="_fopencv_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameCount&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;For&#32;debugging&#32;purposes,&#32;let&apos;s&#32;count&#32;the&#32;frames&#32;processed</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00439"/>00439 
<anchor xml:id="_fopencv_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Mat&#32;frame;
<anchor xml:id="_fopencv_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cap&#32;&gt;&gt;&#32;frame;&#32;<emphasis role="comment">//&#32;Read&#32;a&#32;new&#32;frame&#32;from&#32;the&#32;video</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00443"/>00443 
<anchor xml:id="_fopencv_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frame.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;End&#32;of&#32;video!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00448"/>00448 
<anchor xml:id="_fopencv_8cpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Mat&#32;edges;
<anchor xml:id="_fopencv_8cpp_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::cvtColor(frame,&#32;edges,&#32;cv::COLOR_BGR2GRAY);
<anchor xml:id="_fopencv_8cpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Canny(edges,&#32;edges,&#32;100,&#32;200);
<anchor xml:id="_fopencv_8cpp_source_1l00452"/>00452 
<anchor xml:id="_fopencv_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::imshow(<emphasis role="stringliteral">&quot;Edge&#32;Image&quot;</emphasis>,&#32;edges);
<anchor xml:id="_fopencv_8cpp_source_1l00454"/>00454 
<anchor xml:id="_fopencv_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Break&#32;the&#32;loop&#32;if&#32;the&#32;&apos;q&apos;&#32;or&#32;&apos;Esc&apos;&#32;key&#32;is&#32;pressed</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;key&#32;=&#32;cv::waitKey(25);
<anchor xml:id="_fopencv_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(key&#32;==&#32;<emphasis role="charliteral">&apos;q&apos;</emphasis>&#32;||&#32;key&#32;==&#32;27)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Video&#32;playback&#32;stopped&#32;by&#32;the&#32;user!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00461"/>00461 
<anchor xml:id="_fopencv_8cpp_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;debugging,&#32;print&#32;frame&#32;count&#32;at&#32;regular&#32;intervals</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;%&#32;100&#32;==&#32;0)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Processed&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;frameCount&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;frames.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frameCount++;
<anchor xml:id="_fopencv_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00468"/>00468 
<anchor xml:id="_fopencv_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;cap.release();
<anchor xml:id="_fopencv_8cpp_source_1l00470"/>00470 &#32;&#32;&#32;&#32;cv::destroyAllWindows();
<anchor xml:id="_fopencv_8cpp_source_1l00471"/>00471 }
<anchor xml:id="_fopencv_8cpp_source_1l00472"/>00472 
<anchor xml:id="_fopencv_8cpp_source_1l00473"/><link linkend="_fopencv_8cpp_1ab473a21d9103080cb23e448906582fea">00473</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1ab473a21d9103080cb23e448906582fea">SaveCannyEdgeVideo</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;videoPath,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outputPath)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;cv::VideoCapture&#32;cap(videoPath);
<anchor xml:id="_fopencv_8cpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cap.isOpened())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Unable&#32;to&#32;open&#32;the&#32;video&#32;file:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;videoPath&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00478"/>00478 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00479"/>00479 
<anchor xml:id="_fopencv_8cpp_source_1l00480"/>00480 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;video&#32;properties&#32;to&#32;create&#32;a&#32;video&#32;writer</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameWidth&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(cap.get(cv::CAP_PROP_FRAME_WIDTH));
<anchor xml:id="_fopencv_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameHeight&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(cap.get(cv::CAP_PROP_FRAME_HEIGHT));
<anchor xml:id="_fopencv_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;fps&#32;=&#32;cap.get(cv::CAP_PROP_FPS);
<anchor xml:id="_fopencv_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;codec&#32;=&#32;cv::VideoWriter::fourcc(<emphasis role="charliteral">&apos;X&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>);&#32;<emphasis role="comment">//&#32;Change&#32;this&#32;to&#32;the&#32;desired&#32;codec&#32;(e.g.,&#32;&apos;X&apos;,&#32;&apos;2&apos;,&#32;&apos;6&apos;,&#32;&apos;4&apos;&#32;for&#32;H.264)</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00485"/>00485 
<anchor xml:id="_fopencv_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;cv::VideoWriter&#32;writer(outputPath,&#32;codec,&#32;fps,&#32;cv::Size(frameWidth,&#32;frameHeight),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_fopencv_8cpp_source_1l00487"/>00487 
<anchor xml:id="_fopencv_8cpp_source_1l00488"/>00488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!writer.isOpened())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Unable&#32;to&#32;create&#32;the&#32;video&#32;writer!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00492"/>00492 
<anchor xml:id="_fopencv_8cpp_source_1l00493"/>00493 
<anchor xml:id="_fopencv_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Mat&#32;frame;
<anchor xml:id="_fopencv_8cpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cap&#32;&gt;&gt;&#32;frame;&#32;<emphasis role="comment">//&#32;Read&#32;a&#32;new&#32;frame&#32;from&#32;the&#32;video</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00497"/>00497 
<anchor xml:id="_fopencv_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frame.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;End&#32;of&#32;video!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00502"/>00502 
<anchor xml:id="_fopencv_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Mat&#32;edges;
<anchor xml:id="_fopencv_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::cvtColor(frame,&#32;edges,&#32;cv::COLOR_BGR2GRAY);
<anchor xml:id="_fopencv_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Canny(edges,&#32;edges,&#32;100,&#32;200);
<anchor xml:id="_fopencv_8cpp_source_1l00506"/>00506 
<anchor xml:id="_fopencv_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.write(edges);
<anchor xml:id="_fopencv_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00509"/>00509 
<anchor xml:id="_fopencv_8cpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;cap.release();
<anchor xml:id="_fopencv_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;writer.release();
<anchor xml:id="_fopencv_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;cv::destroyAllWindows();
<anchor xml:id="_fopencv_8cpp_source_1l00513"/>00513 }
<anchor xml:id="_fopencv_8cpp_source_1l00514"/>00514 
<anchor xml:id="_fopencv_8cpp_source_1l00515"/><link linkend="_fopencv_8cpp_1add9eb7c3df17f77c22f0a31113b2cca5">00515</link> cv::Mat&#32;<link linkend="_fopencv_8cpp_1add9eb7c3df17f77c22f0a31113b2cca5">performCannyEdgeDetectionFromPicture</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;imagePath)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Load&#32;the&#32;input&#32;image&#32;from&#32;the&#32;file&#32;path</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;cv::Mat&#32;inputImage&#32;=&#32;cv::imread(imagePath);
<anchor xml:id="_fopencv_8cpp_source_1l00518"/>00518 
<anchor xml:id="_fopencv_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;input&#32;image&#32;is&#32;valid</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inputImage.empty())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Unable&#32;to&#32;load&#32;the&#32;image:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;imagePath&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cv::Mat();
<anchor xml:id="_fopencv_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00524"/>00524 
<anchor xml:id="_fopencv_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apply&#32;Canny&#32;edge&#32;detection</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;cv::Mat&#32;edges;
<anchor xml:id="_fopencv_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;cv::Canny(inputImage,&#32;edges,&#32;100,&#32;200);&#32;<emphasis role="comment">//&#32;You&#32;can&#32;adjust&#32;the&#32;threshold&#32;values&#32;(100&#32;and&#32;200)&#32;as&#32;needed</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00528"/>00528 
<anchor xml:id="_fopencv_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edges;
<anchor xml:id="_fopencv_8cpp_source_1l00530"/>00530 }
<anchor xml:id="_fopencv_8cpp_source_1l00531"/>00531 
<anchor xml:id="_fopencv_8cpp_source_1l00532"/>00532 
<anchor xml:id="_fopencv_8cpp_source_1l00533"/>00533 
<anchor xml:id="_fopencv_8cpp_source_1l00534"/>00534 
<anchor xml:id="_fopencv_8cpp_source_1l00535"/><link linkend="_fopencv_8cpp_1a6b4612eb9922d9f6a63f553b45046790">00535</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_fopencv_8cpp_1a6b4612eb9922d9f6a63f553b45046790">performCannyEdgeDetectionFromLiveCamera</link>()&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;cv::VideoCapture&#32;cap(0);&#32;<emphasis role="comment">//&#32;Open&#32;the&#32;default&#32;camera&#32;(change&#32;the&#32;index&#32;if&#32;you&#32;have&#32;multiple&#32;cameras)</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00537"/>00537 
<anchor xml:id="_fopencv_8cpp_source_1l00538"/>00538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cap.isOpened())&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Unable&#32;to&#32;access&#32;the&#32;camera!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_fopencv_8cpp_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00542"/>00542 
<anchor xml:id="_fopencv_8cpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;cv::Mat&#32;frame;
<anchor xml:id="_fopencv_8cpp_source_1l00544"/>00544 &#32;&#32;&#32;&#32;cv::namedWindow(<emphasis role="stringliteral">&quot;Live&#32;Camera&quot;</emphasis>,&#32;cv::WINDOW_AUTOSIZE);
<anchor xml:id="_fopencv_8cpp_source_1l00545"/>00545 
<anchor xml:id="_fopencv_8cpp_source_1l00546"/>00546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_fopencv_8cpp_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cap&#32;&gt;&gt;&#32;frame;&#32;<emphasis role="comment">//&#32;Capture&#32;a&#32;frame&#32;from&#32;the&#32;camera</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00548"/>00548 
<anchor xml:id="_fopencv_8cpp_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Mat&#32;edges;
<anchor xml:id="_fopencv_8cpp_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Canny(frame,&#32;edges,&#32;100,&#32;100);&#32;<emphasis role="comment">//&#32;You&#32;can&#32;adjust&#32;the&#32;threshold&#32;values&#32;(100&#32;and&#32;200)&#32;as&#32;needed</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00551"/>00551 
<anchor xml:id="_fopencv_8cpp_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::imshow(<emphasis role="stringliteral">&quot;Live&#32;Camera&quot;</emphasis>,&#32;edges);
<anchor xml:id="_fopencv_8cpp_source_1l00553"/>00553 
<anchor xml:id="_fopencv_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;cv::waitKey(1);
<anchor xml:id="_fopencv_8cpp_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;27)&#32;<emphasis role="comment">//&#32;Press&#32;&apos;Esc&apos;&#32;key&#32;to&#32;exit</emphasis>
<anchor xml:id="_fopencv_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_fopencv_8cpp_source_1l00557"/>00557 &#32;&#32;&#32;&#32;}
<anchor xml:id="_fopencv_8cpp_source_1l00558"/>00558 
<anchor xml:id="_fopencv_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;cap.release();
<anchor xml:id="_fopencv_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;cv::destroyAllWindows();
<anchor xml:id="_fopencv_8cpp_source_1l00561"/>00561 }
</programlisting></section>
