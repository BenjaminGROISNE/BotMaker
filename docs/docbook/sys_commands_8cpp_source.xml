<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sys_commands_8cpp_source" xml:lang="en-US">
<title>sysCommands.cpp</title>
<indexterm><primary>src/sysCommands.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_sys_commands_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_sys_commands_8h">sysCommands.h</link>&quot;</emphasis>
<anchor xml:id="_sys_commands_8cpp_source_1l00002"/>00002 
<anchor xml:id="_sys_commands_8cpp_source_1l00003"/>00003 
<anchor xml:id="_sys_commands_8cpp_source_1l00004"/><link linkend="_sys_commands_8cpp_1a40529d2008c5ec34a2251615ad504e28">00004</link> std::string&#32;<link linkend="_sys_commands_8cpp_1a40529d2008c5ec34a2251615ad504e28">moveAndExecute</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folder,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;args)
<anchor xml:id="_sys_commands_8cpp_source_1l00005"/>00005 {
<anchor xml:id="_sys_commands_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;std::string&#32;command&#32;=&#32;<emphasis role="stringliteral">&quot;cd&#32;&quot;</emphasis>&#32;+&#32;folder&#32;+<emphasis role="stringliteral">&quot;&#32;&amp;&amp;&#32;&quot;</emphasis>+&#32;args;
<anchor xml:id="_sys_commands_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a321eb7e335377aa7182bafc8a1605032">receivePipe</link>(command);
<anchor xml:id="_sys_commands_8cpp_source_1l00008"/>00008 }
<anchor xml:id="_sys_commands_8cpp_source_1l00009"/><link linkend="_sys_commands_8cpp_1a1988f11dcf8e6954f90781bc08f2f4bb">00009</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a1988f11dcf8e6954f90781bc08f2f4bb">moveAndStartProgram</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;programFolder,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;exeName,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;args)
<anchor xml:id="_sys_commands_8cpp_source_1l00010"/>00010 {
<anchor xml:id="_sys_commands_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;std::string&#32;command&#32;=&#32;<emphasis role="stringliteral">&quot;cd&#32;&quot;</emphasis>&#32;+&#32;programFolder&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&amp;&amp;&#32;start&#32;&quot;</emphasis>&#32;+&#32;exeName&#32;+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+args;
<anchor xml:id="_sys_commands_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1ada88c749f0c57b9e29b885c73134e0fe">doPipe</link>(command);
<anchor xml:id="_sys_commands_8cpp_source_1l00013"/>00013 }
<anchor xml:id="_sys_commands_8cpp_source_1l00014"/><link linkend="_sys_commands_8cpp_1a6aaf1a023b7ec9bd7465a2bdc9c026c4">00014</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a6aaf1a023b7ec9bd7465a2bdc9c026c4">startProgram</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;programPath,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;args)
<anchor xml:id="_sys_commands_8cpp_source_1l00015"/>00015 {
<anchor xml:id="_sys_commands_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;std::string&#32;command&#32;=&#32;<emphasis role="stringliteral">&quot;start&#32;&quot;</emphasis>&#32;+&#32;programPath+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+args;
<anchor xml:id="_sys_commands_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1ada88c749f0c57b9e29b885c73134e0fe">doPipe</link>(command);
<anchor xml:id="_sys_commands_8cpp_source_1l00018"/>00018 }
<anchor xml:id="_sys_commands_8cpp_source_1l00019"/>00019 
<anchor xml:id="_sys_commands_8cpp_source_1l00020"/><link linkend="_sys_commands_8cpp_1a4123a6250619c2e26b5d8b60606a9fa2">00020</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a4123a6250619c2e26b5d8b60606a9fa2">killProgram</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;exeName,<emphasis role="keyword">const</emphasis>&#32;std::string&#32;args)
<anchor xml:id="_sys_commands_8cpp_source_1l00021"/>00021 {
<anchor xml:id="_sys_commands_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;std::string&#32;command&#32;=&#32;<emphasis role="stringliteral">&quot;taskkill&#32;/im&quot;</emphasis>&#32;+&#32;exeName+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+args+&#32;<emphasis role="stringliteral">&quot;&#32;/f&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1ada88c749f0c57b9e29b885c73134e0fe">doPipe</link>(command);
<anchor xml:id="_sys_commands_8cpp_source_1l00024"/>00024 }
<anchor xml:id="_sys_commands_8cpp_source_1l00025"/><link linkend="_sys_commands_8cpp_1ab7a6af6b67158612bbfb7004af5b0e23">00025</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1ab7a6af6b67158612bbfb7004af5b0e23">killProgramWindow</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;exeName,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;windowName)
<anchor xml:id="_sys_commands_8cpp_source_1l00026"/>00026 {
<anchor xml:id="_sys_commands_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;std::string&#32;filter&#32;=&#32;<emphasis role="stringliteral">&quot;/fi&#32;\&quot;WINDOWTITLE&#32;eq&#32;&quot;</emphasis>&#32;+&#32;windowName&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a4123a6250619c2e26b5d8b60606a9fa2">killProgram</link>(exeName,&#32;filter);
<anchor xml:id="_sys_commands_8cpp_source_1l00029"/>00029 }
<anchor xml:id="_sys_commands_8cpp_source_1l00030"/>00030 
<anchor xml:id="_sys_commands_8cpp_source_1l00031"/><link linkend="_sys_commands_8cpp_1a91aaa3ff9bdd4428e4117b84ba4f842d">00031</link> std::vector&lt;std::string&gt;&#32;<link linkend="_sys_commands_8cpp_1a91aaa3ff9bdd4428e4117b84ba4f842d">returnAllDrivesLetter</link>()
<anchor xml:id="_sys_commands_8cpp_source_1l00032"/>00032 {
<anchor xml:id="_sys_commands_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;disk&#32;=&#32;GetLogicalDrives();
<anchor xml:id="_sys_commands_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;std::string&#32;disks&#32;=&#32;std::bitset&lt;8&gt;(disk).to_string();
<anchor xml:id="_sys_commands_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;reverse(disks.begin(),&#32;disks.end());
<anchor xml:id="_sys_commands_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;letters;
<anchor xml:id="_sys_commands_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;disks.size();&#32;++i)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(disks.at(i)&#32;!=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;let&#32;=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;+&#32;i;
<anchor xml:id="_sys_commands_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;letter&#32;=&#32;std::string(1,&#32;let);
<anchor xml:id="_sys_commands_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;letters.push_back(letter);
<anchor xml:id="_sys_commands_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00044"/>00044 
<anchor xml:id="_sys_commands_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;letters;
<anchor xml:id="_sys_commands_8cpp_source_1l00046"/>00046 }
<anchor xml:id="_sys_commands_8cpp_source_1l00047"/>00047 
<anchor xml:id="_sys_commands_8cpp_source_1l00048"/>00048 
<anchor xml:id="_sys_commands_8cpp_source_1l00049"/><link linkend="_sys_commands_8cpp_1ace2df1fb0546cd1aa8ddb634a751beeb">00049</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_sys_commands_8cpp_1ace2df1fb0546cd1aa8ddb634a751beeb">findPipe</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;parameter)
<anchor xml:id="_sys_commands_8cpp_source_1l00050"/>00050 {
<anchor xml:id="_sys_commands_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;4000&gt;buffer;
<anchor xml:id="_sys_commands_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;result.clear();
<anchor xml:id="_sys_commands_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;FILE*&#32;pipe&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(command,&#32;pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;foundString&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!foundString&#32;&amp;&amp;&#32;fgets(buffer.data(),&#32;buffer.size(),&#32;pipe))
<anchor xml:id="_sys_commands_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;buffer.data();
<anchor xml:id="_sys_commands_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.find(parameter)&#32;!=&#32;std::string::npos)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a4771c79171a937893508dabadadbe099">closePipe</link>(pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00064"/>00064 }
<anchor xml:id="_sys_commands_8cpp_source_1l00065"/>00065 
<anchor xml:id="_sys_commands_8cpp_source_1l00066"/><link linkend="_sys_commands_8cpp_1a25d6a776c3e25f9b4bb6b52a1a61c955">00066</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a25d6a776c3e25f9b4bb6b52a1a61c955">findPipeTime</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;parameter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;seconds)
<anchor xml:id="_sys_commands_8cpp_source_1l00067"/>00067 {
<anchor xml:id="_sys_commands_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;4000&gt;&#32;buffer;
<anchor xml:id="_sys_commands_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;result.clear();
<anchor xml:id="_sys_commands_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;FILE*&#32;pipe&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(command,&#32;pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;foundString&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;std::chrono::time_point&#32;<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_sys_commands_8cpp_source_1l00075"/>00075 
<anchor xml:id="_sys_commands_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;currentTime&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_sys_commands_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elapsedTime&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::seconds&gt;(currentTime&#32;-&#32;<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>).count();
<anchor xml:id="_sys_commands_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elapsedTime&#32;&gt;&#32;seconds)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fgets(buffer.data(),&#32;buffer.size(),&#32;pipe)&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;buffer.data();
<anchor xml:id="_sys_commands_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.find(parameter)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundString&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Found&#32;parameter&#32;in:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;buffer.data()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a4771c79171a937893508dabadadbe099">closePipe</link>(pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;foundString;
<anchor xml:id="_sys_commands_8cpp_source_1l00092"/>00092 }
<anchor xml:id="_sys_commands_8cpp_source_1l00093"/>00093 
<anchor xml:id="_sys_commands_8cpp_source_1l00094"/>00094 
<anchor xml:id="_sys_commands_8cpp_source_1l00095"/><link linkend="_sys_commands_8cpp_1a94e134bb4a9dda947f238fa951454d35">00095</link> std::chrono::time_point&lt;std::chrono::steady_clock&gt;&#32;<link linkend="_sys_commands_8cpp_1a94e134bb4a9dda947f238fa951454d35">startChrono</link>()&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::chrono::steady_clock::now();
<anchor xml:id="_sys_commands_8cpp_source_1l00097"/>00097 }
<anchor xml:id="_sys_commands_8cpp_source_1l00098"/>00098 
<anchor xml:id="_sys_commands_8cpp_source_1l00099"/><link linkend="_sys_commands_8cpp_1adb5a1f53dc22de07426e345e0bc11bb0">00099</link> <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_sys_commands_8cpp_1adb5a1f53dc22de07426e345e0bc11bb0">endChrono</link>(<emphasis role="keyword">const</emphasis>&#32;std::chrono::time_point&lt;std::chrono::steady_clock&gt;&amp;&#32;startTime)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;currentTime&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_sys_commands_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;duration&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(currentTime&#32;-&#32;startTime);
<anchor xml:id="_sys_commands_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration.count();
<anchor xml:id="_sys_commands_8cpp_source_1l00103"/>00103 }
<anchor xml:id="_sys_commands_8cpp_source_1l00104"/>00104 
<anchor xml:id="_sys_commands_8cpp_source_1l00105"/><link linkend="_sys_commands_8cpp_1a15ee35c2a8f3a787577739154c0c62f5">00105</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a15ee35c2a8f3a787577739154c0c62f5">findPipeTimeNoclose</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;parameter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;seconds,&#32;FILE*&amp;&#32;pipe)
<anchor xml:id="_sys_commands_8cpp_source_1l00106"/>00106 {
<anchor xml:id="_sys_commands_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;4000&gt;&#32;buffer;
<anchor xml:id="_sys_commands_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;result.clear();
<anchor xml:id="_sys_commands_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;pipe&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(command,&#32;pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;foundString&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;std::chrono::time_point&#32;<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_sys_commands_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;currentTime&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_sys_commands_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elapsedTime&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::seconds&gt;(currentTime&#32;-&#32;<link linkend="_paths_8cpp_1a423ec00aa9b17614cb8a0c52de937623">start</link>).count();
<anchor xml:id="_sys_commands_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elapsedTime&#32;&gt;&#32;seconds)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;String&#32;not&#32;found&#32;in&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;seconds&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;seconds&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00121"/>00121 
<anchor xml:id="_sys_commands_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fgets(buffer.data(),&#32;buffer.size(),&#32;pipe)&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00125"/>00125 
<anchor xml:id="_sys_commands_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;buffer.data();&#32;<emphasis role="comment">//&#32;Append&#32;the&#32;current&#32;buffer&#32;to&#32;the&#32;result.</emphasis>
<anchor xml:id="_sys_commands_8cpp_source_1l00127"/>00127 
<anchor xml:id="_sys_commands_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.find(parameter)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundString&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Found&#32;parameter&#32;in:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;buffer.data()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;foundString;
<anchor xml:id="_sys_commands_8cpp_source_1l00135"/>00135 }
<anchor xml:id="_sys_commands_8cpp_source_1l00136"/>00136 
<anchor xml:id="_sys_commands_8cpp_source_1l00137"/><link linkend="_sys_commands_8cpp_1ac352564535ada6aa3a0712c6011e58d5">00137</link> std::string&#32;<link linkend="_sys_commands_8cpp_1ac352564535ada6aa3a0712c6011e58d5">getParentDirectory</link>()&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;std::filesystem::path&#32;currentFilePath(__FILE__);
<anchor xml:id="_sys_commands_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;currentFilePath.parent_path().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00140"/>00140 }
<anchor xml:id="_sys_commands_8cpp_source_1l00141"/>00141 
<anchor xml:id="_sys_commands_8cpp_source_1l00142"/><link linkend="_sys_commands_8cpp_1af317963d1356400fb2869053dcd47fb0">00142</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1af317963d1356400fb2869053dcd47fb0">writeFilesDirectory</link>(std::filesystem::directory_iterator&#32;path,&#32;std::ofstream&amp;&#32;fileContent,&#32;std::ofstream&amp;&#32;fileDeclaration)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00143"/>00143 
<anchor xml:id="_sys_commands_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;std::filesystem::path&#32;currentPath&#32;=&#32;path-&gt;path().parent_path();
<anchor xml:id="_sys_commands_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;std::string&#32;folderName&#32;=&#32;currentPath.filename().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;std::string&#32;com&#32;=&#32;<emphasis role="stringliteral">&quot;//&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;std::string&#32;FOLDEROUTPUTCONTENT&#32;=&#32;com&#32;+&#32;<emphasis role="stringliteral">&quot;std::string&#32;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>&#32;+&#32;currentPath.parent_path().filename().string()&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;+&#32;\&quot;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;\\\\&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;std::string&#32;FOLDEROUTPUTDECLARATION&#32;=&#32;com&#32;+&#32;<emphasis role="stringliteral">&quot;extern&#32;std::string&#32;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;fileContent&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;FOLDEROUTPUTCONTENT;
<anchor xml:id="_sys_commands_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;fileDeclaration&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;FOLDEROUTPUTDECLARATION;
<anchor xml:id="_sys_commands_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;std::vector&lt;std::filesystem::directory_entry&gt;&#32;folders;
<anchor xml:id="_sys_commands_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;folders.clear();
<anchor xml:id="_sys_commands_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;entry&#32;:&#32;path)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entry.is_regular_file())&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00155"/>00155 
<anchor xml:id="_sys_commands_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filenameContent&#32;=&#32;<emphasis role="stringliteral">&quot;std::string&#32;&quot;</emphasis>&#32;+&#32;entry.path().stem().string()&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;+&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>&#32;+&#32;entry.path().filename().string()&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;;&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filenameDeclaration&#32;=&#32;<emphasis role="stringliteral">&quot;extern&#32;std::string&#32;&quot;</emphasis>&#32;+&#32;entry.path().stem().string()&#32;+&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileContent&#32;&lt;&lt;&#32;filenameContent;
<anchor xml:id="_sys_commands_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDeclaration&#32;&lt;&lt;&#32;filenameDeclaration;
<anchor xml:id="_sys_commands_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entry.is_directory())&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;folders.push_back(entry);
<anchor xml:id="_sys_commands_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;folders.size();&#32;i++)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::filesystem::is_empty(folders.at(i).path()))&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1af317963d1356400fb2869053dcd47fb0">writeFilesDirectory</link>(std::filesystem::directory_iterator(folders.at(i).path()),&#32;fileContent,&#32;fileDeclaration);
<anchor xml:id="_sys_commands_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::filesystem::path&#32;currentPath&#32;=&#32;folders.at(i).path();
<anchor xml:id="_sys_commands_8cpp_source_1l00171"/>00171 
<anchor xml:id="_sys_commands_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;folderName&#32;=&#32;currentPath.filename().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;com&#32;=&#32;<emphasis role="stringliteral">&quot;//&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FOLDEROUTPUTCONTENT&#32;=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;+&#32;com&#32;+&#32;<emphasis role="stringliteral">&quot;std::string&#32;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>&#32;+&#32;currentPath.parent_path().filename().string()&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;+&#32;\&quot;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;\\\\&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;;&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FOLDEROUTPUTDECLARATION&#32;=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;+&#32;com&#32;+&#32;<emphasis role="stringliteral">&quot;extern&#32;std::string&#32;&quot;</emphasis>&#32;+&#32;folderName&#32;+&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileContent&#32;&lt;&lt;&#32;FOLDEROUTPUTCONTENT;
<anchor xml:id="_sys_commands_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDeclaration&#32;&lt;&lt;&#32;FOLDEROUTPUTDECLARATION;
<anchor xml:id="_sys_commands_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00180"/>00180 }
<anchor xml:id="_sys_commands_8cpp_source_1l00181"/>00181 
<anchor xml:id="_sys_commands_8cpp_source_1l00182"/>00182 
<anchor xml:id="_sys_commands_8cpp_source_1l00183"/>00183 
<anchor xml:id="_sys_commands_8cpp_source_1l00184"/><link linkend="_sys_commands_8cpp_1ab778b8fee9bec0c7d9cfdbeb219bcc6b">00184</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1ab778b8fee9bec0c7d9cfdbeb219bcc6b">createpaths</link>(std::string&#32;rootFolder)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;std::ofstream&#32;pathsContent(<emphasis role="stringliteral">&quot;pathsContent.txt&quot;</emphasis>);
<anchor xml:id="_sys_commands_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;std::ofstream&#32;pathsDeclaration(<emphasis role="stringliteral">&quot;pathsDeclaration.txt&quot;</emphasis>);
<anchor xml:id="_sys_commands_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;std::string&#32;path&#32;=&#32;rootFolder;
<anchor xml:id="_sys_commands_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;std::filesystem::directory_iterator&#32;dir(path);
<anchor xml:id="_sys_commands_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1af317963d1356400fb2869053dcd47fb0">writeFilesDirectory</link>(dir,&#32;pathsContent,&#32;pathsDeclaration);
<anchor xml:id="_sys_commands_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;pathsContent.close();
<anchor xml:id="_sys_commands_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;pathsDeclaration.close();
<anchor xml:id="_sys_commands_8cpp_source_1l00192"/>00192 }
<anchor xml:id="_sys_commands_8cpp_source_1l00193"/>00193 
<anchor xml:id="_sys_commands_8cpp_source_1l00194"/>00194 
<anchor xml:id="_sys_commands_8cpp_source_1l00195"/><link linkend="_sys_commands_8cpp_1a5e44365ba3f0d833e74130bb152e64a7">00195</link> std::string&#32;<link linkend="_sys_commands_8cpp_1a5e44365ba3f0d833e74130bb152e64a7">findPathFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folder,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;namefile)
<anchor xml:id="_sys_commands_8cpp_source_1l00196"/>00196 {
<anchor xml:id="_sys_commands_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;std::string&#32;result&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;std::filesystem::path&#32;folderpath(folder);
<anchor xml:id="_sys_commands_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nSearching&#32;for&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;namefile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;folder&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;folder&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a7ba4acb23edb5c8887e844bd8fb0238a">findPathFolderRec</link>(folderpath,&#32;namefile,&#32;result,&#32;found);
<anchor xml:id="_sys_commands_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00203"/>00203 }
<anchor xml:id="_sys_commands_8cpp_source_1l00204"/>00204 
<anchor xml:id="_sys_commands_8cpp_source_1l00205"/><link linkend="_sys_commands_8cpp_1ae1165ac90ad1b162b2dfa0c313d95580">00205</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_sys_commands_8cpp_1ae1165ac90ad1b162b2dfa0c313d95580">findFileFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folder,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;namefile)
<anchor xml:id="_sys_commands_8cpp_source_1l00206"/>00206 {
<anchor xml:id="_sys_commands_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;std::string&#32;result&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;std::filesystem::path&#32;folderpath(folder);
<anchor xml:id="_sys_commands_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a7ba4acb23edb5c8887e844bd8fb0238a">findPathFolderRec</link>(folderpath,&#32;namefile,&#32;result,&#32;found);
<anchor xml:id="_sys_commands_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!result.empty();
<anchor xml:id="_sys_commands_8cpp_source_1l00212"/>00212 }
<anchor xml:id="_sys_commands_8cpp_source_1l00213"/>00213 
<anchor xml:id="_sys_commands_8cpp_source_1l00214"/><link linkend="_sys_commands_8cpp_1a2af38e6898ff32753919342acccae2dd">00214</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a2af38e6898ff32753919342acccae2dd">writeText</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filename)
<anchor xml:id="_sys_commands_8cpp_source_1l00215"/>00215 {
<anchor xml:id="_sys_commands_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;std::ofstream&#32;file(filename);
<anchor xml:id="_sys_commands_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.is_open())&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;text;
<anchor xml:id="_sys_commands_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00220"/>00220 }
<anchor xml:id="_sys_commands_8cpp_source_1l00221"/>00221 
<anchor xml:id="_sys_commands_8cpp_source_1l00222"/><link linkend="_sys_commands_8cpp_1a662dd4893690567ba825a473508f47e2">00222</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a662dd4893690567ba825a473508f47e2">pathExists</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
<anchor xml:id="_sys_commands_8cpp_source_1l00223"/>00223 {
<anchor xml:id="_sys_commands_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;std::filesystem::directory_entry&#32;dir(path);
<anchor xml:id="_sys_commands_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dir.exists();
<anchor xml:id="_sys_commands_8cpp_source_1l00226"/>00226 }
<anchor xml:id="_sys_commands_8cpp_source_1l00227"/>00227 
<anchor xml:id="_sys_commands_8cpp_source_1l00228"/><link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">00228</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command,&#32;FILE*&amp;&#32;pipe)
<anchor xml:id="_sys_commands_8cpp_source_1l00229"/>00229 {
<anchor xml:id="_sys_commands_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;pipe&#32;=&#32;_popen(command.c_str(),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
<anchor xml:id="_sys_commands_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!pipe)
<anchor xml:id="_sys_commands_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Failed&#32;to&#32;open&#32;pipe&#32;for&#32;command:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;command&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;;
<anchor xml:id="_sys_commands_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00237"/>00237 }
<anchor xml:id="_sys_commands_8cpp_source_1l00238"/>00238 
<anchor xml:id="_sys_commands_8cpp_source_1l00239"/><link linkend="_sys_commands_8cpp_1a4771c79171a937893508dabadadbe099">00239</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a4771c79171a937893508dabadadbe099">closePipe</link>(FILE*&amp;&#32;pipe)
<anchor xml:id="_sys_commands_8cpp_source_1l00240"/>00240 {
<anchor xml:id="_sys_commands_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;_pclose(pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00242"/>00242 }
<anchor xml:id="_sys_commands_8cpp_source_1l00243"/>00243 
<anchor xml:id="_sys_commands_8cpp_source_1l00244"/><link linkend="_sys_commands_8cpp_1ada88c749f0c57b9e29b885c73134e0fe">00244</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1ada88c749f0c57b9e29b885c73134e0fe">doPipe</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command)
<anchor xml:id="_sys_commands_8cpp_source_1l00245"/>00245 {
<anchor xml:id="_sys_commands_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;FILE*&#32;pipe;
<anchor xml:id="_sys_commands_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(command,&#32;pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a4771c79171a937893508dabadadbe099">closePipe</link>(pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00249"/>00249 }
<anchor xml:id="_sys_commands_8cpp_source_1l00250"/>00250 
<anchor xml:id="_sys_commands_8cpp_source_1l00251"/><link linkend="_sys_commands_8cpp_1a321eb7e335377aa7182bafc8a1605032">00251</link> std::string&#32;<link linkend="_sys_commands_8cpp_1a321eb7e335377aa7182bafc8a1605032">receivePipe</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command)
<anchor xml:id="_sys_commands_8cpp_source_1l00252"/>00252 {
<anchor xml:id="_sys_commands_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;4000&gt;buffer;
<anchor xml:id="_sys_commands_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;FILE*&#32;pipe;
<anchor xml:id="_sys_commands_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(command,&#32;pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00257"/>00257 
<anchor xml:id="_sys_commands_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(fgets(buffer.data(),&#32;buffer.size(),&#32;pipe))
<anchor xml:id="_sys_commands_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;buffer.data();
<anchor xml:id="_sys_commands_8cpp_source_1l00261"/>00261 
<anchor xml:id="_sys_commands_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a4771c79171a937893508dabadadbe099">closePipe</link>(pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00265"/>00265 }
<anchor xml:id="_sys_commands_8cpp_source_1l00266"/>00266 
<anchor xml:id="_sys_commands_8cpp_source_1l00267"/><link linkend="_sys_commands_8cpp_1ae87b822d4836e699c643960104958689">00267</link> std::string&#32;<link linkend="_sys_commands_8cpp_1ae87b822d4836e699c643960104958689">doPipeNoclose</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;command)
<anchor xml:id="_sys_commands_8cpp_source_1l00268"/>00268 {
<anchor xml:id="_sys_commands_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;4000&gt;buffer;
<anchor xml:id="_sys_commands_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;FILE*&#32;pipe;
<anchor xml:id="_sys_commands_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a3499ce0cd7e4ed28b3c5461a4d3aec84">openPipe</link>(command,&#32;pipe);
<anchor xml:id="_sys_commands_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_sys_commands_8cpp_source_1l00274"/>00274 }
<anchor xml:id="_sys_commands_8cpp_source_1l00275"/>00275 
<anchor xml:id="_sys_commands_8cpp_source_1l00276"/>00276 
<anchor xml:id="_sys_commands_8cpp_source_1l00277"/>00277 
<anchor xml:id="_sys_commands_8cpp_source_1l00278"/>00278 
<anchor xml:id="_sys_commands_8cpp_source_1l00279"/><link linkend="_sys_commands_8cpp_1a21ab47268233978aaaa4b09142d5a8de">00279</link> std::string&#32;<link linkend="_sys_commands_8cpp_1a21ab47268233978aaaa4b09142d5a8de">ExpandEnvironmentVariables</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;inputPath)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00280"/>00280 
<anchor xml:id="_sys_commands_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;DWORD&#32;bufferLength&#32;=&#32;ExpandEnvironmentStringsA(inputPath.c_str(),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0);
<anchor xml:id="_sys_commands_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bufferLength&#32;==&#32;0)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;std::string&#32;expandedPath;
<anchor xml:id="_sys_commands_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;expandedPath.resize(bufferLength);
<anchor xml:id="_sys_commands_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ExpandEnvironmentStringsA(inputPath.c_str(),&#32;&amp;expandedPath[0],&#32;bufferLength)&#32;==&#32;0)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>;
<anchor xml:id="_sys_commands_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>&#32;=&#32;expandedPath.find(<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
<anchor xml:id="_sys_commands_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expandedPath.erase(<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>,&#32;1);
<anchor xml:id="_sys_commands_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>&#32;=&#32;expandedPath.find(<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
<anchor xml:id="_sys_commands_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expandedPath;
<anchor xml:id="_sys_commands_8cpp_source_1l00297"/>00297 }
<anchor xml:id="_sys_commands_8cpp_source_1l00298"/>00298 
<anchor xml:id="_sys_commands_8cpp_source_1l00299"/><link linkend="_sys_commands_8cpp_1a61d85a8cc16ea3d6e2e86d14beb29804">00299</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a61d85a8cc16ea3d6e2e86d14beb29804">GetRelativeResolution</link>(<emphasis role="keywordtype">int</emphasis>&amp;&#32;width,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;height)
<anchor xml:id="_sys_commands_8cpp_source_1l00300"/>00300 {
<anchor xml:id="_sys_commands_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;RECT&#32;desktop;
<anchor xml:id="_sys_commands_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;width&#32;=&#32;GetSystemMetrics(SM_CXSCREEN);
<anchor xml:id="_sys_commands_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;height&#32;=&#32;GetSystemMetrics(SM_CYSCREEN);
<anchor xml:id="_sys_commands_8cpp_source_1l00304"/>00304 }
<anchor xml:id="_sys_commands_8cpp_source_1l00305"/>00305 
<anchor xml:id="_sys_commands_8cpp_source_1l00306"/>00306 
<anchor xml:id="_sys_commands_8cpp_source_1l00307"/>00307 
<anchor xml:id="_sys_commands_8cpp_source_1l00308"/><link linkend="_sys_commands_8cpp_1a7ba4acb23edb5c8887e844bd8fb0238a">00308</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1a7ba4acb23edb5c8887e844bd8fb0238a">findPathFolderRec</link>(std::filesystem::path&#32;folderpath,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;namefile,&#32;std::string&amp;&#32;correctpath,&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;found)
<anchor xml:id="_sys_commands_8cpp_source_1l00309"/>00309 {
<anchor xml:id="_sys_commands_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;std::vector&lt;std::filesystem::path&gt;&#32;paths;
<anchor xml:id="_sys_commands_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::filesystem::exists(folderpath)&#32;&amp;&amp;&#32;!folderpath.empty())&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::filesystem::directory_iterator&#32;dirpath(folderpath);
<anchor xml:id="_sys_commands_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;entry&#32;:&#32;dirpath)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;paths.push_back(entry);
<anchor xml:id="_sys_commands_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{}
<anchor xml:id="_sys_commands_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;paths.size()&#32;&amp;&amp;&#32;found&#32;==&#32;<emphasis role="keyword">false</emphasis>;&#32;++i)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::filesystem::directory_entry&#32;dirpath(paths.at(i));
<anchor xml:id="_sys_commands_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dirpath.is_regular_file())&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;result&#32;=&#32;paths.at(i).filename().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;namefile)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;correctpath&#32;=&#32;paths.at(i).parent_path().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;paths.erase(paths.begin()&#32;+&#32;i);
<anchor xml:id="_sys_commands_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--i;
<anchor xml:id="_sys_commands_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...){}
<anchor xml:id="_sys_commands_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;paths.size()&#32;&amp;&amp;&#32;found&#32;==&#32;<emphasis role="keyword">false</emphasis>;&#32;++i)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::filesystem::directory_entry&#32;dirpath(paths.at(i));
<anchor xml:id="_sys_commands_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dirpath.is_directory())&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Folder:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;paths.at(i).string()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_sys_commands_8cpp_1a7ba4acb23edb5c8887e844bd8fb0238a">findPathFolderRec</link>(paths.at(i),&#32;namefile,&#32;correctpath,&#32;found);
<anchor xml:id="_sys_commands_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{}
<anchor xml:id="_sys_commands_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00345"/>00345 }
<anchor xml:id="_sys_commands_8cpp_source_1l00346"/>00346 
<anchor xml:id="_sys_commands_8cpp_source_1l00347"/><link linkend="_sys_commands_8cpp_1a5eea3bc2d91c8bd832794fce0aa4133a">00347</link> std::string&#32;<link linkend="_sys_commands_8cpp_1a5eea3bc2d91c8bd832794fce0aa4133a">findNameFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folder)
<anchor xml:id="_sys_commands_8cpp_source_1l00348"/>00348 {
<anchor xml:id="_sys_commands_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;std::filesystem::path&#32;name(folder);
<anchor xml:id="_sys_commands_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name.filename().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00351"/>00351 }
<anchor xml:id="_sys_commands_8cpp_source_1l00352"/>00352 
<anchor xml:id="_sys_commands_8cpp_source_1l00353"/><link linkend="_sys_commands_8cpp_1a0aa9dc57d3c05f8b1a49e746c516548e">00353</link> std::string&#32;<link linkend="_sys_commands_8cpp_1a0aa9dc57d3c05f8b1a49e746c516548e">findNameAncestorFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folder,&#32;<emphasis role="keywordtype">int</emphasis>&#32;number)
<anchor xml:id="_sys_commands_8cpp_source_1l00354"/>00354 {
<anchor xml:id="_sys_commands_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;std::filesystem::path&#32;name(folder);
<anchor xml:id="_sys_commands_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;number;&#32;++i)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name&#32;=&#32;name.parent_path();
<anchor xml:id="_sys_commands_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name.filename().string();
<anchor xml:id="_sys_commands_8cpp_source_1l00360"/>00360 
<anchor xml:id="_sys_commands_8cpp_source_1l00361"/>00361 }
<anchor xml:id="_sys_commands_8cpp_source_1l00362"/>00362 
<anchor xml:id="_sys_commands_8cpp_source_1l00363"/><link linkend="_sys_commands_8cpp_1aa37688072feafe1ddc3ec391b4d0e356">00363</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sys_commands_8cpp_1aa37688072feafe1ddc3ec391b4d0e356">bringWindowToFront</link>(HWND&#32;hwnd)&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00364"/>00364 
<anchor xml:id="_sys_commands_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hwnd&#32;==&#32;NULL&#32;||&#32;!IsWindow(hwnd)&#32;||&#32;!IsWindowVisible(hwnd))&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Invalid&#32;or&#32;invisible&#32;window&#32;handle!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sys_commands_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_sys_commands_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsIconic(hwnd))&#32;{
<anchor xml:id="_sys_commands_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ShowWindow(hwnd,&#32;SW_RESTORE);
<anchor xml:id="_sys_commands_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sys_commands_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;SetForegroundWindow(hwnd);
<anchor xml:id="_sys_commands_8cpp_source_1l00373"/>00373 }
<anchor xml:id="_sys_commands_8cpp_source_1l00374"/>00374 
<anchor xml:id="_sys_commands_8cpp_source_1l00375"/>00375 
<anchor xml:id="_sys_commands_8cpp_source_1l00376"/>00376 
</programlisting></section>
