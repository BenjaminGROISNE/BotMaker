<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__text_manager_8cpp_source" xml:lang="en-US">
<title>TextManager.cpp</title>
<indexterm><primary>src/TextManager.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__text_manager_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__text_manager_8h">TextManager.h</link>&quot;</emphasis>
<anchor xml:id="__text_manager_8cpp_source_1l00002"/>00002 
<anchor xml:id="__text_manager_8cpp_source_1l00003"/>00003 
<anchor xml:id="__text_manager_8cpp_source_1l00004"/><link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">00004</link> std::string&#32;<link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__text_manager_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;std::string&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;std::ifstream&#32;file=<link linkend="__text_manager_8cpp_1a5e4308ca14d1f4cfc2456fc26b1361a8">getIfstreamFile</link>(path);
<anchor xml:id="__text_manager_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(getline(file,&#32;line))&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;text&#32;+=&#32;line&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;read&#32;File&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="__text_manager_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00018"/>00018 }
<anchor xml:id="__text_manager_8cpp_source_1l00019"/>00019 
<anchor xml:id="__text_manager_8cpp_source_1l00020"/><link linkend="__text_manager_8cpp_1a5e4308ca14d1f4cfc2456fc26b1361a8">00020</link> std::ifstream&#32;<link linkend="__text_manager_8cpp_1a5e4308ca14d1f4cfc2456fc26b1361a8">getIfstreamFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
<anchor xml:id="__text_manager_8cpp_source_1l00021"/>00021 {
<anchor xml:id="__text_manager_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ifstream(path);
<anchor xml:id="__text_manager_8cpp_source_1l00023"/>00023 }
<anchor xml:id="__text_manager_8cpp_source_1l00024"/>00024 
<anchor xml:id="__text_manager_8cpp_source_1l00025"/><link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">00025</link> std::ofstream&#32;<link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">getOfstreamFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method)
<anchor xml:id="__text_manager_8cpp_source_1l00026"/>00026 {
<anchor xml:id="__text_manager_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(method)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>:
<anchor xml:id="__text_manager_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path);
<anchor xml:id="__text_manager_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76daf38784ef4b08f294d4a78f62181729a0">APPEND</link>:
<anchor xml:id="__text_manager_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path,std::ios_base::app);
<anchor xml:id="__text_manager_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76da5d8c28daa563cffcab51f34a0bec098d">OVERWRITE</link>:
<anchor xml:id="__text_manager_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path,std::ios_base::trunc);
<anchor xml:id="__text_manager_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__text_manager_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ofstream(path);
<anchor xml:id="__text_manager_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00038"/>00038 }
<anchor xml:id="__text_manager_8cpp_source_1l00039"/>00039 
<anchor xml:id="__text_manager_8cpp_source_1l00040"/><link linkend="__text_manager_8cpp_1ab55140c566370b105b9bf81756293fa5">00040</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1ab55140c566370b105b9bf81756293fa5">writeToFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method)
<anchor xml:id="__text_manager_8cpp_source_1l00041"/>00041 {
<anchor xml:id="__text_manager_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;std::ofstream&#32;file&#32;=&#32;<link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">getOfstreamFile</link>(path,method);
<anchor xml:id="__text_manager_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;content;
<anchor xml:id="__text_manager_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;write&#32;to&#32;File&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="__text_manager_8cpp_source_1l00050"/>00050 }
<anchor xml:id="__text_manager_8cpp_source_1l00051"/>00051 
<anchor xml:id="__text_manager_8cpp_source_1l00052"/><link linkend="__text_manager_8cpp_1ae4fe8a84012650993d5d2fac420daec2">00052</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1ae4fe8a84012650993d5d2fac420daec2">clearFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
<anchor xml:id="__text_manager_8cpp_source_1l00053"/>00053 {
<anchor xml:id="__text_manager_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;std::ofstream&#32;file&#32;=&#32;<link linkend="__text_manager_8cpp_1a4a86df56d2737552b2fd63bfa85c5800">getOfstreamFile</link>(path);
<anchor xml:id="__text_manager_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;write&#32;to&#32;File&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="__text_manager_8cpp_source_1l00062"/>00062 }
<anchor xml:id="__text_manager_8cpp_source_1l00063"/>00063 
<anchor xml:id="__text_manager_8cpp_source_1l00064"/><link linkend="__text_manager_8cpp_1aa61ad4367d44c1e14541c7c1c46da795">00064</link> std::string&#32;<link linkend="__text_manager_8cpp_1aa61ad4367d44c1e14541c7c1c46da795">extractContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;first,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last)
<anchor xml:id="__text_manager_8cpp_source_1l00065"/>00065 {
<anchor xml:id="__text_manager_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos,&#32;endpos;
<anchor xml:id="__text_manager_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(fullContent,&#32;first)&#32;+&#32;first.length();
<anchor xml:id="__text_manager_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endpos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(fullContent,last,pos);
<anchor xml:id="__text_manager_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(endpos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fullContent.substr(pos,&#32;endpos&#32;-&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00075"/>00075 }
<anchor xml:id="__text_manager_8cpp_source_1l00076"/>00076 
<anchor xml:id="__text_manager_8cpp_source_1l00077"/><link linkend="__text_manager_8cpp_1a55651a43aac6404e3e403967b3633201">00077</link> std::string&#32;<link linkend="__text_manager_8cpp_1a55651a43aac6404e3e403967b3633201">extractLineContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;first,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last)
<anchor xml:id="__text_manager_8cpp_source_1l00078"/>00078 {
<anchor xml:id="__text_manager_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1aa61ad4367d44c1e14541c7c1c46da795">extractContent</link>(<link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(fullContent,&#32;lineParameter),&#32;first,&#32;last);
<anchor xml:id="__text_manager_8cpp_source_1l00080"/>00080 }
<anchor xml:id="__text_manager_8cpp_source_1l00081"/>00081 
<anchor xml:id="__text_manager_8cpp_source_1l00082"/><link linkend="__text_manager_8cpp_1a98e5aae2b6659418890caba4fad17d5e">00082</link> std::string&#32;<link linkend="__text_manager_8cpp_1a98e5aae2b6659418890caba4fad17d5e">updateContent</link>(std::string&#32;fullContent,&#32;std::string&#32;newContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;first,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last)
<anchor xml:id="__text_manager_8cpp_source_1l00083"/>00083 {
<anchor xml:id="__text_manager_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos,&#32;endpos;
<anchor xml:id="__text_manager_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;std::string&#32;firstpart,&#32;secondpart;
<anchor xml:id="__text_manager_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(fullContent,first)+first.length();
<anchor xml:id="__text_manager_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endpos&#32;=<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(fullContent,last,pos);
<anchor xml:id="__text_manager_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(endpos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstpart&#32;=&#32;fullContent.substr(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;secondpart&#32;=&#32;fullContent.substr(endpos,&#32;std::string::npos);
<anchor xml:id="__text_manager_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;firstpart&#32;+&#32;newContent&#32;+&#32;secondpart;
<anchor xml:id="__text_manager_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00096"/>00096 }
<anchor xml:id="__text_manager_8cpp_source_1l00097"/>00097 
<anchor xml:id="__text_manager_8cpp_source_1l00098"/><link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">00098</link> std::string&#32;<link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter)<emphasis role="comment">//doesn&apos;t&#32;return&#32;before&#32;lineParameter</emphasis>
<anchor xml:id="__text_manager_8cpp_source_1l00099"/>00099 {
<anchor xml:id="__text_manager_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;lineParameter);
<anchor xml:id="__text_manager_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;endPos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,pos);
<anchor xml:id="__text_manager_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(endPos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;result&#32;=&#32;text.substr(pos,&#32;endPos&#32;-&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__text_manager_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00109"/>00109 }
<anchor xml:id="__text_manager_8cpp_source_1l00110"/>00110 
<anchor xml:id="__text_manager_8cpp_source_1l00111"/><link linkend="__text_manager_8cpp_1a5f4889fcc6892114ae5ea80e2fec852e">00111</link> std::string&#32;<link linkend="__text_manager_8cpp_1a5f4889fcc6892114ae5ea80e2fec852e">removeContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00112"/>00112 {
<anchor xml:id="__text_manager_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;std::string&#32;first&#32;=&#32;<link linkend="__text_manager_8cpp_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;std::string&#32;second&#32;=&#32;<link linkend="__text_manager_8cpp_1a6a1f72a80ddaec746c95996b16e3a1dc">getContentAfter</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;first&#32;+&#32;second;
<anchor xml:id="__text_manager_8cpp_source_1l00116"/>00116 }
<anchor xml:id="__text_manager_8cpp_source_1l00117"/>00117 
<anchor xml:id="__text_manager_8cpp_source_1l00118"/><link linkend="__text_manager_8cpp_1a377407ab4c28873a8e1956ea343f9cc2">00118</link> std::string&#32;<link linkend="__text_manager_8cpp_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00119"/>00119 {
<anchor xml:id="__text_manager_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;content);
<anchor xml:id="__text_manager_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00125"/>00125 }
<anchor xml:id="__text_manager_8cpp_source_1l00126"/>00126 
<anchor xml:id="__text_manager_8cpp_source_1l00127"/><link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">00127</link> std::string&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00128"/>00128 {
<anchor xml:id="__text_manager_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(text,&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;content));
<anchor xml:id="__text_manager_8cpp_source_1l00130"/>00130 }
<anchor xml:id="__text_manager_8cpp_source_1l00131"/>00131 
<anchor xml:id="__text_manager_8cpp_source_1l00132"/><link linkend="__text_manager_8cpp_1a6a1f72a80ddaec746c95996b16e3a1dc">00132</link> std::string&#32;<link linkend="__text_manager_8cpp_1a6a1f72a80ddaec746c95996b16e3a1dc">getContentAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00133"/>00133 {
<anchor xml:id="__text_manager_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a6a1f72a80ddaec746c95996b16e3a1dc">getContentAfter</link>(text,&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;content)+content.size());
<anchor xml:id="__text_manager_8cpp_source_1l00135"/>00135 }
<anchor xml:id="__text_manager_8cpp_source_1l00136"/>00136 
<anchor xml:id="__text_manager_8cpp_source_1l00137"/><link linkend="__text_manager_8cpp_1a2b5e78b03c6bedc0fa93a0c3b2dbd5b1">00137</link> std::string&#32;<link linkend="__text_manager_8cpp_1a2b5e78b03c6bedc0fa93a0c3b2dbd5b1">getContentStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00138"/>00138 {
<anchor xml:id="__text_manager_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,content);
<anchor xml:id="__text_manager_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1a2b5e78b03c6bedc0fa93a0c3b2dbd5b1">getContentStarting</link>(text,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00141"/>00141 }
<anchor xml:id="__text_manager_8cpp_source_1l00142"/>00142 
<anchor xml:id="__text_manager_8cpp_source_1l00143"/><link linkend="__text_manager_8cpp_1a856b84aae48313c32a2e29a29babd901">00143</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a856b84aae48313c32a2e29a29babd901">isPresentBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;after)
<anchor xml:id="__text_manager_8cpp_source_1l00144"/>00144 {
<anchor xml:id="__text_manager_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos1&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;before);
<anchor xml:id="__text_manager_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos2&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;after);
<anchor xml:id="__text_manager_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;pos1&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos1&#32;&lt;&#32;pos2;
<anchor xml:id="__text_manager_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00151"/>00151 }
<anchor xml:id="__text_manager_8cpp_source_1l00152"/>00152 
<anchor xml:id="__text_manager_8cpp_source_1l00153"/><link linkend="__text_manager_8cpp_1ae05a3fd36bf5fe073c1e2e46c4055ee0">00153</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8cpp_1ae05a3fd36bf5fe073c1e2e46c4055ee0">countOccurrencesBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end)
<anchor xml:id="__text_manager_8cpp_source_1l00154"/>00154 {
<anchor xml:id="__text_manager_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;posEnd=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;end);
<anchor xml:id="__text_manager_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(posEnd&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;newtext&#32;=&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(text,&#32;posEnd);
<anchor xml:id="__text_manager_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;before);
<anchor xml:id="__text_manager_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00161"/>00161 }
<anchor xml:id="__text_manager_8cpp_source_1l00162"/>00162 
<anchor xml:id="__text_manager_8cpp_source_1l00163"/><link linkend="__text_manager_8cpp_1a73094485e8f0933e42411cfa2b197a79">00163</link> std::string&#32;<link linkend="__text_manager_8cpp_1a73094485e8f0933e42411cfa2b197a79">getContentUntilEqual</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;open,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;close)
<anchor xml:id="__text_manager_8cpp_source_1l00164"/>00164 {
<anchor xml:id="__text_manager_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=-1;
<anchor xml:id="__text_manager_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;std::string&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbOpen&#32;=&#32;1;
<anchor xml:id="__text_manager_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbClose&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(nbOpen&#32;!=&#32;nbClose)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;close,pos+1);
<anchor xml:id="__text_manager_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newtext&#32;=&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(text,&#32;pos+close.length());
<anchor xml:id="__text_manager_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbOpen&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;open);
<anchor xml:id="__text_manager_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbClose&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;close);
<anchor xml:id="__text_manager_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00181"/>00181 }
<anchor xml:id="__text_manager_8cpp_source_1l00182"/>00182 
<anchor xml:id="__text_manager_8cpp_source_1l00183"/><link linkend="__text_manager_8cpp_1a6c3a83e299bc5fddfc934b5cc78093d8">00183</link> std::string&#32;<link linkend="__text_manager_8cpp_1a6c3a83e299bc5fddfc934b5cc78093d8">getContentUntilEqualUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;open,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;close,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;stop)
<anchor xml:id="__text_manager_8cpp_source_1l00184"/>00184 {
<anchor xml:id="__text_manager_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;-1;
<anchor xml:id="__text_manager_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;std::string&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbOpen&#32;=&#32;1;
<anchor xml:id="__text_manager_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbClose&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(nbOpen&#32;!=&#32;nbClose)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;stop,&#32;pos+1);
<anchor xml:id="__text_manager_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newtext&#32;=&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(text,&#32;pos+stop.length());
<anchor xml:id="__text_manager_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbOpen&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;open);
<anchor xml:id="__text_manager_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbClose&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;close);
<anchor xml:id="__text_manager_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00201"/>00201 }
<anchor xml:id="__text_manager_8cpp_source_1l00202"/><link linkend="__text_manager_8cpp_1a98316ec2e3cf34b3091ab6ba823f486c">00202</link> std::string&#32;<link linkend="__text_manager_8cpp_1a98316ec2e3cf34b3091ab6ba823f486c">getContentUntilOutside</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;inside,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outside)
<anchor xml:id="__text_manager_8cpp_source_1l00203"/>00203 {
<anchor xml:id="__text_manager_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;-1;
<anchor xml:id="__text_manager_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;std::string&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbOpen&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbClose&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(nbOpen+1&#32;!=&#32;nbClose)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;outside,&#32;pos+1);
<anchor xml:id="__text_manager_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newtext&#32;=&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(text,&#32;pos+outside.length());
<anchor xml:id="__text_manager_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbOpen&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;inside);
<anchor xml:id="__text_manager_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbClose&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;outside);
<anchor xml:id="__text_manager_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00220"/>00220 }
<anchor xml:id="__text_manager_8cpp_source_1l00221"/>00221 
<anchor xml:id="__text_manager_8cpp_source_1l00222"/><link linkend="__text_manager_8cpp_1a3f557e0fad17d434f0d6839e590f6cfe">00222</link> std::string&#32;<link linkend="__text_manager_8cpp_1a3f557e0fad17d434f0d6839e590f6cfe">getContentInsideUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;inside,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outside,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;stop)
<anchor xml:id="__text_manager_8cpp_source_1l00223"/>00223 {
<anchor xml:id="__text_manager_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;-1;
<anchor xml:id="__text_manager_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;std::string&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbOpen&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbClose&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(nbOpen&#32;!=&#32;nbClose+1)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,&#32;stop,&#32;pos+1);
<anchor xml:id="__text_manager_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newtext&#32;=&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(text,&#32;pos+stop.length());
<anchor xml:id="__text_manager_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbOpen&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;inside);
<anchor xml:id="__text_manager_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nbClose&#32;=&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(newtext,&#32;outside);
<anchor xml:id="__text_manager_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00240"/>00240 }
<anchor xml:id="__text_manager_8cpp_source_1l00241"/>00241 
<anchor xml:id="__text_manager_8cpp_source_1l00242"/><link linkend="__text_manager_8cpp_1ae0e68335c17a2ff305e151cc1d9e21cd">00242</link> std::string&#32;<link linkend="__text_manager_8cpp_1ae0e68335c17a2ff305e151cc1d9e21cd">getContentBeforeLastOccurence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;occurence)
<anchor xml:id="__text_manager_8cpp_source_1l00243"/>00243 {
<anchor xml:id="__text_manager_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;text.find_last_of(occurence)-occurence.length()+1;
<anchor xml:id="__text_manager_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00249"/>00249 }
<anchor xml:id="__text_manager_8cpp_source_1l00250"/>00250 
<anchor xml:id="__text_manager_8cpp_source_1l00251"/><link linkend="__text_manager_8cpp_1a8e4fb03d21e39e65bf90e109939b0105">00251</link> std::string&#32;<link linkend="__text_manager_8cpp_1a8e4fb03d21e39e65bf90e109939b0105">reverseString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text)
<anchor xml:id="__text_manager_8cpp_source_1l00252"/>00252 {
<anchor xml:id="__text_manager_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;std::string&#32;newtext&#32;=&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;std::reverse(newtext.begin(),&#32;newtext.end());
<anchor xml:id="__text_manager_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newtext;
<anchor xml:id="__text_manager_8cpp_source_1l00256"/>00256 }
<anchor xml:id="__text_manager_8cpp_source_1l00257"/>00257 
<anchor xml:id="__text_manager_8cpp_source_1l00258"/><link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">00258</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8cpp_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00259"/>00259 {
<anchor xml:id="__text_manager_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;std::string::const_iterator&#32;iter&#32;=&#32;text.begin();
<anchor xml:id="__text_manager_8cpp_source_1l00262"/>00262 
<anchor xml:id="__text_manager_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iter&#32;!=&#32;text.end())&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter&#32;=&#32;std::search(iter,&#32;text.end(),&#32;content.begin(),&#32;content.end());
<anchor xml:id="__text_manager_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(iter&#32;!=&#32;text.end())&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++count;
<anchor xml:id="__text_manager_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter&#32;+=&#32;content.size();
<anchor xml:id="__text_manager_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00270"/>00270 
<anchor xml:id="__text_manager_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
<anchor xml:id="__text_manager_8cpp_source_1l00272"/>00272 }
<anchor xml:id="__text_manager_8cpp_source_1l00273"/>00273 
<anchor xml:id="__text_manager_8cpp_source_1l00274"/><link linkend="__text_manager_8cpp_1adc00e45bfad17a490132d632f34aa1c1">00274</link> std::string&#32;<link linkend="__text_manager_8cpp_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos)
<anchor xml:id="__text_manager_8cpp_source_1l00275"/>00275 {
<anchor xml:id="__text_manager_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text.length()&#32;&gt;=&#32;pos-1)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;pos-1);
<anchor xml:id="__text_manager_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00280"/>00280 }
<anchor xml:id="__text_manager_8cpp_source_1l00281"/>00281 
<anchor xml:id="__text_manager_8cpp_source_1l00282"/><link linkend="__text_manager_8cpp_1a6a59b82e4799f14153c7a28e08d0f96b">00282</link> std::string&#32;<link linkend="__text_manager_8cpp_1a85498cf9c4f0f7c18a2aae6a2707f245">getContentUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos)
<anchor xml:id="__text_manager_8cpp_source_1l00283"/>00283 {
<anchor xml:id="__text_manager_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text.length()&#32;&gt;=&#32;pos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00288"/>00288 }
<anchor xml:id="__text_manager_8cpp_source_1l00289"/>00289 
<anchor xml:id="__text_manager_8cpp_source_1l00290"/><link linkend="__text_manager_8cpp_1a10209da657488a985c6a92e534ef32a3">00290</link> std::string&#32;<link linkend="__text_manager_8cpp_1a6a1f72a80ddaec746c95996b16e3a1dc">getContentAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos)
<anchor xml:id="__text_manager_8cpp_source_1l00291"/>00291 {
<anchor xml:id="__text_manager_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text.length()&#32;&gt;=&#32;pos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(pos,&#32;std::string::npos);
<anchor xml:id="__text_manager_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00296"/>00296 }
<anchor xml:id="__text_manager_8cpp_source_1l00297"/>00297 
<anchor xml:id="__text_manager_8cpp_source_1l00298"/><link linkend="__text_manager_8cpp_1a298789aa768d11d50d04a2f246a19a74">00298</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1a298789aa768d11d50d04a2f246a19a74">to_bool</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;s)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s&#32;==&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;||&#32;s==<emphasis role="stringliteral">&quot;true&quot;</emphasis>;
<anchor xml:id="__text_manager_8cpp_source_1l00300"/>00300 }
<anchor xml:id="__text_manager_8cpp_source_1l00301"/>00301 
<anchor xml:id="__text_manager_8cpp_source_1l00302"/><link linkend="__text_manager_8cpp_1a6b6762c360fecdd04e1dba79a58e8466">00302</link> std::string&#32;<link linkend="__text_manager_8cpp_1a2b5e78b03c6bedc0fa93a0c3b2dbd5b1">getContentStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;pos)
<anchor xml:id="__text_manager_8cpp_source_1l00303"/>00303 {
<anchor xml:id="__text_manager_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(text.length()&#32;&gt;=&#32;pos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(pos,&#32;std::string::npos);
<anchor xml:id="__text_manager_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00307"/>00307 }
<anchor xml:id="__text_manager_8cpp_source_1l00308"/>00308 
<anchor xml:id="__text_manager_8cpp_source_1l00309"/><link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">00309</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;startPos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.find(content,startPos);
<anchor xml:id="__text_manager_8cpp_source_1l00311"/>00311 }
<anchor xml:id="__text_manager_8cpp_source_1l00312"/>00312 
<anchor xml:id="__text_manager_8cpp_source_1l00313"/><link linkend="__text_manager_8cpp_1acd5e438b43d1ea1b3fc41a8badfe635b">00313</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8cpp_1acd5e438b43d1ea1b3fc41a8badfe635b">findContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00314"/>00314 {
<anchor xml:id="__text_manager_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(text,content)!=std::string::npos;
<anchor xml:id="__text_manager_8cpp_source_1l00316"/>00316 }
<anchor xml:id="__text_manager_8cpp_source_1l00317"/>00317 
<anchor xml:id="__text_manager_8cpp_source_1l00318"/><link linkend="__text_manager_8cpp_1af28b966ccdfa1dc51f8a9aa18b62b343">00318</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8cpp_1af28b966ccdfa1dc51f8a9aa18b62b343">printFileContent</link>(std::string&#32;path)
<anchor xml:id="__text_manager_8cpp_source_1l00319"/>00319 {
<anchor xml:id="__text_manager_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<link linkend="__text_manager_8cpp_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(path);
<anchor xml:id="__text_manager_8cpp_source_1l00321"/>00321 }
<anchor xml:id="__text_manager_8cpp_source_1l00322"/>00322 
<anchor xml:id="__text_manager_8cpp_source_1l00323"/><link linkend="__text_manager_8cpp_1a6d7c13a554de9db4c8ebc8b3175af417">00323</link> std::string&#32;<link linkend="__text_manager_8cpp_1a6d7c13a554de9db4c8ebc8b3175af417">removeLastOccurence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)
<anchor xml:id="__text_manager_8cpp_source_1l00324"/>00324 {
<anchor xml:id="__text_manager_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=text.find_last_of(content)-content.length()+1;
<anchor xml:id="__text_manager_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text.substr(0,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00329"/>00329 }
<anchor xml:id="__text_manager_8cpp_source_1l00330"/>00330 
<anchor xml:id="__text_manager_8cpp_source_1l00331"/><link linkend="__text_manager_8cpp_1a42b898aede0151587625671fa5ba1ef3">00331</link> std::vector&lt;std::string&gt;&#32;<link linkend="__text_manager_8cpp_1a42b898aede0151587625671fa5ba1ef3">getAllLines</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter)
<anchor xml:id="__text_manager_8cpp_source_1l00332"/>00332 {
<anchor xml:id="__text_manager_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;allocc;
<anchor xml:id="__text_manager_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;endPos&#32;=&#32;0;
<anchor xml:id="__text_manager_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;std::string&#32;newtext&#32;=&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="__text_manager_8cpp_1afbb8972025ad14e914fdaafa26957439">findPos</link>(newtext,&#32;lineParameter);
<anchor xml:id="__text_manager_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newtext&#32;=&#32;<link linkend="__text_manager_8cpp_1a2b5e78b03c6bedc0fa93a0c3b2dbd5b1">getContentStarting</link>(newtext,&#32;pos);
<anchor xml:id="__text_manager_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line&#32;=&#32;<link linkend="__text_manager_8cpp_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(newtext,&#32;lineParameter);
<anchor xml:id="__text_manager_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocc.push_back(line);
<anchor xml:id="__text_manager_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocc;
<anchor xml:id="__text_manager_8cpp_source_1l00346"/>00346 }
<anchor xml:id="__text_manager_8cpp_source_1l00347"/>00347 
<anchor xml:id="__text_manager_8cpp_source_1l00348"/><link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">00348</link> std::string&#32;<link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)
<anchor xml:id="__text_manager_8cpp_source_1l00349"/>00349 {
<anchor xml:id="__text_manager_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="__text_manager_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;l&#32;:&#32;text)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l&#32;!=&#32;c)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;l;
<anchor xml:id="__text_manager_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__text_manager_8cpp_source_1l00357"/>00357 }
<anchor xml:id="__text_manager_8cpp_source_1l00358"/><link linkend="__text_manager_8cpp_1a55e73c9c3cfe26561256a7936deb02db">00358</link> std::string&#32;<link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;char&gt;&amp;&#32;cList)
<anchor xml:id="__text_manager_8cpp_source_1l00359"/>00359 {
<anchor xml:id="__text_manager_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;std::string&#32;temp&#32;=&#32;text;
<anchor xml:id="__text_manager_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;c&#32;:&#32;cList)&#32;{
<anchor xml:id="__text_manager_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;<link linkend="__text_manager_8cpp_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(temp,&#32;c);
<anchor xml:id="__text_manager_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;}
<anchor xml:id="__text_manager_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;temp;
<anchor xml:id="__text_manager_8cpp_source_1l00365"/>00365 }
</programlisting></section>
