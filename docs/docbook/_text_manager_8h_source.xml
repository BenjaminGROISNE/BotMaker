<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__text_manager_8h_source" xml:lang="en-US">
<title>TextManager.h</title>
<indexterm><primary>src/TextManager.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__text_manager_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="__text_manager_8h_source_1l00007"/>00007 
<anchor xml:id="__text_manager_8h_source_1l00008"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">00008</link> <emphasis role="keyword">enum</emphasis>&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;{
<anchor xml:id="__text_manager_8h_source_1l00009"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">00009</link> &#32;&#32;&#32;&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>,
<anchor xml:id="__text_manager_8h_source_1l00010"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76daf38784ef4b08f294d4a78f62181729a0">00010</link> &#32;&#32;&#32;&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76daf38784ef4b08f294d4a78f62181729a0">APPEND</link>,
<anchor xml:id="__text_manager_8h_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76da5d8c28daa563cffcab51f34a0bec098d">OVERWRITE</link>
<anchor xml:id="__text_manager_8h_source_1l00012"/><link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76da5d8c28daa563cffcab51f34a0bec098d">00012</link> };
<anchor xml:id="__text_manager_8h_source_1l00013"/>00013 
<anchor xml:id="__text_manager_8h_source_1l00014"/>00014 std::string&#32;<link linkend="__text_manager_8h_1add36cc54cd9616a393a17b8961491477">getFileContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00015"/>00015 std::ifstream&#32;<link linkend="__text_manager_8h_1a5e4308ca14d1f4cfc2456fc26b1361a8">getIfstreamFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00016"/>00016 std::ofstream&#32;<link linkend="__text_manager_8h_1ab94653432c8ce86c30be348c8c30caab">getOfstreamFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method=<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>);
<anchor xml:id="__text_manager_8h_source_1l00017"/>00017 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1a17dcf01a80ea6a03039f6792fe0ce1ec">writeToFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76d">WriteMode</link>&#32;method=&#32;<link linkend="__text_manager_8h_1a61d23b393fdc35f2f0e30a1ed566c76dab39faf224e046fb4e507e73fc675cd0f">PREPEND</link>);
<anchor xml:id="__text_manager_8h_source_1l00018"/>00018 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1ae4fe8a84012650993d5d2fac420daec2">clearFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00019"/>00019 std::string&#32;<link linkend="__text_manager_8h_1aa61ad4367d44c1e14541c7c1c46da795">extractContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;first,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last);
<anchor xml:id="__text_manager_8h_source_1l00020"/>00020 std::string&#32;<link linkend="__text_manager_8h_1a55651a43aac6404e3e403967b3633201">extractLineContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fullContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;first,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last);
<anchor xml:id="__text_manager_8h_source_1l00021"/>00021 std::string&#32;<link linkend="__text_manager_8h_1a98e5aae2b6659418890caba4fad17d5e">updateContent</link>(std::string&#32;fullContent,&#32;std::string&#32;newContent,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;first,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last);
<anchor xml:id="__text_manager_8h_source_1l00022"/>00022 std::string&#32;<link linkend="__text_manager_8h_1af24bee60aa1d3d5b4ae3bf6ebd267ecd">getLine</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter);
<anchor xml:id="__text_manager_8h_source_1l00023"/>00023 std::string&#32;<link linkend="__text_manager_8h_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00024"/>00024 std::string&#32;<link linkend="__text_manager_8h_1a377407ab4c28873a8e1956ea343f9cc2">getContentBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>);
<anchor xml:id="__text_manager_8h_source_1l00025"/>00025 std::string&#32;<link linkend="__text_manager_8h_1ae9775892f92eb826a785cb5379c17faa">getContentAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>);
<anchor xml:id="__text_manager_8h_source_1l00026"/>00026 std::string&#32;<link linkend="__text_manager_8h_1af5bba898a2a3865d71820cbab2d26f27">getContentUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>);
<anchor xml:id="__text_manager_8h_source_1l00027"/>00027 std::string&#32;<link linkend="__text_manager_8h_1ae3642a08dbee1e494f977e6fe83c119e">getContentStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__units_8h_1a224b9163917ac32fc95a60d8c1eec3aa">Direction</link>);
<anchor xml:id="__text_manager_8h_source_1l00028"/>00028 std::string&#32;<link linkend="__text_manager_8h_1af5bba898a2a3865d71820cbab2d26f27">getContentUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00029"/>00029 std::string&#32;<link linkend="__text_manager_8h_1ae9775892f92eb826a785cb5379c17faa">getContentAfter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00030"/>00030 std::string&#32;<link linkend="__text_manager_8h_1ae3642a08dbee1e494f977e6fe83c119e">getContentStarting</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00031"/>00031 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1a856b84aae48313c32a2e29a29babd901">isPresentBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;after);
<anchor xml:id="__text_manager_8h_source_1l00032"/>00032 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8h_1ae05a3fd36bf5fe073c1e2e46c4055ee0">countOccurrencesBefore</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;before,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;end);
<anchor xml:id="__text_manager_8h_source_1l00033"/>00033 std::string&#32;<link linkend="__text_manager_8h_1a73094485e8f0933e42411cfa2b197a79">getContentUntilEqual</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;open,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;close);
<anchor xml:id="__text_manager_8h_source_1l00034"/>00034 std::string&#32;<link linkend="__text_manager_8h_1a6c3a83e299bc5fddfc934b5cc78093d8">getContentUntilEqualUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;open,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;close,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;stop);
<anchor xml:id="__text_manager_8h_source_1l00035"/>00035 std::string&#32;<link linkend="__text_manager_8h_1a98316ec2e3cf34b3091ab6ba823f486c">getContentUntilOutside</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;inside,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outside);
<anchor xml:id="__text_manager_8h_source_1l00036"/>00036 std::string&#32;<link linkend="__text_manager_8h_1a3f557e0fad17d434f0d6839e590f6cfe">getContentInsideUntil</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;inside,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outside,<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;stop);
<anchor xml:id="__text_manager_8h_source_1l00037"/>00037 std::string&#32;<link linkend="__text_manager_8h_1ae0e68335c17a2ff305e151cc1d9e21cd">getContentBeforeLastOccurence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;occurence);
<anchor xml:id="__text_manager_8h_source_1l00038"/>00038 std::string&#32;<link linkend="__text_manager_8h_1a8e4fb03d21e39e65bf90e109939b0105">reverseString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text);
<anchor xml:id="__text_manager_8h_source_1l00039"/>00039 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__text_manager_8h_1aaa7941b150f7dd0f8e641601c83f7159">countOccurrences</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00040"/>00040 <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__text_manager_8h_1a2b1ac9999f39955febd8836ea56a994c">findPos</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content,<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;startPos=<emphasis role="keywordtype">size_t</emphasis>());
<anchor xml:id="__text_manager_8h_source_1l00041"/>00041 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1acd5e438b43d1ea1b3fc41a8badfe635b">findContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00042"/>00042 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__text_manager_8h_1af28b966ccdfa1dc51f8a9aa18b62b343">printFileContent</link>(std::string&#32;path);
<anchor xml:id="__text_manager_8h_source_1l00043"/>00043 std::string&#32;<link linkend="__text_manager_8h_1a6d7c13a554de9db4c8ebc8b3175af417">removeLastOccurence</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00044"/>00044 std::vector&lt;std::string&gt;&#32;<link linkend="__text_manager_8h_1a42b898aede0151587625671fa5ba1ef3">getAllLines</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;lineParameter);
<anchor xml:id="__text_manager_8h_source_1l00045"/>00045 std::string&#32;<link linkend="__text_manager_8h_1a5f4889fcc6892114ae5ea80e2fec852e">removeContent</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content);
<anchor xml:id="__text_manager_8h_source_1l00046"/>00046 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__text_manager_8h_1a4d7e873070d3addef773ee502b520f7e">to_bool</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;s);
<anchor xml:id="__text_manager_8h_source_1l00047"/>00047 std::string&#32;<link linkend="__text_manager_8h_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c);
<anchor xml:id="__text_manager_8h_source_1l00048"/>00048 std::string&#32;<link linkend="__text_manager_8h_1aa0db2023b135700695842f97f21f2d47">removeCharacter</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;text,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;char&gt;&amp;&#32;c);
<anchor xml:id="__text_manager_8h_source_1l00049"/>00049 
<anchor xml:id="__text_manager_8h_source_1l00050"/>00050 
</programlisting></section>
